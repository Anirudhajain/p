// Auto generated Tests from BridgeTest

// Test Object to put test methods in
Type_Class Test_Class;
Object test_Class_Instance;
// Test Method symbol
Type_Symbol SMB_runTestCase;
Object symbol28;
Object symbol33;
Object class3;
Object symbol32;
Object classreference6;
Object symbol34;
Object classreference7;
Object symbol31;
Object class2;
Object symbol27;
Object class1;
Object smallint85;
Object constant159;
Object method45;
Object symbol11;
Object methodclosure33;
Object localvariable23;
Object array23;
Object smallint86;
Object constant160;
Object send111;
Object method46;
Object symbol39;
Object methodclosure34;
Object symbol19;
Object constant161;
Object method47;
Object symbol20;
Object methodclosure35;
Object smallint87;
Object constant162;
Object smallint88;
Object constant163;
Object send112;
Object method48;
Object symbol12;
Object methodclosure36;
Object variable5;
Object array24;
Object smallint89;
Object constant164;
Object smallint90;
Object constant165;
Object send115;
Object smallint91;
Object constant166;
Object send116;
Object block38;
Object smallint92;
Object constant167;
Object send117;
Object block39;
Object send114;
Object block37;
Object send113;
Object method49;
Object symbol40;
Object methodclosure37;
Object send118;
Object method50;
Object symbol5;
Object methodclosure38;
Object constant168;
Object constant169;
Object send119;
Object method51;
Object symbol21;
Object methodclosure39;
Object smallint93;
Object constant170;
Object smallint94;
Object constant171;
Object send120;
Object method52;
Object symbol13;
Object methodclosure40;
Object method53;
Object symbol41;
Object methodclosure41;
Object method54;
Object symbol6;
Object methodclosure42;
Object smallint95;
Object constant172;
Object smallint96;
Object constant173;
Object send121;
Object method55;
Object symbol14;
Object methodclosure43;
Object method56;
Object symbol7;
Object methodclosure44;
Object smallint97;
Object constant174;
Object smallint98;
Object constant175;
Object send122;
Object method57;
Object symbol15;
Object methodclosure45;
Object localvariable24;
Object array25;
Object symbol42;
Object arraylayout1;
Object instancevariable1;
Object instancevariable2;
Object instancevariable3;
Object class4;
Object method59;
Object symbol50;
Object methodclosure46;
Object method60;
Object symbol47;
Object methodclosure47;
Object localvariable25;
Object array26;
Object assign12;
Object method61;
Object symbol49;
Object methodclosure48;
Object localvariable26;
Object array27;
Object assign13;
Object method62;
Object symbol2;
Object methodclosure49;
Object method63;
Object symbol51;
Object methodclosure50;
Object localvariable27;
Object array28;
Object assign14;
Object method64;
Object symbol48;
Object methodclosure51;
Object classreference8;
Object symbol52;
Object smallint99;
Object constant176;
Object send123;
Object assign11;
Object smallint100;
Object constant177;
Object smallint101;
Object constant178;
Object send124;
Object smallint102;
Object constant179;
Object smallint103;
Object constant180;
Object send125;
Object symbol53;
Object smallint104;
Object constant181;
Object send128;
Object smallint105;
Object constant182;
Object send127;
Object send126;
Object smallint106;
Object constant183;
Object send131;
Object smallint107;
Object constant184;
Object send130;
Object send129;
Object localvariable28;
Object array29;
Object smallint108;
Object constant185;
Object send133;
Object smallint109;
Object constant186;
Object send134;
Object block40;
Object symbol54;
Object smallint110;
Object constant187;
Object send135;
Object send132;
Object send138;
Object smallint111;
Object constant188;
Object send137;
Object send136;
Object send141;
Object smallint112;
Object constant189;
Object send140;
Object send139;
Object send144;
Object smallint113;
Object constant190;
Object send143;
Object send142;
Object send147;
Object send149;
Object send151;
Object constant191;
Object send152;
Object send150;
Object send148;
Object send146;
Object smallint115;
Object constant192;
Object send153;
Object send145;
Object method58;
Object symbol43;
Object methodclosure52;
Object character31;
Object constant193;
Object method65;
Object symbol8;
Object methodclosure53;
Object localvariable29;
Object localvariable30;
Object localvariable31;
Object array30;
Object send155;
Object send154;
Object method66;
Object symbol35;
Object methodclosure54;
Object smallint116;
Object constant194;
Object smallint117;
Object constant195;
Object send156;
Object method67;
Object symbol16;
Object methodclosure55;
Object smallint118;
Object constant196;
Object method68;
Object symbol36;
Object methodclosure56;
Object character32;
Object constant197;
Object character33;
Object constant198;
Object send157;
Object method69;
Object symbol9;
Object methodclosure57;
Object string37;
Object constant199;
Object method70;
Object symbol17;
Object methodclosure58;
Object localvariable32;
Object array31;
Object symbol44;
Object objectlayout4;
Object instancevariable4;
Object instancevariable5;
Object instancevariable6;
Object class5;
Object method72;
Object methodclosure59;
Object method73;
Object methodclosure60;
Object localvariable33;
Object array32;
Object assign16;
Object method74;
Object methodclosure61;
Object localvariable34;
Object array33;
Object assign17;
Object method75;
Object methodclosure62;
Object method76;
Object methodclosure63;
Object localvariable35;
Object array34;
Object assign18;
Object method77;
Object methodclosure64;
Object classreference9;
Object symbol55;
Object send158;
Object assign15;
Object localvariable36;
Object array35;
Object smallint119;
Object constant200;
Object send160;
Object smallint120;
Object constant201;
Object send161;
Object block41;
Object smallint121;
Object constant202;
Object send162;
Object send159;
Object send165;
Object smallint122;
Object constant203;
Object send164;
Object send163;
Object send168;
Object smallint123;
Object constant204;
Object send167;
Object send166;
Object send171;
Object smallint124;
Object constant205;
Object send170;
Object send169;
Object send174;
Object send175;
Object send173;
Object send176;
Object send172;
Object method71;
Object symbol45;
Object methodclosure65;
Object smallint125;
Object constant206;
Object smallint126;
Object constant207;
Object send179;
Object smallint127;
Object constant208;
Object send178;
Object smallint128;
Object constant209;
Object send177;
Object method78;
Object symbol37;
Object methodclosure66;
Object string38;
Object constant210;
Object string39;
Object constant211;
Object send180;
Object method79;
Object symbol18;
Object methodclosure67;
Object localvariable37;
Object array36;
Object send181;
Object assign19;
Object localvariable38;
Object array37;
Object smallint129;
Object constant212;
Object send183;
Object smallint130;
Object constant213;
Object send184;
Object block42;
Object smallint131;
Object constant214;
Object send185;
Object send182;
Object send188;
Object smallint132;
Object constant215;
Object send187;
Object send186;
Object send191;
Object smallint133;
Object constant216;
Object send190;
Object send189;
Object send194;
Object smallint134;
Object constant217;
Object send193;
Object send192;
Object send197;
Object send198;
Object send196;
Object send199;
Object send195;
Object method80;
Object symbol46;
Object methodclosure68;
Object send200;
Object method81;
Object symbol38;
Object methodclosure69;
Object localvariable39;
Object array38;
Object smallint135;
Object constant218;
Object assign20;
Object method82;
Object symbol10;
Object methodclosure70;
Object classreference5;


void create_ast() {
symbol28 = (Object)new_Type_Symbol_cached(L"BridgeTest");
symbol33 = (Object)new_Type_Symbol_cached(L"ProtoObject");
class3 = (Object)new_Class(Nil, empty_object_layout);
((Type_Class)class3)->name = (Type_Symbol)symbol33;
symbol32 = (Object)new_Type_Symbol_cached(L"Object");
classreference6 = (Object)new_Organization_ClassReference((Object)class2, (Object)package5);
((Organization_ClassReference)classreference6)->name = symbol32;
symbol34 = (Object)new_Type_Symbol_cached(L"ProtoObject");
classreference7 = (Object)new_Organization_ClassReference((Object)class3, (Object)package5);
((Organization_ClassReference)classreference7)->name = symbol34;
symbol31 = (Object)new_Type_Symbol_cached(L"Object");
class2 = (Object)new_Class(class3, empty_object_layout);
((Type_Class)class2)->name = (Type_Symbol)symbol31;
symbol27 = (Object)new_Type_Symbol_cached(L"BridgeTest");
class1 = (Object)new_Class(class2, empty_object_layout);
((Type_Class)class1)->name = (Type_Symbol)symbol27;


// BridgeTest>>tmNumber
smallint85 = (Object)new_Type_SmallInt(1);
constant159 = (Object)new_AST_Constant(smallint85);
method45 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant159);
symbol11 = (Object)new_Type_Symbol_cached(L"tmNumber");
methodclosure33 = (Object)new_Runtime_MethodClosure(method45);
store_method((Type_Class)class1, (Type_Symbol)symbol11, (Runtime_MethodClosure)methodclosure33);

// BridgeTest>>tmMethodArgument:
localvariable23 = (Object)new_AST_Variable_named(L"arg");
array23 = (Object)new_Type_Array_with(1, localvariable23);
smallint86 = (Object)new_Type_SmallInt(1);
constant160 = (Object)new_AST_Constant(smallint86);
send111 = (Object)new_AST_Send((Object)localvariable23, (Object)SMB__plus, 1, constant160);
method46 = (Object)new_AST_Method_with((Type_Array)array23, (Type_Array)empty_Type_Array, 1, send111);
symbol39 = (Object)new_Type_Symbol_cached(L"tmMethodArgument:");
methodclosure34 = (Object)new_Runtime_MethodClosure(method46);
store_method((Type_Class)class1, (Type_Symbol)symbol39, (Runtime_MethodClosure)methodclosure34);

// BridgeTest>>tmSymbol
symbol19 = (Object)new_Type_Symbol_cached(L"Symbol");
constant161 = (Object)new_AST_Constant(symbol19);
method47 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant161);
symbol20 = (Object)new_Type_Symbol_cached(L"tmSymbol");
methodclosure35 = (Object)new_Runtime_MethodClosure(method47);
store_method((Type_Class)class1, (Type_Symbol)symbol20, (Runtime_MethodClosure)methodclosure35);

// BridgeTest>>tmNumberAdd
smallint87 = (Object)new_Type_SmallInt(1);
constant162 = (Object)new_AST_Constant(smallint87);
smallint88 = (Object)new_Type_SmallInt(1);
constant163 = (Object)new_AST_Constant(smallint88);
send112 = (Object)new_AST_Send((Object)constant162, (Object)SMB__plus, 1, constant163);
method48 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send112);
symbol12 = (Object)new_Type_Symbol_cached(L"tmNumberAdd");
methodclosure36 = (Object)new_Runtime_MethodClosure(method48);
store_method((Type_Class)class1, (Type_Symbol)symbol12, (Runtime_MethodClosure)methodclosure36);

// BridgeTest>>tmExtendedReturn
variable5 = (Object)new_AST_Variable_named(L"return");
array24 = (Object)new_Type_Array_with(1, variable5);
smallint89 = (Object)new_Type_SmallInt(1);
constant164 = (Object)new_AST_Constant(smallint89);
smallint90 = (Object)new_Type_SmallInt(2);
constant165 = (Object)new_AST_Constant(smallint90);
send115 = (Object)new_AST_Send((Object)constant164, (Object)SMB__gt, 1, constant165);
smallint91 = (Object)new_Type_SmallInt(1);
constant166 = (Object)new_AST_Constant(smallint91);
send116 = (Object)new_AST_Send((Object)variable5, (Object)SMB_escape_, 1, constant166);
block38 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 3, 1, send116);
smallint92 = (Object)new_Type_SmallInt(2);
constant167 = (Object)new_AST_Constant(smallint92);
send117 = (Object)new_AST_Send((Object)variable5, (Object)SMB_escape_, 1, constant167);
block39 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 3, 1, send117);
send114 = (Object)new_AST_Send((Object)send115, (Object)SMB_ifTrue_ifFalse_, 2, block38, block39);
block37 = (Object)new_AST_Block_with((Type_Array)array24, (Type_Array)empty_Type_Array, 2, 2, send114, Self);
send113 = (Object)new_AST_Send((Object)AST_Callec_Reference, (Object)SMB_on_, 1, block37);
method49 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send113);
symbol40 = (Object)new_Type_Symbol_cached(L"tmExtendedReturn");
methodclosure37 = (Object)new_Runtime_MethodClosure(method49);
store_method((Type_Class)class1, (Type_Symbol)symbol40, (Runtime_MethodClosure)methodclosure37);

// BridgeTest>>tmBooleanEquals
send118 = (Object)new_AST_Send((Object)True_Const, (Object)SMB__equal, 1, True_Const);
method50 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send118);
symbol5 = (Object)new_Type_Symbol_cached(L"tmBooleanEquals");
methodclosure38 = (Object)new_Runtime_MethodClosure(method50);
store_method((Type_Class)class1, (Type_Symbol)symbol5, (Runtime_MethodClosure)methodclosure38);

// BridgeTest>>tmSymbolEquals
constant168 = (Object)new_AST_Constant(symbol19);
constant169 = (Object)new_AST_Constant(symbol19);
send119 = (Object)new_AST_Send((Object)constant168, (Object)SMB__equal, 1, constant169);
method51 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send119);
symbol21 = (Object)new_Type_Symbol_cached(L"tmSymbolEquals");
methodclosure39 = (Object)new_Runtime_MethodClosure(method51);
store_method((Type_Class)class1, (Type_Symbol)symbol21, (Runtime_MethodClosure)methodclosure39);

// BridgeTest>>tmNumberDiv
smallint93 = (Object)new_Type_SmallInt(4);
constant170 = (Object)new_AST_Constant(smallint93);
smallint94 = (Object)new_Type_SmallInt(2);
constant171 = (Object)new_AST_Constant(smallint94);
send120 = (Object)new_AST_Send((Object)constant170, (Object)SMB__divide, 1, constant171);
method52 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send120);
symbol13 = (Object)new_Type_Symbol_cached(L"tmNumberDiv");
methodclosure40 = (Object)new_Runtime_MethodClosure(method52);
store_method((Type_Class)class1, (Type_Symbol)symbol13, (Runtime_MethodClosure)methodclosure40);

// BridgeTest>>tmFibonacci
method53 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, Self);
symbol41 = (Object)new_Type_Symbol_cached(L"tmFibonacci");
methodclosure41 = (Object)new_Runtime_MethodClosure(method53);
store_method((Type_Class)class1, (Type_Symbol)symbol41, (Runtime_MethodClosure)methodclosure41);

// BridgeTest>>tmBooleanFalse
method54 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, False_Const);
symbol6 = (Object)new_Type_Symbol_cached(L"tmBooleanFalse");
methodclosure42 = (Object)new_Runtime_MethodClosure(method54);
store_method((Type_Class)class1, (Type_Symbol)symbol6, (Runtime_MethodClosure)methodclosure42);

// BridgeTest>>tmNumberEquals
smallint95 = (Object)new_Type_SmallInt(1);
constant172 = (Object)new_AST_Constant(smallint95);
smallint96 = (Object)new_Type_SmallInt(1);
constant173 = (Object)new_AST_Constant(smallint96);
send121 = (Object)new_AST_Send((Object)constant172, (Object)SMB__equal, 1, constant173);
method55 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send121);
symbol14 = (Object)new_Type_Symbol_cached(L"tmNumberEquals");
methodclosure43 = (Object)new_Runtime_MethodClosure(method55);
store_method((Type_Class)class1, (Type_Symbol)symbol14, (Runtime_MethodClosure)methodclosure43);

// BridgeTest>>tmBooleanTrue
method56 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, True_Const);
symbol7 = (Object)new_Type_Symbol_cached(L"tmBooleanTrue");
methodclosure44 = (Object)new_Runtime_MethodClosure(method56);
store_method((Type_Class)class1, (Type_Symbol)symbol7, (Runtime_MethodClosure)methodclosure44);

// BridgeTest>>tmNumberMult
smallint97 = (Object)new_Type_SmallInt(2);
constant174 = (Object)new_AST_Constant(smallint97);
smallint98 = (Object)new_Type_SmallInt(3);
constant175 = (Object)new_AST_Constant(smallint98);
send122 = (Object)new_AST_Send((Object)constant174, (Object)SMB__times, 1, constant175);
method57 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send122);
symbol15 = (Object)new_Type_Symbol_cached(L"tmNumberMult");
methodclosure45 = (Object)new_Runtime_MethodClosure(method57);
store_method((Type_Class)class1, (Type_Symbol)symbol15, (Runtime_MethodClosure)methodclosure45);

// BridgeTest>>tmVariableInstanceCreationSized
localvariable24 = (Object)new_AST_Variable_named(L"instance");
array25 = (Object)new_Type_Array_with(1, localvariable24);
symbol42 = (Object)new_Type_Symbol_cached(L"StandardVariableTestClass");
arraylayout1 = (Object)create_type_with_vars(Type_ArrayLayout, 3);
instancevariable1 = (Object)new_AST_InstVariable(0, L"a");
arraylayout1->values[0] = instancevariable1;instancevariable2 = (Object)new_AST_InstVariable(1, L"b");
arraylayout1->values[1] = instancevariable2;instancevariable3 = (Object)new_AST_InstVariable(2, L"c");
arraylayout1->values[2] = instancevariable3;class4 = (Object)new_Class(class2, arraylayout1);
((Type_Class)class4)->name = (Type_Symbol)symbol42;

// StandardVariableTestClass>>c
method59 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable3);
symbol50 = (Object)new_Type_Symbol_cached(L"c");
methodclosure46 = (Object)new_Runtime_MethodClosure(method59);
store_method((Type_Class)class4, (Type_Symbol)symbol50, (Runtime_MethodClosure)methodclosure46);

// StandardVariableTestClass>>b
method60 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable2);
symbol47 = (Object)new_Type_Symbol_cached(L"b");
methodclosure47 = (Object)new_Runtime_MethodClosure(method60);
store_method((Type_Class)class4, (Type_Symbol)symbol47, (Runtime_MethodClosure)methodclosure47);

// StandardVariableTestClass>>c:
localvariable25 = (Object)new_AST_Variable_named(L"anObject");
array26 = (Object)new_Type_Array_with(1, localvariable25);
assign12 = (Object)new_AST_Assign((Object)instancevariable3, (Object)localvariable25);
method61 = (Object)new_AST_Method_with((Type_Array)array26, (Type_Array)empty_Type_Array, 2, assign12, Self);
symbol49 = (Object)new_Type_Symbol_cached(L"c:");
methodclosure48 = (Object)new_Runtime_MethodClosure(method61);
store_method((Type_Class)class4, (Type_Symbol)symbol49, (Runtime_MethodClosure)methodclosure48);

// StandardVariableTestClass>>a:
localvariable26 = (Object)new_AST_Variable_named(L"anObject");
array27 = (Object)new_Type_Array_with(1, localvariable26);
assign13 = (Object)new_AST_Assign((Object)instancevariable1, (Object)localvariable26);
method62 = (Object)new_AST_Method_with((Type_Array)array27, (Type_Array)empty_Type_Array, 2, assign13, Self);
symbol2 = (Object)new_Type_Symbol_cached(L"a:");
methodclosure49 = (Object)new_Runtime_MethodClosure(method62);
store_method((Type_Class)class4, (Type_Symbol)symbol2, (Runtime_MethodClosure)methodclosure49);

// StandardVariableTestClass>>a
method63 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable1);
symbol51 = (Object)new_Type_Symbol_cached(L"a");
methodclosure50 = (Object)new_Runtime_MethodClosure(method63);
store_method((Type_Class)class4, (Type_Symbol)symbol51, (Runtime_MethodClosure)methodclosure50);

// StandardVariableTestClass>>b:
localvariable27 = (Object)new_AST_Variable_named(L"anObject");
array28 = (Object)new_Type_Array_with(1, localvariable27);
assign14 = (Object)new_AST_Assign((Object)instancevariable2, (Object)localvariable27);
method64 = (Object)new_AST_Method_with((Type_Array)array28, (Type_Array)empty_Type_Array, 2, assign14, Self);
symbol48 = (Object)new_Type_Symbol_cached(L"b:");
methodclosure51 = (Object)new_Runtime_MethodClosure(method64);
store_method((Type_Class)class4, (Type_Symbol)symbol48, (Runtime_MethodClosure)methodclosure51);
classreference8 = (Object)new_Organization_ClassReference((Object)class4, (Object)package4);
((Organization_ClassReference)classreference8)->name = symbol42;
symbol52 = (Object)new_Type_Symbol_cached(L"new:");
smallint99 = (Object)new_Type_SmallInt(100);
constant176 = (Object)new_AST_Constant(smallint99);
send123 = (Object)new_AST_Send((Object)classreference8, (Object)symbol52, 1, constant176);
assign11 = (Object)new_AST_Assign((Object)localvariable24, (Object)send123);
smallint100 = (Object)new_Type_SmallInt(1);
constant177 = (Object)new_AST_Constant(smallint100);
smallint101 = (Object)new_Type_SmallInt(1);
constant178 = (Object)new_AST_Constant(smallint101);
send124 = (Object)new_AST_Send((Object)localvariable24, (Object)SMB_at_put_, 2, constant177, constant178);
smallint102 = (Object)new_Type_SmallInt(100);
constant179 = (Object)new_AST_Constant(smallint102);
smallint103 = (Object)new_Type_SmallInt(100);
constant180 = (Object)new_AST_Constant(smallint103);
send125 = (Object)new_AST_Send((Object)localvariable24, (Object)SMB_at_put_, 2, constant179, constant180);
symbol53 = (Object)new_Type_Symbol_cached(L"assert:");
smallint104 = (Object)new_Type_SmallInt(1);
constant181 = (Object)new_AST_Constant(smallint104);
send128 = (Object)new_AST_Send((Object)localvariable24, (Object)SMB_at_, 1, constant181);
smallint105 = (Object)new_Type_SmallInt(1);
constant182 = (Object)new_AST_Constant(smallint105);
send127 = (Object)new_AST_Send((Object)send128, (Object)SMB__equal, 1, constant182);
send126 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send127);
smallint106 = (Object)new_Type_SmallInt(100);
constant183 = (Object)new_AST_Constant(smallint106);
send131 = (Object)new_AST_Send((Object)localvariable24, (Object)SMB_at_, 1, constant183);
smallint107 = (Object)new_Type_SmallInt(100);
constant184 = (Object)new_AST_Constant(smallint107);
send130 = (Object)new_AST_Send((Object)send131, (Object)SMB__equal, 1, constant184);
send129 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send130);
localvariable28 = (Object)new_AST_Variable_named(L"receiver");
array29 = (Object)new_Type_Array_with(1, localvariable28);
smallint108 = (Object)new_Type_SmallInt(2);
constant185 = (Object)new_AST_Constant(smallint108);
send133 = (Object)new_AST_Send((Object)localvariable28, (Object)symbol48, 1, constant185);
smallint109 = (Object)new_Type_SmallInt(3);
constant186 = (Object)new_AST_Constant(smallint109);
send134 = (Object)new_AST_Send((Object)localvariable28, (Object)symbol49, 1, constant186);
block40 = (Object)new_AST_Block_with((Type_Array)array29, (Type_Array)empty_Type_Array, 2, 2, send133, send134);
symbol54 = (Object)new_Type_Symbol_cached(L"nil");
smallint110 = (Object)new_Type_SmallInt(1);
constant187 = (Object)new_AST_Constant(smallint110);
send135 = (Object)new_AST_Send((Object)localvariable24, (Object)symbol2, 1, constant187);
send132 = (Object)new_AST_Send((Object)block40, (Object)symbol54, 1, send135);
send138 = (Object)new_AST_Send((Object)localvariable24, (Object)symbol51, 0);
smallint111 = (Object)new_Type_SmallInt(1);
constant188 = (Object)new_AST_Constant(smallint111);
send137 = (Object)new_AST_Send((Object)send138, (Object)SMB__equal, 1, constant188);
send136 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send137);
send141 = (Object)new_AST_Send((Object)localvariable24, (Object)symbol47, 0);
smallint112 = (Object)new_Type_SmallInt(2);
constant189 = (Object)new_AST_Constant(smallint112);
send140 = (Object)new_AST_Send((Object)send141, (Object)SMB__equal, 1, constant189);
send139 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send140);
send144 = (Object)new_AST_Send((Object)localvariable24, (Object)symbol50, 0);
smallint113 = (Object)new_Type_SmallInt(3);
constant190 = (Object)new_AST_Constant(smallint113);
send143 = (Object)new_AST_Send((Object)send144, (Object)SMB__equal, 1, constant190);
send142 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send143);
send147 = (Object)new_AST_Send((Object)localvariable24, (Object)symbol51, 0);
send149 = (Object)new_AST_Send((Object)localvariable24, (Object)symbol47, 0);
send151 = (Object)new_AST_Send((Object)localvariable24, (Object)symbol50, 0);
constant191 = (Object)new_AST_Constant(smallint114);
send152 = (Object)new_AST_Send((Object)localvariable24, (Object)SMB_at_, 1, constant191);
send150 = (Object)new_AST_Send((Object)send151, (Object)SMB__plus, 1, send152);
send148 = (Object)new_AST_Send((Object)send149, (Object)SMB__plus, 1, send150);
send146 = (Object)new_AST_Send((Object)send147, (Object)SMB__plus, 1, send148);
smallint115 = (Object)new_Type_SmallInt(100);
constant192 = (Object)new_AST_Constant(smallint115);
send153 = (Object)new_AST_Send((Object)localvariable24, (Object)SMB_at_, 1, constant192);
send145 = (Object)new_AST_Send((Object)send146, (Object)SMB__plus, 1, send153);
method58 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array25, 10, assign11, send124, send125, send126, send129, send132, send136, send139, send142, send145);
symbol43 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreationSized");
methodclosure52 = (Object)new_Runtime_MethodClosure(method58);
store_method((Type_Class)class4, (Type_Symbol)symbol43, (Runtime_MethodClosure)methodclosure52);

// StandardVariableTestClass>>tmCharacter
character31 = (Object)new_Type_Character(L'C');
constant193 = (Object)new_AST_Constant(character31);
method65 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant193);
symbol8 = (Object)new_Type_Symbol_cached(L"tmCharacter");
methodclosure53 = (Object)new_Runtime_MethodClosure(method65);
store_method((Type_Class)class4, (Type_Symbol)symbol8, (Runtime_MethodClosure)methodclosure53);

// StandardVariableTestClass>>tmMethodArguments:with:with:
localvariable29 = (Object)new_AST_Variable_named(L"arg1");
localvariable30 = (Object)new_AST_Variable_named(L"arg2");
localvariable31 = (Object)new_AST_Variable_named(L"arg3");
array30 = (Object)new_Type_Array_with(3, localvariable29, localvariable30, localvariable31);
send155 = (Object)new_AST_Send((Object)localvariable29, (Object)SMB__concat, 1, localvariable30);
send154 = (Object)new_AST_Send((Object)send155, (Object)SMB__concat, 1, localvariable31);
method66 = (Object)new_AST_Method_with((Type_Array)array30, (Type_Array)empty_Type_Array, 1, send154);
symbol35 = (Object)new_Type_Symbol_cached(L"tmMethodArguments:with:with:");
methodclosure54 = (Object)new_Runtime_MethodClosure(method66);
store_method((Type_Class)class4, (Type_Symbol)symbol35, (Runtime_MethodClosure)methodclosure54);

// StandardVariableTestClass>>tmNumberSubtract
smallint116 = (Object)new_Type_SmallInt(2);
constant194 = (Object)new_AST_Constant(smallint116);
smallint117 = (Object)new_Type_SmallInt(1);
constant195 = (Object)new_AST_Constant(smallint117);
send156 = (Object)new_AST_Send((Object)constant194, (Object)SMB__minus, 1, constant195);
method67 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send156);
symbol16 = (Object)new_Type_Symbol_cached(L"tmNumberSubtract");
methodclosure55 = (Object)new_Runtime_MethodClosure(method67);
store_method((Type_Class)class4, (Type_Symbol)symbol16, (Runtime_MethodClosure)methodclosure55);

// StandardVariableTestClass>>tmSimpleReturn
smallint118 = (Object)new_Type_SmallInt(1);
constant196 = (Object)new_AST_Constant(smallint118);
method68 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant196);
symbol36 = (Object)new_Type_Symbol_cached(L"tmSimpleReturn");
methodclosure56 = (Object)new_Runtime_MethodClosure(method68);
store_method((Type_Class)class4, (Type_Symbol)symbol36, (Runtime_MethodClosure)methodclosure56);

// StandardVariableTestClass>>tmCharacterEquals
character32 = (Object)new_Type_Character(L'C');
constant197 = (Object)new_AST_Constant(character32);
character33 = (Object)new_Type_Character(L'C');
constant198 = (Object)new_AST_Constant(character33);
send157 = (Object)new_AST_Send((Object)constant197, (Object)SMB__equal, 1, constant198);
method69 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send157);
symbol9 = (Object)new_Type_Symbol_cached(L"tmCharacterEquals");
methodclosure57 = (Object)new_Runtime_MethodClosure(method69);
store_method((Type_Class)class4, (Type_Symbol)symbol9, (Runtime_MethodClosure)methodclosure57);

// StandardVariableTestClass>>tmString
string37 = (Object)new_Type_String(L"String");
constant199 = (Object)new_AST_Constant(string37);
method70 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant199);
symbol17 = (Object)new_Type_Symbol_cached(L"tmString");
methodclosure58 = (Object)new_Runtime_MethodClosure(method70);
store_method((Type_Class)class4, (Type_Symbol)symbol17, (Runtime_MethodClosure)methodclosure58);

// StandardVariableTestClass>>tmSimpleInstanceCreation
localvariable32 = (Object)new_AST_Variable_named(L"instance");
array31 = (Object)new_Type_Array_with(1, localvariable32);
symbol44 = (Object)new_Type_Symbol_cached(L"StandardTestClass");
objectlayout4 = (Object)create_type_with_vars(Type_ObjectLayout, 3);
instancevariable4 = (Object)new_AST_InstVariable(0, L"a");
((Type_Array)objectlayout4)->values[0] = instancevariable4;
instancevariable5 = (Object)new_AST_InstVariable(1, L"b");
((Type_Array)objectlayout4)->values[1] = instancevariable5;
instancevariable6 = (Object)new_AST_InstVariable(2, L"c");
((Type_Array)objectlayout4)->values[2] = instancevariable6;
class5 = (Object)new_Class(class2, objectlayout4);
((Type_Class)class5)->name = (Type_Symbol)symbol44;

// StandardTestClass>>c
method72 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable6);
methodclosure59 = (Object)new_Runtime_MethodClosure(method72);
store_method((Type_Class)class5, (Type_Symbol)symbol50, (Runtime_MethodClosure)methodclosure59);

// StandardTestClass>>b
method73 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable5);
methodclosure60 = (Object)new_Runtime_MethodClosure(method73);
store_method((Type_Class)class5, (Type_Symbol)symbol47, (Runtime_MethodClosure)methodclosure60);

// StandardTestClass>>c:
localvariable33 = (Object)new_AST_Variable_named(L"anObject");
array32 = (Object)new_Type_Array_with(1, localvariable33);
assign16 = (Object)new_AST_Assign((Object)instancevariable6, (Object)localvariable33);
method74 = (Object)new_AST_Method_with((Type_Array)array32, (Type_Array)empty_Type_Array, 2, assign16, Self);
methodclosure61 = (Object)new_Runtime_MethodClosure(method74);
store_method((Type_Class)class5, (Type_Symbol)symbol49, (Runtime_MethodClosure)methodclosure61);

// StandardTestClass>>a:
localvariable34 = (Object)new_AST_Variable_named(L"anObject");
array33 = (Object)new_Type_Array_with(1, localvariable34);
assign17 = (Object)new_AST_Assign((Object)instancevariable4, (Object)localvariable34);
method75 = (Object)new_AST_Method_with((Type_Array)array33, (Type_Array)empty_Type_Array, 2, assign17, Self);
methodclosure62 = (Object)new_Runtime_MethodClosure(method75);
store_method((Type_Class)class5, (Type_Symbol)symbol2, (Runtime_MethodClosure)methodclosure62);

// StandardTestClass>>a
method76 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable4);
methodclosure63 = (Object)new_Runtime_MethodClosure(method76);
store_method((Type_Class)class5, (Type_Symbol)symbol51, (Runtime_MethodClosure)methodclosure63);

// StandardTestClass>>b:
localvariable35 = (Object)new_AST_Variable_named(L"anObject");
array34 = (Object)new_Type_Array_with(1, localvariable35);
assign18 = (Object)new_AST_Assign((Object)instancevariable5, (Object)localvariable35);
method77 = (Object)new_AST_Method_with((Type_Array)array34, (Type_Array)empty_Type_Array, 2, assign18, Self);
methodclosure64 = (Object)new_Runtime_MethodClosure(method77);
store_method((Type_Class)class5, (Type_Symbol)symbol48, (Runtime_MethodClosure)methodclosure64);
classreference9 = (Object)new_Organization_ClassReference((Object)class5, (Object)package4);
((Organization_ClassReference)classreference9)->name = symbol44;
symbol55 = (Object)new_Type_Symbol_cached(L"new");
send158 = (Object)new_AST_Send((Object)classreference9, (Object)symbol55, 0);
assign15 = (Object)new_AST_Assign((Object)localvariable32, (Object)send158);
localvariable36 = (Object)new_AST_Variable_named(L"receiver");
array35 = (Object)new_Type_Array_with(1, localvariable36);
smallint119 = (Object)new_Type_SmallInt(2);
constant200 = (Object)new_AST_Constant(smallint119);
send160 = (Object)new_AST_Send((Object)localvariable36, (Object)symbol48, 1, constant200);
smallint120 = (Object)new_Type_SmallInt(3);
constant201 = (Object)new_AST_Constant(smallint120);
send161 = (Object)new_AST_Send((Object)localvariable36, (Object)symbol49, 1, constant201);
block41 = (Object)new_AST_Block_with((Type_Array)array35, (Type_Array)empty_Type_Array, 2, 2, send160, send161);
smallint121 = (Object)new_Type_SmallInt(1);
constant202 = (Object)new_AST_Constant(smallint121);
send162 = (Object)new_AST_Send((Object)localvariable32, (Object)symbol2, 1, constant202);
send159 = (Object)new_AST_Send((Object)block41, (Object)symbol54, 1, send162);
send165 = (Object)new_AST_Send((Object)localvariable32, (Object)symbol51, 0);
smallint122 = (Object)new_Type_SmallInt(1);
constant203 = (Object)new_AST_Constant(smallint122);
send164 = (Object)new_AST_Send((Object)send165, (Object)SMB__equal, 1, constant203);
send163 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send164);
send168 = (Object)new_AST_Send((Object)localvariable32, (Object)symbol47, 0);
smallint123 = (Object)new_Type_SmallInt(2);
constant204 = (Object)new_AST_Constant(smallint123);
send167 = (Object)new_AST_Send((Object)send168, (Object)SMB__equal, 1, constant204);
send166 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send167);
send171 = (Object)new_AST_Send((Object)localvariable32, (Object)symbol50, 0);
smallint124 = (Object)new_Type_SmallInt(3);
constant205 = (Object)new_AST_Constant(smallint124);
send170 = (Object)new_AST_Send((Object)send171, (Object)SMB__equal, 1, constant205);
send169 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send170);
send174 = (Object)new_AST_Send((Object)localvariable32, (Object)symbol51, 0);
send175 = (Object)new_AST_Send((Object)localvariable32, (Object)symbol47, 0);
send173 = (Object)new_AST_Send((Object)send174, (Object)SMB__plus, 1, send175);
send176 = (Object)new_AST_Send((Object)localvariable32, (Object)symbol50, 0);
send172 = (Object)new_AST_Send((Object)send173, (Object)SMB__plus, 1, send176);
method71 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array31, 6, assign15, send159, send163, send166, send169, send172);
symbol45 = (Object)new_Type_Symbol_cached(L"tmSimpleInstanceCreation");
methodclosure65 = (Object)new_Runtime_MethodClosure(method71);
store_method((Type_Class)class5, (Type_Symbol)symbol45, (Runtime_MethodClosure)methodclosure65);

// StandardTestClass>>tmSimpleBasicArithmetik
smallint125 = (Object)new_Type_SmallInt(1);
constant206 = (Object)new_AST_Constant(smallint125);
smallint126 = (Object)new_Type_SmallInt(2);
constant207 = (Object)new_AST_Constant(smallint126);
send179 = (Object)new_AST_Send((Object)constant206, (Object)SMB__plus, 1, constant207);
smallint127 = (Object)new_Type_SmallInt(2);
constant208 = (Object)new_AST_Constant(smallint127);
send178 = (Object)new_AST_Send((Object)send179, (Object)SMB__plus, 1, constant208);
smallint128 = (Object)new_Type_SmallInt(5);
constant209 = (Object)new_AST_Constant(smallint128);
send177 = (Object)new_AST_Send((Object)send178, (Object)SMB__times, 1, constant209);
method78 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send177);
symbol37 = (Object)new_Type_Symbol_cached(L"tmSimpleBasicArithmetik");
methodclosure66 = (Object)new_Runtime_MethodClosure(method78);
store_method((Type_Class)class5, (Type_Symbol)symbol37, (Runtime_MethodClosure)methodclosure66);

// StandardTestClass>>tmStringEquals
string38 = (Object)new_Type_String(L"String");
constant210 = (Object)new_AST_Constant(string38);
string39 = (Object)new_Type_String(L"String");
constant211 = (Object)new_AST_Constant(string39);
send180 = (Object)new_AST_Send((Object)constant210, (Object)SMB__equal, 1, constant211);
method79 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send180);
symbol18 = (Object)new_Type_Symbol_cached(L"tmStringEquals");
methodclosure67 = (Object)new_Runtime_MethodClosure(method79);
store_method((Type_Class)class5, (Type_Symbol)symbol18, (Runtime_MethodClosure)methodclosure67);

// StandardTestClass>>tmVariableInstanceCreation
localvariable37 = (Object)new_AST_Variable_named(L"instance");
array36 = (Object)new_Type_Array_with(1, localvariable37);
send181 = (Object)new_AST_Send((Object)classreference8, (Object)symbol55, 0);
assign19 = (Object)new_AST_Assign((Object)localvariable37, (Object)send181);
localvariable38 = (Object)new_AST_Variable_named(L"receiver");
array37 = (Object)new_Type_Array_with(1, localvariable38);
smallint129 = (Object)new_Type_SmallInt(2);
constant212 = (Object)new_AST_Constant(smallint129);
send183 = (Object)new_AST_Send((Object)localvariable38, (Object)symbol48, 1, constant212);
smallint130 = (Object)new_Type_SmallInt(3);
constant213 = (Object)new_AST_Constant(smallint130);
send184 = (Object)new_AST_Send((Object)localvariable38, (Object)symbol49, 1, constant213);
block42 = (Object)new_AST_Block_with((Type_Array)array37, (Type_Array)empty_Type_Array, 2, 2, send183, send184);
smallint131 = (Object)new_Type_SmallInt(1);
constant214 = (Object)new_AST_Constant(smallint131);
send185 = (Object)new_AST_Send((Object)localvariable37, (Object)symbol2, 1, constant214);
send182 = (Object)new_AST_Send((Object)block42, (Object)symbol54, 1, send185);
send188 = (Object)new_AST_Send((Object)localvariable37, (Object)symbol51, 0);
smallint132 = (Object)new_Type_SmallInt(1);
constant215 = (Object)new_AST_Constant(smallint132);
send187 = (Object)new_AST_Send((Object)send188, (Object)SMB__equal, 1, constant215);
send186 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send187);
send191 = (Object)new_AST_Send((Object)localvariable37, (Object)symbol47, 0);
smallint133 = (Object)new_Type_SmallInt(2);
constant216 = (Object)new_AST_Constant(smallint133);
send190 = (Object)new_AST_Send((Object)send191, (Object)SMB__equal, 1, constant216);
send189 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send190);
send194 = (Object)new_AST_Send((Object)localvariable37, (Object)symbol50, 0);
smallint134 = (Object)new_Type_SmallInt(3);
constant217 = (Object)new_AST_Constant(smallint134);
send193 = (Object)new_AST_Send((Object)send194, (Object)SMB__equal, 1, constant217);
send192 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send193);
send197 = (Object)new_AST_Send((Object)localvariable37, (Object)symbol51, 0);
send198 = (Object)new_AST_Send((Object)localvariable37, (Object)symbol47, 0);
send196 = (Object)new_AST_Send((Object)send197, (Object)SMB__plus, 1, send198);
send199 = (Object)new_AST_Send((Object)localvariable37, (Object)symbol50, 0);
send195 = (Object)new_AST_Send((Object)send196, (Object)SMB__plus, 1, send199);
method80 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array36, 6, assign19, send182, send186, send189, send192, send195);
symbol46 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreation");
methodclosure68 = (Object)new_Runtime_MethodClosure(method80);
store_method((Type_Class)class5, (Type_Symbol)symbol46, (Runtime_MethodClosure)methodclosure68);

// StandardTestClass>>tmClassReferenceReturn
send200 = (Object)new_AST_Send((Object)Metaclass_Reference, (Object)SMB_name, 0);
method81 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send200);
symbol38 = (Object)new_Type_Symbol_cached(L"tmClassReferenceReturn");
methodclosure69 = (Object)new_Runtime_MethodClosure(method81);
store_method((Type_Class)class5, (Type_Symbol)symbol38, (Runtime_MethodClosure)methodclosure69);

// StandardTestClass>>tmLocalVariable
localvariable39 = (Object)new_AST_Variable_named(L"a");
array38 = (Object)new_Type_Array_with(1, localvariable39);
smallint135 = (Object)new_Type_SmallInt(1);
constant218 = (Object)new_AST_Constant(smallint135);
assign20 = (Object)new_AST_Assign((Object)localvariable39, (Object)constant218);
method82 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array38, 2, assign20, localvariable39);
symbol10 = (Object)new_Type_Symbol_cached(L"tmLocalVariable");
methodclosure70 = (Object)new_Runtime_MethodClosure(method82);
store_method((Type_Class)class5, (Type_Symbol)symbol10, (Runtime_MethodClosure)methodclosure70);
classreference5 = (Object)new_Organization_ClassReference((Object)class1, (Object)package4);
((Organization_ClassReference)classreference5)->name = symbol28;
}


/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanEquals)
/*
tmBooleanEquals
	^ true = true
*/
Object symbol5 = (Object)new_Type_Symbol_cached(L"tmBooleanEquals");
Object send201 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol5, 0);
Object result = (Object)Eval((Object)send201);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanFalse)
/*
tmBooleanFalse
	^ false
*/
Object symbol6 = (Object)new_Type_Symbol_cached(L"tmBooleanFalse");
Object send202 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol6, 0);
Object result = (Object)Eval((Object)send202);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanTrue)
/*
tmBooleanTrue
	^ true
*/
Object symbol7 = (Object)new_Type_Symbol_cached(L"tmBooleanTrue");
Object send203 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol7, 0);
Object result = (Object)Eval((Object)send203);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacter)
/*
tmCharacter
	^ $C
*/
Object symbol8 = (Object)new_Type_Symbol_cached(L"tmCharacter");
Object send204 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol8, 0);
Object result = (Object)Eval((Object)send204);
ASSERT_EMPTY_STACK
assert0(((Type_Character)result)->value == 'C');
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacterEquals)
/*
tmCharacterEquals
	^ $C = $C
*/
Object symbol9 = (Object)new_Type_Symbol_cached(L"tmCharacterEquals");
Object send205 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol9, 0);
Object result = (Object)Eval((Object)send205);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmClassReferenceReturn)
/*
tmClassReferenceReturn
	^ Metaclass name.
*/
Object symbol38 = (Object)new_Type_Symbol_cached(L"tmClassReferenceReturn");
Object send206 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol38, 0);
Object result = (Object)Eval((Object)send206);
ASSERT_EMPTY_STACK
Object symbol56 = (Object)new_Type_Symbol_cached(L"Metaclass");
result = Eval_Send1(result, SMB__equal, symbol56);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmExtendedReturn)
/*
tmExtendedReturn
	1 > 2 ifTrue: [ ^ 1 ]
		ifFalse: [ ^ 2].
*/
Object symbol40 = (Object)new_Type_Symbol_cached(L"tmExtendedReturn");
Object send207 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol40, 0);
Object result = (Object)Eval((Object)send207);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmLocalVariable)
/*
tmLocalVariable
	|a|
	a := 1.
	^ a
*/
Object symbol10 = (Object)new_Type_Symbol_cached(L"tmLocalVariable");
Object send208 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol10, 0);
Object result = (Object)Eval((Object)send208);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArgument_)
/*
tmMethodArgument: arg 
	<arg1: 1>
	^ arg + 1
*/
Object symbol39 = (Object)new_Type_Symbol_cached(L"tmMethodArgument:");
Object smallint136 = (Object)new_Type_SmallInt(1);
Object constant219 = (Object)new_AST_Constant(smallint136);
Object send209 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol39, 1, constant219);
Object result = (Object)Eval((Object)send209);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArguments_with_with_)
/*
tmMethodArguments: arg1 with: arg2 with: arg3 
	<arg1: 'asdf' arg2: 'asdf' arg3: 'df'>
	^ arg1 , arg2 , arg3
*/
Object symbol35 = (Object)new_Type_Symbol_cached(L"tmMethodArguments:with:with:");
Object string40 = (Object)new_Type_String(L"asdf");
Object constant220 = (Object)new_AST_Constant(string40);
Object string41 = (Object)new_Type_String(L"asdf");
Object constant221 = (Object)new_AST_Constant(string41);
Object string42 = (Object)new_Type_String(L"df");
Object constant222 = (Object)new_AST_Constant(string42);
Object send210 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol35, 3, constant220, constant221, constant222);
Object result = (Object)Eval((Object)send210);
ASSERT_EMPTY_STACK
Object string43 = (Object)new_Type_String(L"asdfasdfdf");
result = Eval_Send1(result, SMB__equal, string43);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumber)
/*
tmNumber
	^ 1
*/
Object symbol11 = (Object)new_Type_Symbol_cached(L"tmNumber");
Object send211 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol11, 0);
Object result = (Object)Eval((Object)send211);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberAdd)
/*
tmNumberAdd
	^ 1 + 1
*/
Object symbol12 = (Object)new_Type_Symbol_cached(L"tmNumberAdd");
Object send212 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol12, 0);
Object result = (Object)Eval((Object)send212);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberDiv)
/*
tmNumberDiv
	^ 4 / 2
*/
Object symbol13 = (Object)new_Type_Symbol_cached(L"tmNumberDiv");
Object send213 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol13, 0);
Object result = (Object)Eval((Object)send213);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberEquals)
/*
tmNumberEquals
	^ 1 = 1
*/
Object symbol14 = (Object)new_Type_Symbol_cached(L"tmNumberEquals");
Object send214 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol14, 0);
Object result = (Object)Eval((Object)send214);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberMult)
/*
tmNumberMult
	^ 2 * 3
*/
Object symbol15 = (Object)new_Type_Symbol_cached(L"tmNumberMult");
Object send215 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol15, 0);
Object result = (Object)Eval((Object)send215);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberSubtract)
/*
tmNumberSubtract
	^ 2 - 1
*/
Object symbol16 = (Object)new_Type_Symbol_cached(L"tmNumberSubtract");
Object send216 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol16, 0);
Object result = (Object)Eval((Object)send216);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleBasicArithmetik)
/*
tmSimpleBasicArithmetik
	^ (1 + 2) + 2 * 5
*/
Object symbol37 = (Object)new_Type_Symbol_cached(L"tmSimpleBasicArithmetik");
Object send217 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol37, 0);
Object result = (Object)Eval((Object)send217);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 25);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleReturn)
/*
tmSimpleReturn
	^ 1
*/
Object symbol36 = (Object)new_Type_Symbol_cached(L"tmSimpleReturn");
Object send218 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol36, 0);
Object result = (Object)Eval((Object)send218);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmString)
/*
tmString
	^ 'String'
*/
Object symbol17 = (Object)new_Type_Symbol_cached(L"tmString");
Object send219 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol17, 0);
Object result = (Object)Eval((Object)send219);
ASSERT_EMPTY_STACK
Object string44 = (Object)new_Type_String(L"String");
result = Eval_Send1(result, SMB__equal, string44);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmStringEquals)
/*
tmStringEquals
	^ 'String' = 'String'
*/
Object symbol18 = (Object)new_Type_Symbol_cached(L"tmStringEquals");
Object send220 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol18, 0);
Object result = (Object)Eval((Object)send220);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbol)
/*
tmSymbol
	^ #Symbol
*/
Object symbol20 = (Object)new_Type_Symbol_cached(L"tmSymbol");
Object send221 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol20, 0);
Object result = (Object)Eval((Object)send221);
ASSERT_EMPTY_STACK
Object symbol19 = (Object)new_Type_Symbol_cached(L"Symbol");
result = Eval_Send1(result, SMB__equal, symbol19);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbolEquals)
/*
tmSymbolEquals
	^ #Symbol = #Symbol
*/
Object symbol21 = (Object)new_Type_Symbol_cached(L"tmSymbolEquals");
Object send222 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol21, 0);
Object result = (Object)Eval((Object)send222);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmFibonacci)
/*
tmFibonacci
	
*/
Object symbol41 = (Object)new_Type_Symbol_cached(L"tmFibonacci");
Object send223 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol41, 0);
Object result = (Object)Eval((Object)send223);
ASSERT_EMPTY_STACK
assert0(result == test_Class_Instance);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleInstanceCreation)
/*
tmSimpleInstanceCreation
	| instance |
	instance := StandardTestClass new.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	^ instance a + instance b  + instance c
	
*/
Object symbol45 = (Object)new_Type_Symbol_cached(L"tmSimpleInstanceCreation");
Object send224 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol45, 0);
Object result = (Object)Eval((Object)send224);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmVariableInstanceCreation)
/*
tmVariableInstanceCreation
	| instance |
	instance := StandardVariableTestClass new.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	^ instance a + instance b  + instance c
	
*/
Object symbol46 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreation");
Object send225 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol46, 0);
Object result = (Object)Eval((Object)send225);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmVariableInstanceCreationSized)
/*
tmVariableInstanceCreationSized
	| instance |
	instance := StandardVariableTestClass new: 100.
	instance at: 1 put: 1.
	instance at: 100 put: 100.
	self assert: (instance at: 1) = 1.
	
	self assert: (instance at: 100) = 100.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	
	^ instance a + instance b + instance c + (instance at: 1) + (instance at: 100)
	
*/
Object symbol43 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreationSized");
Object send226 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol43, 0);
Object result = (Object)Eval((Object)send226);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 107);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

TEST_SUITE(AutoGenTest,
{
    create_ast();
    Test_Class = new_Class_named((Object)Type_Object_Class, L"Test_Object", Type_Object_Class->type);
    test_Class_Instance = (Object)new_AST_Constant((Object)instantiate((Type_Class)Test_Class));

    RUN_TEST(AutoGenTest_tmSimpleReturn);
    RUN_TEST(AutoGenTest_tmNumberMult);
    RUN_TEST(AutoGenTest_tmSymbol);
    RUN_TEST(AutoGenTest_tmNumber);
    RUN_TEST(AutoGenTest_tmBooleanFalse);
    RUN_TEST(AutoGenTest_tmString);
    RUN_TEST(AutoGenTest_tmLocalVariable);
    RUN_TEST(AutoGenTest_tmSimpleInstanceCreation);
    RUN_TEST(AutoGenTest_tmMethodArgument_);
    RUN_TEST(AutoGenTest_tmNumberEquals);
    RUN_TEST(AutoGenTest_tmClassReferenceReturn);
    RUN_TEST(AutoGenTest_tmCharacterEquals);
    RUN_TEST(AutoGenTest_tmCharacter);
    RUN_TEST(AutoGenTest_tmVariableInstanceCreation);
    RUN_TEST(AutoGenTest_tmBooleanTrue);
    RUN_TEST(AutoGenTest_tmNumberSubtract);
    RUN_TEST(AutoGenTest_tmNumberAdd);
    RUN_TEST(AutoGenTest_tmBooleanEquals);
    RUN_TEST(AutoGenTest_tmMethodArguments_with_with_);
    RUN_TEST(AutoGenTest_tmSimpleBasicArithmetik);
    RUN_TEST(AutoGenTest_tmStringEquals);
    RUN_TEST(AutoGenTest_tmSymbolEquals);
    RUN_TEST(AutoGenTest_tmNumberDiv);
    RUN_TEST(AutoGenTest_tmFibonacci);
    RUN_TEST(AutoGenTest_tmVariableInstanceCreationSized);
    RUN_TEST(AutoGenTest_tmExtendedReturn);
})
