// Auto generated Tests from BridgeTest

// Test Object to put test methods in
Type_Class Test_Class;
Object test_Class_Instance;
// Test Method symbol
Type_Symbol SMB_runTestCase;
Object classreference7;
Object symbol110;
Object objectlayout4;
Object instancevariable9;
Object class11;
Object class12;
Object smallint61;
Object constant79;
Object method53;
Object symbol111;
Object methodclosure53;
Object localvariable23;
Object array22;
Object assign15;
Object method54;
Object symbol106;
Object methodclosure54;
Object method55;
Object symbol108;
Object methodclosure55;
Object symbol86;
Object objectlayout5;
Object instancevariable10;
Object class13;
Object class14;
Object smallint62;
Object constant80;
Object super2;
Object send154;
Object method56;
Object methodclosure56;
Object method57;
Object symbol105;
Object methodclosure57;
Object localvariable24;
Object array23;
Object assign16;
Object method58;
Object symbol109;
Object methodclosure58;
Object classreference8;
Object symbol63;
Object class15;
Object class16;
Object string12;
Object constant81;
Object string13;
Object constant82;
Object send155;
Object method59;
Object symbol70;
Object methodclosure59;
Object send156;
Object method60;
Object symbol67;
Object methodclosure60;
Object smallint63;
Object constant83;
Object method61;
Object symbol90;
Object methodclosure61;
Object localvariable25;
Object array24;
Object send157;
Object assign17;
Object smallint64;
Object constant84;
Object send158;
Object symbol84;
Object send159;
Object smallint65;
Object constant85;
Object send160;
Object send161;
Object send162;
Object send163;
Object send164;
Object smallint66;
Object constant86;
Object send165;
Object send166;
Object smallint67;
Object constant87;
Object send167;
Object send168;
Object send169;
Object smallint68;
Object constant88;
Object send170;
Object send171;
Object method62;
Object symbol87;
Object methodclosure62;
Object string14;
Object constant89;
Object method63;
Object symbol79;
Object methodclosure63;
Object symbol112;
Object constant90;
Object constant91;
Object send172;
Object method64;
Object symbol102;
Object methodclosure64;
Object smallint69;
Object constant92;
Object smallint70;
Object constant93;
Object send173;
Object smallint71;
Object constant94;
Object send174;
Object smallint72;
Object constant95;
Object send175;
Object method65;
Object symbol99;
Object methodclosure65;
Object constant96;
Object method66;
Object symbol80;
Object methodclosure66;
Object localvariable26;
Object array25;
Object symbol71;
Object objectlayout6;
Object instancevariable11;
Object instancevariable12;
Object instancevariable13;
Object class17;
Object class18;
Object string15;
Object constant97;
Object method67;
Object symbol103;
Object methodclosure67;
Object method68;
Object methodclosure68;
Object method69;
Object symbol107;
Object methodclosure69;
Object localvariable27;
Object array26;
Object assign18;
Object method70;
Object methodclosure70;
Object method71;
Object methodclosure71;
Object localvariable28;
Object array27;
Object assign19;
Object method72;
Object symbol104;
Object methodclosure72;
Object localvariable29;
Object array28;
Object assign20;
Object method73;
Object methodclosure73;
Object classreference9;
Object send176;
Object assign21;
Object localvariable30;
Object array29;
Object smallint73;
Object constant98;
Object send177;
Object smallint74;
Object constant99;
Object send178;
Object smallint75;
Object constant100;
Object send179;
Object block8;
Object send180;
Object send181;
Object smallint76;
Object constant101;
Object send182;
Object send183;
Object send184;
Object smallint77;
Object constant102;
Object send185;
Object send186;
Object send187;
Object smallint78;
Object constant103;
Object send188;
Object send189;
Object send190;
Object send191;
Object send192;
Object send193;
Object send194;
Object method74;
Object symbol72;
Object methodclosure74;
Object method75;
Object symbol69;
Object methodclosure75;
Object smallint79;
Object constant104;
Object smallint80;
Object constant105;
Object send195;
Object method76;
Object symbol92;
Object methodclosure76;
Object localvariable31;
Object array30;
Object send196;
Object assign22;
Object send197;
Object smallint81;
Object constant106;
Object send198;
Object send199;
Object method77;
Object symbol89;
Object methodclosure77;
Object symbol113;
Object constant107;
Object send200;
Object method78;
Object symbol82;
Object methodclosure78;
Object character6;
Object constant108;
Object string16;
Object constant109;
Object send201;
Object method79;
Object symbol74;
Object methodclosure79;
Object smallint82;
Object constant110;
Object smallint83;
Object constant111;
Object send202;
Object method80;
Object symbol94;
Object methodclosure80;
Object localvariable32;
Object array31;
Object symbol114;
Object send203;
Object block9;
Object send204;
Object method81;
Object methodclosure81;
Object variable2;
Object array32;
Object smallint84;
Object constant112;
Object smallint85;
Object constant113;
Object send205;
Object smallint86;
Object constant114;
Object send206;
Object block10;
Object smallint87;
Object constant115;
Object send207;
Object block11;
Object send208;
Object block12;
Object send209;
Object method82;
Object symbol76;
Object methodclosure82;
Object symbol115;
Object constant116;
Object character7;
Object constant117;
Object send210;
Object method83;
Object symbol96;
Object methodclosure83;
Object smallint88;
Object constant118;
Object smallint89;
Object constant119;
Object send211;
Object method84;
Object symbol101;
Object methodclosure84;
Object localvariable33;
Object array33;
Object symbol77;
Object arraylayout2;
Object instancevariable14;
Object instancevariable15;
Object instancevariable16;
Object class19;
Object class20;
Object method85;
Object methodclosure85;
Object method86;
Object methodclosure86;
Object localvariable34;
Object array34;
Object assign23;
Object method87;
Object methodclosure87;
Object method88;
Object methodclosure88;
Object localvariable35;
Object array35;
Object assign24;
Object method89;
Object methodclosure89;
Object localvariable36;
Object array36;
Object assign25;
Object method90;
Object methodclosure90;
Object classreference10;
Object send212;
Object assign26;
Object localvariable37;
Object array37;
Object smallint90;
Object constant120;
Object send213;
Object smallint91;
Object constant121;
Object send214;
Object smallint92;
Object constant122;
Object send215;
Object block13;
Object send216;
Object send217;
Object smallint93;
Object constant123;
Object send218;
Object send219;
Object send220;
Object smallint94;
Object constant124;
Object send221;
Object send222;
Object send223;
Object smallint95;
Object constant125;
Object send224;
Object send225;
Object send226;
Object send227;
Object send228;
Object send229;
Object send230;
Object method91;
Object symbol78;
Object methodclosure91;
Object localvariable38;
Object localvariable39;
Object localvariable40;
Object array38;
Object send231;
Object send232;
Object method92;
Object symbol98;
Object methodclosure92;
Object send233;
Object method93;
Object symbol68;
Object methodclosure93;
Object method94;
Object symbol91;
Object methodclosure94;
Object localvariable41;
Object array39;
Object smallint96;
Object constant126;
Object send234;
Object assign27;
Object smallint97;
Object constant127;
Object smallint98;
Object constant128;
Object send235;
Object smallint99;
Object constant129;
Object smallint100;
Object constant130;
Object send236;
Object smallint101;
Object constant131;
Object send237;
Object smallint102;
Object constant132;
Object send238;
Object send239;
Object smallint103;
Object constant133;
Object send240;
Object smallint104;
Object constant134;
Object send241;
Object send242;
Object localvariable42;
Object array40;
Object smallint105;
Object constant135;
Object send243;
Object smallint106;
Object constant136;
Object send244;
Object smallint107;
Object constant137;
Object send245;
Object block14;
Object send246;
Object send247;
Object smallint108;
Object constant138;
Object send248;
Object send249;
Object send250;
Object smallint109;
Object constant139;
Object send251;
Object send252;
Object send253;
Object smallint110;
Object constant140;
Object send254;
Object send255;
Object send256;
Object send257;
Object send258;
Object smallint111;
Object constant141;
Object send259;
Object send260;
Object send261;
Object send262;
Object smallint112;
Object constant142;
Object send263;
Object send264;
Object method95;
Object symbol88;
Object methodclosure95;
Object method96;
Object symbol81;
Object methodclosure96;
Object localvariable43;
Object array41;
Object smallint113;
Object constant143;
Object send265;
Object method97;
Object symbol73;
Object methodclosure97;
Object smallint114;
Object constant144;
Object method98;
Object symbol93;
Object methodclosure98;
Object character8;
Object constant145;
Object method99;
Object symbol83;
Object methodclosure99;
Object smallint115;
Object constant146;
Object smallint116;
Object constant147;
Object send266;
Object method100;
Object symbol75;
Object methodclosure100;
Object localvariable44;
Object array42;
Object smallint117;
Object constant148;
Object assign28;
Object method101;
Object symbol95;
Object methodclosure101;
Object smallint118;
Object constant149;
Object smallint119;
Object constant150;
Object send267;
Object method102;
Object symbol85;
Object methodclosure102;
Object character9;
Object constant151;
Object character10;
Object constant152;
Object send268;
Object method103;
Object symbol100;
Object methodclosure103;
Object send269;
Object send270;
Object send271;
Object send272;
Object send273;
Object method104;
Object symbol97;
Object methodclosure104;
Object classreference11;
Object classreference12;


void create_ast() {
classreference7 = (Object)new_Organization_ClassReference((Type_Class)Type_Object_Class);
symbol110 = (Object)new_Type_Symbol_cached(L"SuperClassTestClass");
objectlayout4 = (Object)create_type_with_vars(Type_ObjectLayout, 1);
instancevariable9 = (Object)new_AST_InstVariable(0, L"a");
((Type_Array)objectlayout4)->values[0] = instancevariable9;
class11 = (Object)new_Class_withMeta((Object)Type_Object_Class, objectlayout4, empty_object_layout);
((Type_Class)class11)->name = (Type_Symbol)symbol110;
class12 = (Object)HEADER(class11);

// SuperClassTestClass>>test
smallint61 = (Object)new_Type_SmallInt(10);
constant79 = (Object)new_AST_Constant((Object)smallint61);
method53 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant79);
symbol111 = (Object)new_Type_Symbol_cached(L"test");
methodclosure53 = (Object)new_Runtime_MethodClosure(method53);
store_method((Type_Class)class11, (Type_Symbol)symbol111, (Runtime_MethodClosure)methodclosure53);

// SuperClassTestClass>>a:
localvariable23 = (Object)new_AST_Variable_named(L"anObject");
array22 = (Object)new_Type_Array_with(1, localvariable23);
assign15 = (Object)new_AST_Assign((Object)instancevariable9, (Object)localvariable23);
method54 = (Object)new_AST_Method_with((Type_Array)array22, (Type_Array)empty_Type_Array, 2, assign15, Self);
symbol106 = (Object)new_Type_Symbol_cached(L"a:");
methodclosure54 = (Object)new_Runtime_MethodClosure(method54);
store_method((Type_Class)class11, (Type_Symbol)symbol106, (Runtime_MethodClosure)methodclosure54);

// SuperClassTestClass>>a
method55 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable9);
symbol108 = (Object)new_Type_Symbol_cached(L"a");
methodclosure55 = (Object)new_Runtime_MethodClosure(method55);
store_method((Type_Class)class11, (Type_Symbol)symbol108, (Runtime_MethodClosure)methodclosure55);
symbol86 = (Object)new_Type_Symbol_cached(L"ChildClassTestClass");
objectlayout5 = (Object)create_type_with_vars(Type_ObjectLayout, 2);
((Type_Array)objectlayout5)->values[0] = instancevariable9;
instancevariable10 = (Object)new_AST_InstVariable(1, L"b");
((Type_Array)objectlayout5)->values[1] = instancevariable10;
class13 = (Object)new_Class_withMeta((Object)class11, objectlayout5, empty_object_layout);
((Type_Class)class13)->name = (Type_Symbol)symbol86;
class14 = (Object)HEADER(class13);

// ChildClassTestClass>>test
smallint62 = (Object)new_Type_SmallInt(10);
constant80 = (Object)new_AST_Constant((Object)smallint62);
super2 = (Object)new_AST_Super(symbol111, 0);
send154 = (Object)new_AST_Send((Object)constant80, (Object)SMB__times, 1, super2);
method56 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send154);
methodclosure56 = (Object)new_Runtime_MethodClosure(method56);
store_method((Type_Class)class13, (Type_Symbol)symbol111, (Runtime_MethodClosure)methodclosure56);

// ChildClassTestClass>>b
method57 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable10);
symbol105 = (Object)new_Type_Symbol_cached(L"b");
methodclosure57 = (Object)new_Runtime_MethodClosure(method57);
store_method((Type_Class)class13, (Type_Symbol)symbol105, (Runtime_MethodClosure)methodclosure57);

// ChildClassTestClass>>b:
localvariable24 = (Object)new_AST_Variable_named(L"anObject");
array23 = (Object)new_Type_Array_with(1, localvariable24);
assign16 = (Object)new_AST_Assign((Object)instancevariable10, (Object)localvariable24);
method58 = (Object)new_AST_Method_with((Type_Array)array23, (Type_Array)empty_Type_Array, 2, assign16, Self);
symbol109 = (Object)new_Type_Symbol_cached(L"b:");
methodclosure58 = (Object)new_Runtime_MethodClosure(method58);
store_method((Type_Class)class13, (Type_Symbol)symbol109, (Runtime_MethodClosure)methodclosure58);
classreference8 = (Object)new_Organization_ClassReference((Type_Class)class13);
symbol63 = (Object)new_Type_Symbol_cached(L"BridgeTest");
class15 = (Object)new_Class_withMeta((Object)Type_Object_Class, empty_object_layout, empty_object_layout);
((Type_Class)class15)->name = (Type_Symbol)symbol63;
class16 = (Object)HEADER(class15);

// BridgeTest>>tmStringEquals
string12 = (Object)new_Type_String(L"String");
constant81 = (Object)new_AST_Constant((Object)string12);
string13 = (Object)new_Type_String(L"String");
constant82 = (Object)new_AST_Constant((Object)string13);
send155 = (Object)new_AST_Send((Object)constant81, (Object)SMB__equal, 1, constant82);
method59 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send155);
symbol70 = (Object)new_Type_Symbol_cached(L"tmStringEquals");
methodclosure59 = (Object)new_Runtime_MethodClosure(method59);
store_method((Type_Class)class15, (Type_Symbol)symbol70, (Runtime_MethodClosure)methodclosure59);

// BridgeTest>>tmBooleanEquals
send156 = (Object)new_AST_Send((Object)True_Const, (Object)SMB__equal, 1, True_Const);
method60 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send156);
symbol67 = (Object)new_Type_Symbol_cached(L"tmBooleanEquals");
methodclosure60 = (Object)new_Runtime_MethodClosure(method60);
store_method((Type_Class)class15, (Type_Symbol)symbol67, (Runtime_MethodClosure)methodclosure60);

// BridgeTest>>tmSimpleReturn
smallint63 = (Object)new_Type_SmallInt(1);
constant83 = (Object)new_AST_Constant((Object)smallint63);
method61 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant83);
symbol90 = (Object)new_Type_Symbol_cached(L"tmSimpleReturn");
methodclosure61 = (Object)new_Runtime_MethodClosure(method61);
store_method((Type_Class)class15, (Type_Symbol)symbol90, (Runtime_MethodClosure)methodclosure61);

// BridgeTest>>tmSuperClass
localvariable25 = (Object)new_AST_Variable_named(L"instance");
array24 = (Object)new_Type_Array_with(1, localvariable25);
send157 = (Object)new_AST_Send((Object)classreference8, (Object)SMB_basicNew, 0);
assign17 = (Object)new_AST_Assign((Object)localvariable25, (Object)send157);
smallint64 = (Object)new_Type_SmallInt(1);
constant84 = (Object)new_AST_Constant((Object)smallint64);
send158 = (Object)new_AST_Send((Object)localvariable25, (Object)symbol106, 1, constant84);
symbol84 = (Object)new_Type_Symbol_cached(L"assert:");
send159 = (Object)new_AST_Send((Object)localvariable25, (Object)symbol108, 0);
smallint65 = (Object)new_Type_SmallInt(1);
constant85 = (Object)new_AST_Constant((Object)smallint65);
send160 = (Object)new_AST_Send((Object)send159, (Object)SMB__equal, 1, constant85);
send161 = (Object)new_AST_Send((Object)Self, (Object)symbol84, 1, send160);
send162 = (Object)new_AST_Send((Object)localvariable25, (Object)symbol105, 0);
send163 = (Object)new_AST_Send((Object)send162, (Object)SMB__equal, 1, Nil_Const);
send164 = (Object)new_AST_Send((Object)Self, (Object)symbol84, 1, send163);
smallint66 = (Object)new_Type_SmallInt(2);
constant86 = (Object)new_AST_Constant((Object)smallint66);
send165 = (Object)new_AST_Send((Object)localvariable25, (Object)symbol109, 1, constant86);
send166 = (Object)new_AST_Send((Object)localvariable25, (Object)symbol108, 0);
smallint67 = (Object)new_Type_SmallInt(1);
constant87 = (Object)new_AST_Constant((Object)smallint67);
send167 = (Object)new_AST_Send((Object)send166, (Object)SMB__equal, 1, constant87);
send168 = (Object)new_AST_Send((Object)Self, (Object)symbol84, 1, send167);
send169 = (Object)new_AST_Send((Object)localvariable25, (Object)symbol105, 0);
smallint68 = (Object)new_Type_SmallInt(2);
constant88 = (Object)new_AST_Constant((Object)smallint68);
send170 = (Object)new_AST_Send((Object)send169, (Object)SMB__equal, 1, constant88);
send171 = (Object)new_AST_Send((Object)Self, (Object)symbol84, 1, send170);
method62 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array24, 8, assign17, send158, send161, send164, send165, send168, send171, Self);
symbol87 = (Object)new_Type_Symbol_cached(L"tmSuperClass");
methodclosure62 = (Object)new_Runtime_MethodClosure(method62);
store_method((Type_Class)class15, (Type_Symbol)symbol87, (Runtime_MethodClosure)methodclosure62);

// BridgeTest>>tmString
string14 = (Object)new_Type_String(L"String");
constant89 = (Object)new_AST_Constant((Object)string14);
method63 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant89);
symbol79 = (Object)new_Type_Symbol_cached(L"tmString");
methodclosure63 = (Object)new_Runtime_MethodClosure(method63);
store_method((Type_Class)class15, (Type_Symbol)symbol79, (Runtime_MethodClosure)methodclosure63);

// BridgeTest>>tmSymbolEquals
symbol112 = (Object)new_Type_Symbol_cached(L"Symbol");
constant90 = (Object)new_AST_Constant((Object)symbol112);
constant91 = (Object)new_AST_Constant((Object)symbol112);
send172 = (Object)new_AST_Send((Object)constant90, (Object)SMB__equal, 1, constant91);
method64 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send172);
symbol102 = (Object)new_Type_Symbol_cached(L"tmSymbolEquals");
methodclosure64 = (Object)new_Runtime_MethodClosure(method64);
store_method((Type_Class)class15, (Type_Symbol)symbol102, (Runtime_MethodClosure)methodclosure64);

// BridgeTest>>tmSimpleBasicArithmetik
smallint69 = (Object)new_Type_SmallInt(1);
constant92 = (Object)new_AST_Constant((Object)smallint69);
smallint70 = (Object)new_Type_SmallInt(2);
constant93 = (Object)new_AST_Constant((Object)smallint70);
send173 = (Object)new_AST_Send((Object)constant92, (Object)SMB__plus, 1, constant93);
smallint71 = (Object)new_Type_SmallInt(2);
constant94 = (Object)new_AST_Constant((Object)smallint71);
send174 = (Object)new_AST_Send((Object)send173, (Object)SMB__plus, 1, constant94);
smallint72 = (Object)new_Type_SmallInt(5);
constant95 = (Object)new_AST_Constant((Object)smallint72);
send175 = (Object)new_AST_Send((Object)send174, (Object)SMB__times, 1, constant95);
method65 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send175);
symbol99 = (Object)new_Type_Symbol_cached(L"tmSimpleBasicArithmetik");
methodclosure65 = (Object)new_Runtime_MethodClosure(method65);
store_method((Type_Class)class15, (Type_Symbol)symbol99, (Runtime_MethodClosure)methodclosure65);

// BridgeTest>>tmSymbol
constant96 = (Object)new_AST_Constant((Object)symbol112);
method66 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant96);
symbol80 = (Object)new_Type_Symbol_cached(L"tmSymbol");
methodclosure66 = (Object)new_Runtime_MethodClosure(method66);
store_method((Type_Class)class15, (Type_Symbol)symbol80, (Runtime_MethodClosure)methodclosure66);

// BridgeTest>>tmSimpleInstanceCreation
localvariable26 = (Object)new_AST_Variable_named(L"instance");
array25 = (Object)new_Type_Array_with(1, localvariable26);
symbol71 = (Object)new_Type_Symbol_cached(L"StandardTestClass");
objectlayout6 = (Object)create_type_with_vars(Type_ObjectLayout, 3);
instancevariable11 = (Object)new_AST_InstVariable(0, L"a");
((Type_Array)objectlayout6)->values[0] = instancevariable11;
instancevariable12 = (Object)new_AST_InstVariable(1, L"b");
((Type_Array)objectlayout6)->values[1] = instancevariable12;
instancevariable13 = (Object)new_AST_InstVariable(2, L"c");
((Type_Array)objectlayout6)->values[2] = instancevariable13;
class17 = (Object)new_Class_withMeta((Object)Type_Object_Class, objectlayout6, empty_object_layout);
((Type_Class)class17)->name = (Type_Symbol)symbol71;
class18 = (Object)HEADER(class17);

// StandardTestClass class>>aClassSideMethod
string15 = (Object)new_Type_String(L"a");
constant97 = (Object)new_AST_Constant((Object)string15);
method67 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant97);
symbol103 = (Object)new_Type_Symbol_cached(L"aClassSideMethod");
methodclosure67 = (Object)new_Runtime_MethodClosure(method67);
store_method((Type_Class)class18, (Type_Symbol)symbol103, (Runtime_MethodClosure)methodclosure67);

// StandardTestClass>>b
method68 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable12);
methodclosure68 = (Object)new_Runtime_MethodClosure(method68);
store_method((Type_Class)class17, (Type_Symbol)symbol105, (Runtime_MethodClosure)methodclosure68);

// StandardTestClass>>c
method69 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable13);
symbol107 = (Object)new_Type_Symbol_cached(L"c");
methodclosure69 = (Object)new_Runtime_MethodClosure(method69);
store_method((Type_Class)class17, (Type_Symbol)symbol107, (Runtime_MethodClosure)methodclosure69);

// StandardTestClass>>b:
localvariable27 = (Object)new_AST_Variable_named(L"anObject");
array26 = (Object)new_Type_Array_with(1, localvariable27);
assign18 = (Object)new_AST_Assign((Object)instancevariable12, (Object)localvariable27);
method70 = (Object)new_AST_Method_with((Type_Array)array26, (Type_Array)empty_Type_Array, 2, assign18, Self);
methodclosure70 = (Object)new_Runtime_MethodClosure(method70);
store_method((Type_Class)class17, (Type_Symbol)symbol109, (Runtime_MethodClosure)methodclosure70);

// StandardTestClass>>a
method71 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable11);
methodclosure71 = (Object)new_Runtime_MethodClosure(method71);
store_method((Type_Class)class17, (Type_Symbol)symbol108, (Runtime_MethodClosure)methodclosure71);

// StandardTestClass>>c:
localvariable28 = (Object)new_AST_Variable_named(L"anObject");
array27 = (Object)new_Type_Array_with(1, localvariable28);
assign19 = (Object)new_AST_Assign((Object)instancevariable13, (Object)localvariable28);
method72 = (Object)new_AST_Method_with((Type_Array)array27, (Type_Array)empty_Type_Array, 2, assign19, Self);
symbol104 = (Object)new_Type_Symbol_cached(L"c:");
methodclosure72 = (Object)new_Runtime_MethodClosure(method72);
store_method((Type_Class)class17, (Type_Symbol)symbol104, (Runtime_MethodClosure)methodclosure72);

// StandardTestClass>>a:
localvariable29 = (Object)new_AST_Variable_named(L"anObject");
array28 = (Object)new_Type_Array_with(1, localvariable29);
assign20 = (Object)new_AST_Assign((Object)instancevariable11, (Object)localvariable29);
method73 = (Object)new_AST_Method_with((Type_Array)array28, (Type_Array)empty_Type_Array, 2, assign20, Self);
methodclosure73 = (Object)new_Runtime_MethodClosure(method73);
store_method((Type_Class)class17, (Type_Symbol)symbol106, (Runtime_MethodClosure)methodclosure73);
classreference9 = (Object)new_Organization_ClassReference((Type_Class)class17);
send176 = (Object)new_AST_Send((Object)classreference9, (Object)SMB_basicNew, 0);
assign21 = (Object)new_AST_Assign((Object)localvariable26, (Object)send176);
localvariable30 = (Object)new_AST_Variable_named(L"receiver");
array29 = (Object)new_Type_Array_with(1, localvariable30);
smallint73 = (Object)new_Type_SmallInt(1);
constant98 = (Object)new_AST_Constant((Object)smallint73);
send177 = (Object)new_AST_Send((Object)localvariable30, (Object)symbol106, 1, constant98);
smallint74 = (Object)new_Type_SmallInt(2);
constant99 = (Object)new_AST_Constant((Object)smallint74);
send178 = (Object)new_AST_Send((Object)localvariable30, (Object)symbol109, 1, constant99);
smallint75 = (Object)new_Type_SmallInt(3);
constant100 = (Object)new_AST_Constant((Object)smallint75);
send179 = (Object)new_AST_Send((Object)localvariable30, (Object)symbol104, 1, constant100);
block8 = (Object)new_AST_Block_with((Type_Array)array29, (Type_Array)empty_Type_Array, 1, 3, send177, send178, send179);
send180 = (Object)new_AST_Send((Object)block8, (Object)SMB_value_, 1, localvariable26);
send181 = (Object)new_AST_Send((Object)localvariable26, (Object)symbol108, 0);
smallint76 = (Object)new_Type_SmallInt(1);
constant101 = (Object)new_AST_Constant((Object)smallint76);
send182 = (Object)new_AST_Send((Object)send181, (Object)SMB__equal, 1, constant101);
send183 = (Object)new_AST_Send((Object)Self, (Object)symbol84, 1, send182);
send184 = (Object)new_AST_Send((Object)localvariable26, (Object)symbol105, 0);
smallint77 = (Object)new_Type_SmallInt(2);
constant102 = (Object)new_AST_Constant((Object)smallint77);
send185 = (Object)new_AST_Send((Object)send184, (Object)SMB__equal, 1, constant102);
send186 = (Object)new_AST_Send((Object)Self, (Object)symbol84, 1, send185);
send187 = (Object)new_AST_Send((Object)localvariable26, (Object)symbol107, 0);
smallint78 = (Object)new_Type_SmallInt(3);
constant103 = (Object)new_AST_Constant((Object)smallint78);
send188 = (Object)new_AST_Send((Object)send187, (Object)SMB__equal, 1, constant103);
send189 = (Object)new_AST_Send((Object)Self, (Object)symbol84, 1, send188);
send190 = (Object)new_AST_Send((Object)localvariable26, (Object)symbol108, 0);
send191 = (Object)new_AST_Send((Object)localvariable26, (Object)symbol105, 0);
send192 = (Object)new_AST_Send((Object)send190, (Object)SMB__plus, 1, send191);
send193 = (Object)new_AST_Send((Object)localvariable26, (Object)symbol107, 0);
send194 = (Object)new_AST_Send((Object)send192, (Object)SMB__plus, 1, send193);
method74 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array25, 6, assign21, send180, send183, send186, send189, send194);
symbol72 = (Object)new_Type_Symbol_cached(L"tmSimpleInstanceCreation");
methodclosure74 = (Object)new_Runtime_MethodClosure(method74);
store_method((Type_Class)class15, (Type_Symbol)symbol72, (Runtime_MethodClosure)methodclosure74);

// BridgeTest>>tmFibonacci
method75 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, Self);
symbol69 = (Object)new_Type_Symbol_cached(L"tmFibonacci");
methodclosure75 = (Object)new_Runtime_MethodClosure(method75);
store_method((Type_Class)class15, (Type_Symbol)symbol69, (Runtime_MethodClosure)methodclosure75);

// BridgeTest>>tmNumberSubtract
smallint79 = (Object)new_Type_SmallInt(2);
constant104 = (Object)new_AST_Constant((Object)smallint79);
smallint80 = (Object)new_Type_SmallInt(1);
constant105 = (Object)new_AST_Constant((Object)smallint80);
send195 = (Object)new_AST_Send((Object)constant104, (Object)SMB__minus, 1, constant105);
method76 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send195);
symbol92 = (Object)new_Type_Symbol_cached(L"tmNumberSubtract");
methodclosure76 = (Object)new_Runtime_MethodClosure(method76);
store_method((Type_Class)class15, (Type_Symbol)symbol92, (Runtime_MethodClosure)methodclosure76);

// BridgeTest>>tmSuperClassSuperSend
localvariable31 = (Object)new_AST_Variable_named(L"instance");
array30 = (Object)new_Type_Array_with(1, localvariable31);
send196 = (Object)new_AST_Send((Object)classreference8, (Object)SMB_basicNew, 0);
assign22 = (Object)new_AST_Assign((Object)localvariable31, (Object)send196);
send197 = (Object)new_AST_Send((Object)localvariable31, (Object)symbol111, 0);
smallint81 = (Object)new_Type_SmallInt(100);
constant106 = (Object)new_AST_Constant((Object)smallint81);
send198 = (Object)new_AST_Send((Object)send197, (Object)SMB__equal, 1, constant106);
send199 = (Object)new_AST_Send((Object)Self, (Object)symbol84, 1, send198);
method77 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array30, 2, assign22, send199);
symbol89 = (Object)new_Type_Symbol_cached(L"tmSuperClassSuperSend");
methodclosure77 = (Object)new_Runtime_MethodClosure(method77);
store_method((Type_Class)class15, (Type_Symbol)symbol89, (Runtime_MethodClosure)methodclosure77);

// BridgeTest>>tmBooleanSymbolEquals
symbol113 = (Object)new_Type_Symbol_cached(L"true");
constant107 = (Object)new_AST_Constant((Object)symbol113);
send200 = (Object)new_AST_Send((Object)True_Const, (Object)SMB__equal, 1, constant107);
method78 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send200);
symbol82 = (Object)new_Type_Symbol_cached(L"tmBooleanSymbolEquals");
methodclosure78 = (Object)new_Runtime_MethodClosure(method78);
store_method((Type_Class)class15, (Type_Symbol)symbol82, (Runtime_MethodClosure)methodclosure78);

// BridgeTest>>tmCharacterStringEquals
character6 = (Object)new_Type_Character(L'C');
constant108 = (Object)new_AST_Constant((Object)character6);
string16 = (Object)new_Type_String(L"C");
constant109 = (Object)new_AST_Constant((Object)string16);
send201 = (Object)new_AST_Send((Object)constant108, (Object)SMB__equal, 1, constant109);
method79 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send201);
symbol74 = (Object)new_Type_Symbol_cached(L"tmCharacterStringEquals");
methodclosure79 = (Object)new_Runtime_MethodClosure(method79);
store_method((Type_Class)class15, (Type_Symbol)symbol74, (Runtime_MethodClosure)methodclosure79);

// BridgeTest>>tmNumberAdd
smallint82 = (Object)new_Type_SmallInt(1);
constant110 = (Object)new_AST_Constant((Object)smallint82);
smallint83 = (Object)new_Type_SmallInt(1);
constant111 = (Object)new_AST_Constant((Object)smallint83);
send202 = (Object)new_AST_Send((Object)constant110, (Object)SMB__plus, 1, constant111);
method80 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send202);
symbol94 = (Object)new_Type_Symbol_cached(L"tmNumberAdd");
methodclosure80 = (Object)new_Runtime_MethodClosure(method80);
store_method((Type_Class)class15, (Type_Symbol)symbol94, (Runtime_MethodClosure)methodclosure80);

// BridgeTest>>assert:
localvariable32 = (Object)new_AST_Variable_named(L"bool");
array31 = (Object)new_Type_Array_with(1, localvariable32);
symbol114 = (Object)new_Type_Symbol_cached(L"fail");
send203 = (Object)new_AST_Send((Object)Self, (Object)symbol114, 0);
block9 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, 1, send203);
send204 = (Object)new_AST_Send((Object)localvariable32, (Object)SMB_ifFalse_, 1, block9);
method81 = (Object)new_AST_Method_with((Type_Array)array31, (Type_Array)empty_Type_Array, 1, send204);
methodclosure81 = (Object)new_Runtime_MethodClosure(method81);
store_method((Type_Class)class15, (Type_Symbol)symbol84, (Runtime_MethodClosure)methodclosure81);

// BridgeTest>>tmExtendedReturn
variable2 = (Object)new_AST_Variable_named(L"return");
array32 = (Object)new_Type_Array_with(1, variable2);
smallint84 = (Object)new_Type_SmallInt(1);
constant112 = (Object)new_AST_Constant((Object)smallint84);
smallint85 = (Object)new_Type_SmallInt(2);
constant113 = (Object)new_AST_Constant((Object)smallint85);
send205 = (Object)new_AST_Send((Object)constant112, (Object)SMB__gt, 1, constant113);
smallint86 = (Object)new_Type_SmallInt(1);
constant114 = (Object)new_AST_Constant((Object)smallint86);
send206 = (Object)new_AST_Send((Object)variable2, (Object)SMB_escape_, 1, constant114);
block10 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 2, 1, send206);
smallint87 = (Object)new_Type_SmallInt(2);
constant115 = (Object)new_AST_Constant((Object)smallint87);
send207 = (Object)new_AST_Send((Object)variable2, (Object)SMB_escape_, 1, constant115);
block11 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 2, 1, send207);
send208 = (Object)new_AST_Send((Object)send205, (Object)SMB_ifTrue_ifFalse_, 2, block10, block11);
block12 = (Object)new_AST_Block_with((Type_Array)array32, (Type_Array)empty_Type_Array, 1, 2, send208, Self);
send209 = (Object)new_AST_Send((Object)AST_Callec_Reference, (Object)SMB_on_, 1, block12);
method82 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send209);
symbol76 = (Object)new_Type_Symbol_cached(L"tmExtendedReturn");
methodclosure82 = (Object)new_Runtime_MethodClosure(method82);
store_method((Type_Class)class15, (Type_Symbol)symbol76, (Runtime_MethodClosure)methodclosure82);

// BridgeTest>>tmSymbolCharacterEquals
symbol115 = (Object)new_Type_Symbol_cached(L"S");
constant116 = (Object)new_AST_Constant((Object)symbol115);
character7 = (Object)new_Type_Character(L'S');
constant117 = (Object)new_AST_Constant((Object)character7);
send210 = (Object)new_AST_Send((Object)constant116, (Object)SMB__equal, 1, constant117);
method83 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send210);
symbol96 = (Object)new_Type_Symbol_cached(L"tmSymbolCharacterEquals");
methodclosure83 = (Object)new_Runtime_MethodClosure(method83);
store_method((Type_Class)class15, (Type_Symbol)symbol96, (Runtime_MethodClosure)methodclosure83);

// BridgeTest>>tmNumberMult
smallint88 = (Object)new_Type_SmallInt(2);
constant118 = (Object)new_AST_Constant((Object)smallint88);
smallint89 = (Object)new_Type_SmallInt(3);
constant119 = (Object)new_AST_Constant((Object)smallint89);
send211 = (Object)new_AST_Send((Object)constant118, (Object)SMB__times, 1, constant119);
method84 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send211);
symbol101 = (Object)new_Type_Symbol_cached(L"tmNumberMult");
methodclosure84 = (Object)new_Runtime_MethodClosure(method84);
store_method((Type_Class)class15, (Type_Symbol)symbol101, (Runtime_MethodClosure)methodclosure84);

// BridgeTest>>tmVariableInstanceCreation
localvariable33 = (Object)new_AST_Variable_named(L"instance");
array33 = (Object)new_Type_Array_with(1, localvariable33);
symbol77 = (Object)new_Type_Symbol_cached(L"StandardVariableTestClass");
arraylayout2 = (Object)create_type_with_vars(Type_ArrayLayout, 3);
instancevariable14 = (Object)new_AST_InstVariable(0, L"a");
((Type_Array)arraylayout2)->values[0] = instancevariable14;instancevariable15 = (Object)new_AST_InstVariable(1, L"b");
((Type_Array)arraylayout2)->values[1] = instancevariable15;instancevariable16 = (Object)new_AST_InstVariable(2, L"c");
((Type_Array)arraylayout2)->values[2] = instancevariable16;class19 = (Object)new_Class_withMeta((Object)Type_Object_Class, arraylayout2, empty_object_layout);
((Type_Class)class19)->name = (Type_Symbol)symbol77;
class20 = (Object)HEADER(class19);

// StandardVariableTestClass>>b
method85 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable15);
methodclosure85 = (Object)new_Runtime_MethodClosure(method85);
store_method((Type_Class)class19, (Type_Symbol)symbol105, (Runtime_MethodClosure)methodclosure85);

// StandardVariableTestClass>>c
method86 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable16);
methodclosure86 = (Object)new_Runtime_MethodClosure(method86);
store_method((Type_Class)class19, (Type_Symbol)symbol107, (Runtime_MethodClosure)methodclosure86);

// StandardVariableTestClass>>b:
localvariable34 = (Object)new_AST_Variable_named(L"anObject");
array34 = (Object)new_Type_Array_with(1, localvariable34);
assign23 = (Object)new_AST_Assign((Object)instancevariable15, (Object)localvariable34);
method87 = (Object)new_AST_Method_with((Type_Array)array34, (Type_Array)empty_Type_Array, 2, assign23, Self);
methodclosure87 = (Object)new_Runtime_MethodClosure(method87);
store_method((Type_Class)class19, (Type_Symbol)symbol109, (Runtime_MethodClosure)methodclosure87);

// StandardVariableTestClass>>a
method88 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable14);
methodclosure88 = (Object)new_Runtime_MethodClosure(method88);
store_method((Type_Class)class19, (Type_Symbol)symbol108, (Runtime_MethodClosure)methodclosure88);

// StandardVariableTestClass>>c:
localvariable35 = (Object)new_AST_Variable_named(L"anObject");
array35 = (Object)new_Type_Array_with(1, localvariable35);
assign24 = (Object)new_AST_Assign((Object)instancevariable16, (Object)localvariable35);
method89 = (Object)new_AST_Method_with((Type_Array)array35, (Type_Array)empty_Type_Array, 2, assign24, Self);
methodclosure89 = (Object)new_Runtime_MethodClosure(method89);
store_method((Type_Class)class19, (Type_Symbol)symbol104, (Runtime_MethodClosure)methodclosure89);

// StandardVariableTestClass>>a:
localvariable36 = (Object)new_AST_Variable_named(L"anObject");
array36 = (Object)new_Type_Array_with(1, localvariable36);
assign25 = (Object)new_AST_Assign((Object)instancevariable14, (Object)localvariable36);
method90 = (Object)new_AST_Method_with((Type_Array)array36, (Type_Array)empty_Type_Array, 2, assign25, Self);
methodclosure90 = (Object)new_Runtime_MethodClosure(method90);
store_method((Type_Class)class19, (Type_Symbol)symbol106, (Runtime_MethodClosure)methodclosure90);
classreference10 = (Object)new_Organization_ClassReference((Type_Class)class19);
send212 = (Object)new_AST_Send((Object)classreference10, (Object)SMB_basicNew, 0);
assign26 = (Object)new_AST_Assign((Object)localvariable33, (Object)send212);
localvariable37 = (Object)new_AST_Variable_named(L"receiver");
array37 = (Object)new_Type_Array_with(1, localvariable37);
smallint90 = (Object)new_Type_SmallInt(1);
constant120 = (Object)new_AST_Constant((Object)smallint90);
send213 = (Object)new_AST_Send((Object)localvariable37, (Object)symbol106, 1, constant120);
smallint91 = (Object)new_Type_SmallInt(2);
constant121 = (Object)new_AST_Constant((Object)smallint91);
send214 = (Object)new_AST_Send((Object)localvariable37, (Object)symbol109, 1, constant121);
smallint92 = (Object)new_Type_SmallInt(3);
constant122 = (Object)new_AST_Constant((Object)smallint92);
send215 = (Object)new_AST_Send((Object)localvariable37, (Object)symbol104, 1, constant122);
block13 = (Object)new_AST_Block_with((Type_Array)array37, (Type_Array)empty_Type_Array, 1, 3, send213, send214, send215);
send216 = (Object)new_AST_Send((Object)block13, (Object)SMB_value_, 1, localvariable33);
send217 = (Object)new_AST_Send((Object)localvariable33, (Object)symbol108, 0);
smallint93 = (Object)new_Type_SmallInt(1);
constant123 = (Object)new_AST_Constant((Object)smallint93);
send218 = (Object)new_AST_Send((Object)send217, (Object)SMB__equal, 1, constant123);
send219 = (Object)new_AST_Send((Object)Self, (Object)symbol84, 1, send218);
send220 = (Object)new_AST_Send((Object)localvariable33, (Object)symbol105, 0);
smallint94 = (Object)new_Type_SmallInt(2);
constant124 = (Object)new_AST_Constant((Object)smallint94);
send221 = (Object)new_AST_Send((Object)send220, (Object)SMB__equal, 1, constant124);
send222 = (Object)new_AST_Send((Object)Self, (Object)symbol84, 1, send221);
send223 = (Object)new_AST_Send((Object)localvariable33, (Object)symbol107, 0);
smallint95 = (Object)new_Type_SmallInt(3);
constant125 = (Object)new_AST_Constant((Object)smallint95);
send224 = (Object)new_AST_Send((Object)send223, (Object)SMB__equal, 1, constant125);
send225 = (Object)new_AST_Send((Object)Self, (Object)symbol84, 1, send224);
send226 = (Object)new_AST_Send((Object)localvariable33, (Object)symbol108, 0);
send227 = (Object)new_AST_Send((Object)localvariable33, (Object)symbol105, 0);
send228 = (Object)new_AST_Send((Object)send226, (Object)SMB__plus, 1, send227);
send229 = (Object)new_AST_Send((Object)localvariable33, (Object)symbol107, 0);
send230 = (Object)new_AST_Send((Object)send228, (Object)SMB__plus, 1, send229);
method91 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array33, 6, assign26, send216, send219, send222, send225, send230);
symbol78 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreation");
methodclosure91 = (Object)new_Runtime_MethodClosure(method91);
store_method((Type_Class)class15, (Type_Symbol)symbol78, (Runtime_MethodClosure)methodclosure91);

// BridgeTest>>tmMethodArguments:with:with:
localvariable38 = (Object)new_AST_Variable_named(L"arg1");
localvariable39 = (Object)new_AST_Variable_named(L"arg2");
localvariable40 = (Object)new_AST_Variable_named(L"arg3");
array38 = (Object)new_Type_Array_with(3, localvariable38, localvariable39, localvariable40);
send231 = (Object)new_AST_Send((Object)localvariable38, (Object)SMB__concat, 1, localvariable39);
send232 = (Object)new_AST_Send((Object)send231, (Object)SMB__concat, 1, localvariable40);
method92 = (Object)new_AST_Method_with((Type_Array)array38, (Type_Array)empty_Type_Array, 1, send232);
symbol98 = (Object)new_Type_Symbol_cached(L"tmMethodArguments:with:with:");
methodclosure92 = (Object)new_Runtime_MethodClosure(method92);
store_method((Type_Class)class15, (Type_Symbol)symbol98, (Runtime_MethodClosure)methodclosure92);

// BridgeTest>>tmClassReferenceReturn
send233 = (Object)new_AST_Send((Object)Metaclass_Reference, (Object)SMB_name, 0);
method93 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send233);
symbol68 = (Object)new_Type_Symbol_cached(L"tmClassReferenceReturn");
methodclosure93 = (Object)new_Runtime_MethodClosure(method93);
store_method((Type_Class)class15, (Type_Symbol)symbol68, (Runtime_MethodClosure)methodclosure93);

// BridgeTest>>tmBooleanFalse
method94 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, False_Const);
symbol91 = (Object)new_Type_Symbol_cached(L"tmBooleanFalse");
methodclosure94 = (Object)new_Runtime_MethodClosure(method94);
store_method((Type_Class)class15, (Type_Symbol)symbol91, (Runtime_MethodClosure)methodclosure94);

// BridgeTest>>tmVariableInstanceCreationSized
localvariable41 = (Object)new_AST_Variable_named(L"instance");
array39 = (Object)new_Type_Array_with(1, localvariable41);
smallint96 = (Object)new_Type_SmallInt(100);
constant126 = (Object)new_AST_Constant((Object)smallint96);
send234 = (Object)new_AST_Send((Object)classreference10, (Object)SMB_basicNew_, 1, constant126);
assign27 = (Object)new_AST_Assign((Object)localvariable41, (Object)send234);
smallint97 = (Object)new_Type_SmallInt(1);
constant127 = (Object)new_AST_Constant((Object)smallint97);
smallint98 = (Object)new_Type_SmallInt(1);
constant128 = (Object)new_AST_Constant((Object)smallint98);
send235 = (Object)new_AST_Send((Object)localvariable41, (Object)SMB_at_put_, 2, constant127, constant128);
smallint99 = (Object)new_Type_SmallInt(100);
constant129 = (Object)new_AST_Constant((Object)smallint99);
smallint100 = (Object)new_Type_SmallInt(100);
constant130 = (Object)new_AST_Constant((Object)smallint100);
send236 = (Object)new_AST_Send((Object)localvariable41, (Object)SMB_at_put_, 2, constant129, constant130);
smallint101 = (Object)new_Type_SmallInt(1);
constant131 = (Object)new_AST_Constant((Object)smallint101);
send237 = (Object)new_AST_Send((Object)localvariable41, (Object)SMB_at_, 1, constant131);
smallint102 = (Object)new_Type_SmallInt(1);
constant132 = (Object)new_AST_Constant((Object)smallint102);
send238 = (Object)new_AST_Send((Object)send237, (Object)SMB__equal, 1, constant132);
send239 = (Object)new_AST_Send((Object)Self, (Object)symbol84, 1, send238);
smallint103 = (Object)new_Type_SmallInt(100);
constant133 = (Object)new_AST_Constant((Object)smallint103);
send240 = (Object)new_AST_Send((Object)localvariable41, (Object)SMB_at_, 1, constant133);
smallint104 = (Object)new_Type_SmallInt(100);
constant134 = (Object)new_AST_Constant((Object)smallint104);
send241 = (Object)new_AST_Send((Object)send240, (Object)SMB__equal, 1, constant134);
send242 = (Object)new_AST_Send((Object)Self, (Object)symbol84, 1, send241);
localvariable42 = (Object)new_AST_Variable_named(L"receiver");
array40 = (Object)new_Type_Array_with(1, localvariable42);
smallint105 = (Object)new_Type_SmallInt(1);
constant135 = (Object)new_AST_Constant((Object)smallint105);
send243 = (Object)new_AST_Send((Object)localvariable42, (Object)symbol106, 1, constant135);
smallint106 = (Object)new_Type_SmallInt(2);
constant136 = (Object)new_AST_Constant((Object)smallint106);
send244 = (Object)new_AST_Send((Object)localvariable42, (Object)symbol109, 1, constant136);
smallint107 = (Object)new_Type_SmallInt(3);
constant137 = (Object)new_AST_Constant((Object)smallint107);
send245 = (Object)new_AST_Send((Object)localvariable42, (Object)symbol104, 1, constant137);
block14 = (Object)new_AST_Block_with((Type_Array)array40, (Type_Array)empty_Type_Array, 1, 3, send243, send244, send245);
send246 = (Object)new_AST_Send((Object)block14, (Object)SMB_value_, 1, localvariable41);
send247 = (Object)new_AST_Send((Object)localvariable41, (Object)symbol108, 0);
smallint108 = (Object)new_Type_SmallInt(1);
constant138 = (Object)new_AST_Constant((Object)smallint108);
send248 = (Object)new_AST_Send((Object)send247, (Object)SMB__equal, 1, constant138);
send249 = (Object)new_AST_Send((Object)Self, (Object)symbol84, 1, send248);
send250 = (Object)new_AST_Send((Object)localvariable41, (Object)symbol105, 0);
smallint109 = (Object)new_Type_SmallInt(2);
constant139 = (Object)new_AST_Constant((Object)smallint109);
send251 = (Object)new_AST_Send((Object)send250, (Object)SMB__equal, 1, constant139);
send252 = (Object)new_AST_Send((Object)Self, (Object)symbol84, 1, send251);
send253 = (Object)new_AST_Send((Object)localvariable41, (Object)symbol107, 0);
smallint110 = (Object)new_Type_SmallInt(3);
constant140 = (Object)new_AST_Constant((Object)smallint110);
send254 = (Object)new_AST_Send((Object)send253, (Object)SMB__equal, 1, constant140);
send255 = (Object)new_AST_Send((Object)Self, (Object)symbol84, 1, send254);
send256 = (Object)new_AST_Send((Object)localvariable41, (Object)symbol108, 0);
send257 = (Object)new_AST_Send((Object)localvariable41, (Object)symbol105, 0);
send258 = (Object)new_AST_Send((Object)localvariable41, (Object)symbol107, 0);
smallint111 = (Object)new_Type_SmallInt(1);
constant141 = (Object)new_AST_Constant((Object)smallint111);
send259 = (Object)new_AST_Send((Object)localvariable41, (Object)SMB_at_, 1, constant141);
send260 = (Object)new_AST_Send((Object)send258, (Object)SMB__plus, 1, send259);
send261 = (Object)new_AST_Send((Object)send257, (Object)SMB__plus, 1, send260);
send262 = (Object)new_AST_Send((Object)send256, (Object)SMB__plus, 1, send261);
smallint112 = (Object)new_Type_SmallInt(100);
constant142 = (Object)new_AST_Constant((Object)smallint112);
send263 = (Object)new_AST_Send((Object)localvariable41, (Object)SMB_at_, 1, constant142);
send264 = (Object)new_AST_Send((Object)send262, (Object)SMB__plus, 1, send263);
method95 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array39, 10, assign27, send235, send236, send239, send242, send246, send249, send252, send255, send264);
symbol88 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreationSized");
methodclosure95 = (Object)new_Runtime_MethodClosure(method95);
store_method((Type_Class)class15, (Type_Symbol)symbol88, (Runtime_MethodClosure)methodclosure95);

// BridgeTest>>tmBooleanTrue
method96 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, True_Const);
symbol81 = (Object)new_Type_Symbol_cached(L"tmBooleanTrue");
methodclosure96 = (Object)new_Runtime_MethodClosure(method96);
store_method((Type_Class)class15, (Type_Symbol)symbol81, (Runtime_MethodClosure)methodclosure96);

// BridgeTest>>tmMethodArgument:
localvariable43 = (Object)new_AST_Variable_named(L"arg");
array41 = (Object)new_Type_Array_with(1, localvariable43);
smallint113 = (Object)new_Type_SmallInt(1);
constant143 = (Object)new_AST_Constant((Object)smallint113);
send265 = (Object)new_AST_Send((Object)localvariable43, (Object)SMB__plus, 1, constant143);
method97 = (Object)new_AST_Method_with((Type_Array)array41, (Type_Array)empty_Type_Array, 1, send265);
symbol73 = (Object)new_Type_Symbol_cached(L"tmMethodArgument:");
methodclosure97 = (Object)new_Runtime_MethodClosure(method97);
store_method((Type_Class)class15, (Type_Symbol)symbol73, (Runtime_MethodClosure)methodclosure97);

// BridgeTest>>tmNumber
smallint114 = (Object)new_Type_SmallInt(1);
constant144 = (Object)new_AST_Constant((Object)smallint114);
method98 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant144);
symbol93 = (Object)new_Type_Symbol_cached(L"tmNumber");
methodclosure98 = (Object)new_Runtime_MethodClosure(method98);
store_method((Type_Class)class15, (Type_Symbol)symbol93, (Runtime_MethodClosure)methodclosure98);

// BridgeTest>>tmCharacter
character8 = (Object)new_Type_Character(L'C');
constant145 = (Object)new_AST_Constant((Object)character8);
method99 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant145);
symbol83 = (Object)new_Type_Symbol_cached(L"tmCharacter");
methodclosure99 = (Object)new_Runtime_MethodClosure(method99);
store_method((Type_Class)class15, (Type_Symbol)symbol83, (Runtime_MethodClosure)methodclosure99);

// BridgeTest>>tmNumberEquals
smallint115 = (Object)new_Type_SmallInt(1);
constant146 = (Object)new_AST_Constant((Object)smallint115);
smallint116 = (Object)new_Type_SmallInt(1);
constant147 = (Object)new_AST_Constant((Object)smallint116);
send266 = (Object)new_AST_Send((Object)constant146, (Object)SMB__equal, 1, constant147);
method100 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send266);
symbol75 = (Object)new_Type_Symbol_cached(L"tmNumberEquals");
methodclosure100 = (Object)new_Runtime_MethodClosure(method100);
store_method((Type_Class)class15, (Type_Symbol)symbol75, (Runtime_MethodClosure)methodclosure100);

// BridgeTest>>tmLocalVariable
localvariable44 = (Object)new_AST_Variable_named(L"a");
array42 = (Object)new_Type_Array_with(1, localvariable44);
smallint117 = (Object)new_Type_SmallInt(1);
constant148 = (Object)new_AST_Constant((Object)smallint117);
assign28 = (Object)new_AST_Assign((Object)localvariable44, (Object)constant148);
method101 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array42, 2, assign28, localvariable44);
symbol95 = (Object)new_Type_Symbol_cached(L"tmLocalVariable");
methodclosure101 = (Object)new_Runtime_MethodClosure(method101);
store_method((Type_Class)class15, (Type_Symbol)symbol95, (Runtime_MethodClosure)methodclosure101);

// BridgeTest>>tmNumberDiv
smallint118 = (Object)new_Type_SmallInt(4);
constant149 = (Object)new_AST_Constant((Object)smallint118);
smallint119 = (Object)new_Type_SmallInt(2);
constant150 = (Object)new_AST_Constant((Object)smallint119);
send267 = (Object)new_AST_Send((Object)constant149, (Object)SMB__divide, 1, constant150);
method102 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send267);
symbol85 = (Object)new_Type_Symbol_cached(L"tmNumberDiv");
methodclosure102 = (Object)new_Runtime_MethodClosure(method102);
store_method((Type_Class)class15, (Type_Symbol)symbol85, (Runtime_MethodClosure)methodclosure102);

// BridgeTest>>tmCharacterEquals
character9 = (Object)new_Type_Character(L'C');
constant151 = (Object)new_AST_Constant((Object)character9);
character10 = (Object)new_Type_Character(L'C');
constant152 = (Object)new_AST_Constant((Object)character10);
send268 = (Object)new_AST_Send((Object)constant151, (Object)SMB__equal, 1, constant152);
method103 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send268);
symbol100 = (Object)new_Type_Symbol_cached(L"tmCharacterEquals");
methodclosure103 = (Object)new_Runtime_MethodClosure(method103);
store_method((Type_Class)class15, (Type_Symbol)symbol100, (Runtime_MethodClosure)methodclosure103);

// BridgeTest>>tmClassSide
send269 = (Object)new_AST_Send((Object)classreference7, (Object)SMB_class, 0);
send270 = (Object)new_AST_Send((Object)send269, (Object)SMB_class, 0);
send271 = (Object)new_AST_Send((Object)send270, (Object)SMB__equal, 1, Metaclass_Reference);
send272 = (Object)new_AST_Send((Object)Self, (Object)symbol84, 1, send271);
send273 = (Object)new_AST_Send((Object)classreference9, (Object)symbol103, 0);
method104 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 2, send272, send273);
symbol97 = (Object)new_Type_Symbol_cached(L"tmClassSide");
methodclosure104 = (Object)new_Runtime_MethodClosure(method104);
store_method((Type_Class)class15, (Type_Symbol)symbol97, (Runtime_MethodClosure)methodclosure104);
classreference11 = (Object)new_Organization_ClassReference((Type_Class)class15);
classreference12 = (Object)new_Organization_ClassReference((Type_Class)class11);
}


/* ========================================================================= */

NEW_TEST(AutoGenTest_assert_)
/*
assert: bool
	<arg: true>
	^ bool ifFalse: [ self fail. ]
	
*/
Object send274 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol84, 1, True_Const);
Object result = (Object)Eval((Object)send274);
ASSERT_EMPTY_STACK
assert0(result == Nil);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmFibonacci)
/*
tmFibonacci
	
*/
Object send275 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol69, 0);
Object result = (Object)Eval((Object)send275);
ASSERT_EMPTY_STACK
assert0(result == ((AST_Constant)test_Class_Instance)->constant);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanEquals)
/*
tmBooleanEquals
	^ true = true
*/
Object send276 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol67, 0);
Object result = (Object)Eval((Object)send276);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanFalse)
/*
tmBooleanFalse
	^ false
*/
Object send277 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol91, 0);
Object result = (Object)Eval((Object)send277);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanSymbolEquals)
/*
tmBooleanSymbolEquals
	^ true = #true
*/
Object send278 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol82, 0);
Object result = (Object)Eval((Object)send278);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanTrue)
/*
tmBooleanTrue
	^ true
*/
Object send279 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol81, 0);
Object result = (Object)Eval((Object)send279);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacter)
/*
tmCharacter
	^ $C
*/
Object send280 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol83, 0);
Object result = (Object)Eval((Object)send280);
ASSERT_EMPTY_STACK
assert0(((Type_Character)result)->value == 'C');
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacterEquals)
/*
tmCharacterEquals
	^ $C = $C
*/
Object send281 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol100, 0);
Object result = (Object)Eval((Object)send281);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacterStringEquals)
/*
tmCharacterStringEquals
	^ $C = 'C'
*/
Object send282 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol74, 0);
Object result = (Object)Eval((Object)send282);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmClassReferenceReturn)
/*
tmClassReferenceReturn
	^ Metaclass name.
*/
Object send283 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol68, 0);
Object result = (Object)Eval((Object)send283);
ASSERT_EMPTY_STACK
Object symbol116 = (Object)new_Type_Symbol_cached(L"Metaclass");
result = Eval_Send1(result, SMB__equal, symbol116);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmExtendedReturn)
/*
tmExtendedReturn
	1 > 2 ifTrue: [ ^ 1 ]
		ifFalse: [ ^ 2].
*/
Object send284 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol76, 0);
Object result = (Object)Eval((Object)send284);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmLocalVariable)
/*
tmLocalVariable
	|a|
	a := 1.
	^ a
*/
Object send285 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol95, 0);
Object result = (Object)Eval((Object)send285);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArgument_)
/*
tmMethodArgument: arg 
	<arg1: 1>
	^ arg + 1
*/
Object smallint120 = (Object)new_Type_SmallInt(1);
Object constant153 = (Object)new_AST_Constant((Object)smallint120);
Object send286 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol73, 1, constant153);
Object result = (Object)Eval((Object)send286);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArguments_with_with_)
/*
tmMethodArguments: arg1 with: arg2 with: arg3 
	<arg1: 'asdf' arg2: 'asdf' arg3: 'df'>
	^ arg1 , arg2 , arg3
*/
Object string17 = (Object)new_Type_String(L"asdf");
Object constant154 = (Object)new_AST_Constant((Object)string17);
Object string18 = (Object)new_Type_String(L"asdf");
Object constant155 = (Object)new_AST_Constant((Object)string18);
Object string19 = (Object)new_Type_String(L"df");
Object constant156 = (Object)new_AST_Constant((Object)string19);
Object send287 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol98, 3, constant154, constant155, constant156);
Object result = (Object)Eval((Object)send287);
ASSERT_EMPTY_STACK
Object string20 = (Object)new_Type_String(L"asdfasdfdf");
result = Eval_Send1(result, SMB__equal, string20);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumber)
/*
tmNumber
	^ 1
*/
Object send288 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol93, 0);
Object result = (Object)Eval((Object)send288);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberAdd)
/*
tmNumberAdd
	^ 1 + 1
*/
Object send289 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol94, 0);
Object result = (Object)Eval((Object)send289);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberDiv)
/*
tmNumberDiv
	^ 4 / 2
*/
Object send290 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol85, 0);
Object result = (Object)Eval((Object)send290);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberEquals)
/*
tmNumberEquals
	^ 1 = 1
*/
Object send291 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol75, 0);
Object result = (Object)Eval((Object)send291);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberMult)
/*
tmNumberMult
	^ 2 * 3
*/
Object send292 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol101, 0);
Object result = (Object)Eval((Object)send292);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberSubtract)
/*
tmNumberSubtract
	^ 2 - 1
*/
Object send293 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol92, 0);
Object result = (Object)Eval((Object)send293);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleBasicArithmetik)
/*
tmSimpleBasicArithmetik
	^ ((1 + 2) + 2) * 5
*/
Object send294 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol99, 0);
Object result = (Object)Eval((Object)send294);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 25);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleReturn)
/*
tmSimpleReturn
	^ 1
*/
Object send295 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol90, 0);
Object result = (Object)Eval((Object)send295);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmString)
/*
tmString
	^ 'String'
*/
Object send296 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol79, 0);
Object result = (Object)Eval((Object)send296);
ASSERT_EMPTY_STACK
Object string21 = (Object)new_Type_String(L"String");
result = Eval_Send1(result, SMB__equal, string21);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmStringEquals)
/*
tmStringEquals
	^ 'String' = 'String'
*/
Object send297 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol70, 0);
Object result = (Object)Eval((Object)send297);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbol)
/*
tmSymbol
	^ #Symbol
*/
Object send298 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol80, 0);
Object result = (Object)Eval((Object)send298);
ASSERT_EMPTY_STACK
result = Eval_Send1(result, SMB__equal, symbol112);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbolCharacterEquals)
/*
tmSymbolCharacterEquals
	^ #S = $S
*/
Object send299 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol96, 0);
Object result = (Object)Eval((Object)send299);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbolEquals)
/*
tmSymbolEquals
	^ #Symbol = #Symbol
*/
Object send300 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol102, 0);
Object result = (Object)Eval((Object)send300);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmClassSide)
/*
tmClassSide
	self assert: (Object class class = Metaclass).
	^ StandardTestClass aClassSideMethod
*/
Object send301 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol97, 0);
Object result = (Object)Eval((Object)send301);
ASSERT_EMPTY_STACK
Object string22 = (Object)new_Type_String(L"a");
result = Eval_Send1(result, SMB__equal, string22);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleInstanceCreation)
/*
tmSimpleInstanceCreation
	| instance |
	instance := StandardTestClass basicNew.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	^ instance a + instance b  + instance c
	
*/
Object send302 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol72, 0);
Object result = (Object)Eval((Object)send302);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSuperClass)
/*
tmSuperClass
	| instance |
	instance := ChildClassTestClass basicNew.
	instance a: 1.
	self assert: instance a = 1.
	self assert: instance b = nil.
	instance b: 2.
	self assert: instance a = 1.
	self assert: instance b = 2.
*/
Object send303 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol87, 0);
Object result = (Object)Eval((Object)send303);
ASSERT_EMPTY_STACK
assert0(result == ((AST_Constant)test_Class_Instance)->constant);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSuperClassSuperSend)
/*
tmSuperClassSuperSend
	| instance |
	instance := ChildClassTestClass basicNew.
	^ self assert: instance test = 100
*/
Object send304 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol89, 0);
Object result = (Object)Eval((Object)send304);
ASSERT_EMPTY_STACK
assert0(result == Nil);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmVariableInstanceCreation)
/*
tmVariableInstanceCreation
	| instance |
	instance := StandardVariableTestClass basicNew.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	^ instance a + instance b  + instance c
	
*/
Object send305 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol78, 0);
Object result = (Object)Eval((Object)send305);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmVariableInstanceCreationSized)
/*
tmVariableInstanceCreationSized
	| instance |
	instance := StandardVariableTestClass basicNew: 100.
	instance at: 1 put: 1.
	instance at: 100 put: 100.
	self assert: (instance at: 1) = 1.
	"sample"
	self assert: (instance at: 100) = 100.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	
	^ instance a + instance b + instance c + (instance at: 1) + (instance at: 100)
	
*/
Object send306 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol88, 0);
Object result = (Object)Eval((Object)send306);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 107);
}

/* ========================================================================= */

TEST_SUITE(AutoGenTest,
{
    create_ast();
    Test_Class = (Type_Class)class15;
    test_Class_Instance = (Object)new_AST_Constant((Object)instantiate((Type_Class)Test_Class));

    RUN_TEST(AutoGenTest_tmSimpleReturn);
    RUN_TEST(AutoGenTest_tmNumberMult);
    RUN_TEST(AutoGenTest_tmString);
    RUN_TEST(AutoGenTest_tmSymbolCharacterEquals);
    RUN_TEST(AutoGenTest_tmMethodArgument_);
    RUN_TEST(AutoGenTest_tmNumberEquals);
    RUN_TEST(AutoGenTest_tmClassReferenceReturn);
    RUN_TEST(AutoGenTest_tmVariableInstanceCreation);
    RUN_TEST(AutoGenTest_tmNumberSubtract);
    RUN_TEST(AutoGenTest_tmFibonacci);
    RUN_TEST(AutoGenTest_tmBooleanEquals);
    RUN_TEST(AutoGenTest_tmMethodArguments_with_with_);
    RUN_TEST(AutoGenTest_tmNumberAdd);
    RUN_TEST(AutoGenTest_tmSimpleBasicArithmetik);
    RUN_TEST(AutoGenTest_tmStringEquals);
    RUN_TEST(AutoGenTest_assert_);
    RUN_TEST(AutoGenTest_tmNumberDiv);
    RUN_TEST(AutoGenTest_tmClassSide);
    RUN_TEST(AutoGenTest_tmExtendedReturn);
    RUN_TEST(AutoGenTest_tmSuperClassSuperSend);
    RUN_TEST(AutoGenTest_tmSymbol);
    RUN_TEST(AutoGenTest_tmNumber);
    RUN_TEST(AutoGenTest_tmBooleanFalse);
    RUN_TEST(AutoGenTest_tmSimpleInstanceCreation);
    RUN_TEST(AutoGenTest_tmLocalVariable);
    RUN_TEST(AutoGenTest_tmCharacterEquals);
    RUN_TEST(AutoGenTest_tmCharacter);
    RUN_TEST(AutoGenTest_tmBooleanTrue);
    RUN_TEST(AutoGenTest_tmCharacterStringEquals);
    RUN_TEST(AutoGenTest_tmSymbolEquals);
    RUN_TEST(AutoGenTest_tmSuperClass);
    RUN_TEST(AutoGenTest_tmVariableInstanceCreationSized);
    RUN_TEST(AutoGenTest_tmBooleanSymbolEquals);
})