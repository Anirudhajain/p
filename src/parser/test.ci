// Auto generated Tests from BridgeTest

// Test Object to put test methods in
Type_Class Test_Class;
Object test_Class_Instance;
// Test Method symbol
Type_Symbol SMB_runTestCase;
Object symbol11;
Object class171;
Object classreference171;
Object symbol9;
Object class172;
Object classreference172;
Object symbol20;
Object arraylayout35;
Object instancevariable205;
Object instancevariable206;
Object instancevariable207;
Object class173;
Object method1310;
Object symbol45;
Object methodclosure1301;
Object localvariable603;
Object array569;
Object assign344;
Object method1311;
Object symbol41;
Object methodclosure1302;
Object localvariable604;
Object array570;
Object assign345;
Object method1312;
Object symbol43;
Object methodclosure1303;
Object method1313;
Object symbol44;
Object methodclosure1304;
Object localvariable605;
Object array571;
Object assign346;
Object method1314;
Object symbol42;
Object methodclosure1305;
Object method1315;
Object symbol46;
Object methodclosure1306;
Object classreference173;
Object symbol27;
Object objectlayout86;
Object instancevariable208;
Object instancevariable209;
Object instancevariable210;
Object class174;
Object method1316;
Object methodclosure1307;
Object localvariable606;
Object array572;
Object assign347;
Object method1317;
Object methodclosure1308;
Object localvariable607;
Object array573;
Object assign348;
Object method1318;
Object methodclosure1309;
Object method1319;
Object methodclosure1310;
Object localvariable608;
Object array574;
Object assign349;
Object method1320;
Object methodclosure1311;
Object method1321;
Object methodclosure1312;
Object classreference174;
Object symbol5;
Object class175;
Object smallint1817;
Object constant2284;
Object smallint1818;
Object constant2285;
Object send4002;
Object method1322;
Object symbol19;
Object methodclosure1313;
Object smallint1819;
Object constant2286;
Object smallint1820;
Object constant2287;
Object send4003;
Object method1323;
Object symbol31;
Object methodclosure1314;
Object send4004;
Object method1324;
Object symbol39;
Object methodclosure1315;
Object localvariable609;
Object array575;
Object send4005;
Object assign350;
Object localvariable610;
Object array576;
Object smallint1821;
Object constant2288;
Object send4006;
Object smallint1822;
Object constant2289;
Object send4007;
Object smallint1823;
Object constant2290;
Object send4008;
Object block240;
Object send4009;
Object symbol49;
Object send4010;
Object smallint1824;
Object constant2291;
Object send4011;
Object send4012;
Object send4013;
Object smallint1825;
Object constant2292;
Object send4014;
Object send4015;
Object send4016;
Object smallint1826;
Object constant2293;
Object send4017;
Object send4018;
Object send4019;
Object send4020;
Object send4021;
Object send4022;
Object send4023;
Object method1325;
Object symbol28;
Object methodclosure1316;
Object smallint1827;
Object constant2294;
Object method1326;
Object symbol40;
Object methodclosure1317;
Object localvariable611;
Object array577;
Object smallint1828;
Object constant2295;
Object send4024;
Object assign351;
Object smallint1829;
Object constant2296;
Object smallint1830;
Object constant2297;
Object send4025;
Object smallint1831;
Object constant2298;
Object smallint1832;
Object constant2299;
Object send4026;
Object smallint1833;
Object constant2300;
Object send4027;
Object smallint1834;
Object constant2301;
Object send4028;
Object send4029;
Object smallint1835;
Object constant2302;
Object send4030;
Object smallint1836;
Object constant2303;
Object send4031;
Object send4032;
Object localvariable612;
Object array578;
Object smallint1837;
Object constant2304;
Object send4033;
Object smallint1838;
Object constant2305;
Object send4034;
Object smallint1839;
Object constant2306;
Object send4035;
Object block241;
Object send4036;
Object send4037;
Object smallint1840;
Object constant2307;
Object send4038;
Object send4039;
Object send4040;
Object smallint1841;
Object constant2308;
Object send4041;
Object send4042;
Object send4043;
Object smallint1842;
Object constant2309;
Object send4044;
Object send4045;
Object send4046;
Object send4047;
Object send4048;
Object smallint1843;
Object constant2310;
Object send4049;
Object send4050;
Object send4051;
Object send4052;
Object smallint1844;
Object constant2311;
Object send4053;
Object send4054;
Object method1327;
Object symbol32;
Object methodclosure1318;
Object localvariable613;
Object array579;
Object send4055;
Object assign352;
Object localvariable614;
Object array580;
Object smallint1845;
Object constant2312;
Object send4056;
Object smallint1846;
Object constant2313;
Object send4057;
Object smallint1847;
Object constant2314;
Object send4058;
Object block242;
Object send4059;
Object send4060;
Object smallint1848;
Object constant2315;
Object send4061;
Object send4062;
Object send4063;
Object smallint1849;
Object constant2316;
Object send4064;
Object send4065;
Object send4066;
Object smallint1850;
Object constant2317;
Object send4067;
Object send4068;
Object send4069;
Object send4070;
Object send4071;
Object send4072;
Object send4073;
Object method1328;
Object symbol21;
Object methodclosure1319;
Object symbol51;
Object constant2318;
Object constant2319;
Object send4074;
Object method1329;
Object symbol13;
Object methodclosure1320;
Object variable38;
Object array581;
Object smallint1851;
Object constant2320;
Object smallint1852;
Object constant2321;
Object send4075;
Object smallint1853;
Object constant2322;
Object send4076;
Object block243;
Object smallint1854;
Object constant2323;
Object send4077;
Object block244;
Object send4078;
Object block245;
Object send4079;
Object method1330;
Object symbol29;
Object methodclosure1321;
Object localvariable615;
Object array582;
Object symbol66;
Object send4080;
Object block246;
Object send4081;
Object method1331;
Object methodclosure1322;
Object smallint1855;
Object constant2324;
Object smallint1856;
Object constant2325;
Object send4082;
Object method1332;
Object symbol33;
Object methodclosure1323;
Object localvariable616;
Object array583;
Object smallint1857;
Object constant2326;
Object assign353;
Object method1333;
Object symbol22;
Object methodclosure1324;
Object method1334;
Object symbol14;
Object methodclosure1325;
Object smallint1858;
Object constant2327;
Object smallint1859;
Object constant2328;
Object send4083;
Object method1335;
Object symbol34;
Object methodclosure1326;
Object send4084;
Object method1336;
Object symbol23;
Object methodclosure1327;
Object character127;
Object constant2329;
Object method1337;
Object symbol15;
Object methodclosure1328;
Object method1338;
Object symbol35;
Object methodclosure1329;
Object string301;
Object constant2330;
Object string302;
Object constant2331;
Object send4085;
Object method1339;
Object symbol24;
Object methodclosure1330;
Object method1340;
Object symbol16;
Object methodclosure1331;
Object localvariable617;
Object localvariable618;
Object localvariable619;
Object array584;
Object send4086;
Object send4087;
Object method1341;
Object symbol36;
Object methodclosure1332;
Object localvariable620;
Object array585;
Object smallint1860;
Object constant2332;
Object send4088;
Object method1342;
Object symbol25;
Object methodclosure1333;
Object smallint1861;
Object constant2333;
Object smallint1862;
Object constant2334;
Object send4089;
Object smallint1863;
Object constant2335;
Object send4090;
Object smallint1864;
Object constant2336;
Object send4091;
Object method1343;
Object symbol17;
Object methodclosure1334;
Object smallint1865;
Object constant2337;
Object method1344;
Object symbol37;
Object methodclosure1335;
Object string303;
Object constant2338;
Object method1345;
Object symbol26;
Object methodclosure1336;
Object character128;
Object constant2339;
Object character129;
Object constant2340;
Object send4092;
Object method1346;
Object symbol18;
Object methodclosure1337;
Object smallint1866;
Object constant2341;
Object smallint1867;
Object constant2342;
Object send4093;
Object method1347;
Object symbol30;
Object methodclosure1338;
Object constant2343;
Object method1348;
Object symbol38;
Object methodclosure1339;
Object classreference175;


void create_ast() {
symbol11 = (Object)new_Type_Symbol_cached(L"ProtoObject");
class171 = (Object)new_Class(Nil, empty_object_layout);
((Type_Class)class171)->name = (Type_Symbol)symbol11;
classreference171 = (Object)new_Organization_ClassReference((Type_Class)class171);
symbol9 = (Object)new_Type_Symbol_cached(L"Object");
class172 = (Object)new_Class(class171, empty_object_layout);
((Type_Class)class172)->name = (Type_Symbol)symbol9;
classreference172 = (Object)new_Organization_ClassReference((Type_Class)class172);
symbol20 = (Object)new_Type_Symbol_cached(L"StandardVariableTestClass");
arraylayout35 = (Object)create_type_with_vars(Type_ArrayLayout, 3);
instancevariable205 = (Object)new_AST_InstVariable(0, L"a");
((Type_Array)arraylayout35)->values[0] = instancevariable205;instancevariable206 = (Object)new_AST_InstVariable(1, L"b");
((Type_Array)arraylayout35)->values[1] = instancevariable206;instancevariable207 = (Object)new_AST_InstVariable(2, L"c");
((Type_Array)arraylayout35)->values[2] = instancevariable207;class173 =
(Object)new_Class(Type_Object_Class, arraylayout35);
((Type_Class)class173)->name = (Type_Symbol)symbol20;

// StandardVariableTestClass>>c
method1310 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable207);
symbol45 = (Object)new_Type_Symbol_cached(L"c");
methodclosure1301 = (Object)new_Runtime_MethodClosure(method1310);
store_method((Type_Class)class173, (Type_Symbol)symbol45, (Runtime_MethodClosure)methodclosure1301);

// StandardVariableTestClass>>c:
localvariable603 = (Object)new_AST_Variable_named(L"anObject");
array569 = (Object)new_Type_Array_with(1, localvariable603);
assign344 = (Object)new_AST_Assign((Object)instancevariable207, (Object)localvariable603);
method1311 = (Object)new_AST_Method_with((Type_Array)array569, (Type_Array)empty_Type_Array, 2, assign344, Self);
symbol41 = (Object)new_Type_Symbol_cached(L"c:");
methodclosure1302 = (Object)new_Runtime_MethodClosure(method1311);
store_method((Type_Class)class173, (Type_Symbol)symbol41, (Runtime_MethodClosure)methodclosure1302);

// StandardVariableTestClass>>a:
localvariable604 = (Object)new_AST_Variable_named(L"anObject");
array570 = (Object)new_Type_Array_with(1, localvariable604);
assign345 = (Object)new_AST_Assign((Object)instancevariable205, (Object)localvariable604);
method1312 = (Object)new_AST_Method_with((Type_Array)array570, (Type_Array)empty_Type_Array, 2, assign345, Self);
symbol43 = (Object)new_Type_Symbol_cached(L"a:");
methodclosure1303 = (Object)new_Runtime_MethodClosure(method1312);
store_method((Type_Class)class173, (Type_Symbol)symbol43, (Runtime_MethodClosure)methodclosure1303);

// StandardVariableTestClass>>b
method1313 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable206);
symbol44 = (Object)new_Type_Symbol_cached(L"b");
methodclosure1304 = (Object)new_Runtime_MethodClosure(method1313);
store_method((Type_Class)class173, (Type_Symbol)symbol44, (Runtime_MethodClosure)methodclosure1304);

// StandardVariableTestClass>>b:
localvariable605 = (Object)new_AST_Variable_named(L"anObject");
array571 = (Object)new_Type_Array_with(1, localvariable605);
assign346 = (Object)new_AST_Assign((Object)instancevariable206, (Object)localvariable605);
method1314 = (Object)new_AST_Method_with((Type_Array)array571, (Type_Array)empty_Type_Array, 2, assign346, Self);
symbol42 = (Object)new_Type_Symbol_cached(L"b:");
methodclosure1305 = (Object)new_Runtime_MethodClosure(method1314);
store_method((Type_Class)class173, (Type_Symbol)symbol42, (Runtime_MethodClosure)methodclosure1305);

// StandardVariableTestClass>>a
method1315 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable205);
symbol46 = (Object)new_Type_Symbol_cached(L"a");
methodclosure1306 = (Object)new_Runtime_MethodClosure(method1315);
store_method((Type_Class)class173, (Type_Symbol)symbol46, (Runtime_MethodClosure)methodclosure1306);
classreference173 = (Object)new_Organization_ClassReference((Type_Class)class173);
symbol27 = (Object)new_Type_Symbol_cached(L"StandardTestClass");
objectlayout86 = (Object)create_type_with_vars(Type_ObjectLayout, 3);
instancevariable208 = (Object)new_AST_InstVariable(0, L"a");
((Type_Array)objectlayout86)->values[0] = instancevariable208;
instancevariable209 = (Object)new_AST_InstVariable(1, L"b");
((Type_Array)objectlayout86)->values[1] = instancevariable209;
instancevariable210 = (Object)new_AST_InstVariable(2, L"c");
((Type_Array)objectlayout86)->values[2] = instancevariable210;
class174 = (Object)new_Class(Type_Object_Class, objectlayout86);
((Type_Class)class174)->name = (Type_Symbol)symbol27;

// StandardTestClass>>c
method1316 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable210);
methodclosure1307 = (Object)new_Runtime_MethodClosure(method1316);
store_method((Type_Class)class174, (Type_Symbol)symbol45, (Runtime_MethodClosure)methodclosure1307);

// StandardTestClass>>c:
localvariable606 = (Object)new_AST_Variable_named(L"anObject");
array572 = (Object)new_Type_Array_with(1, localvariable606);
assign347 = (Object)new_AST_Assign((Object)instancevariable210, (Object)localvariable606);
method1317 = (Object)new_AST_Method_with((Type_Array)array572, (Type_Array)empty_Type_Array, 2, assign347, Self);
methodclosure1308 = (Object)new_Runtime_MethodClosure(method1317);
store_method((Type_Class)class174, (Type_Symbol)symbol41, (Runtime_MethodClosure)methodclosure1308);

// StandardTestClass>>a:
localvariable607 = (Object)new_AST_Variable_named(L"anObject");
array573 = (Object)new_Type_Array_with(1, localvariable607);
assign348 = (Object)new_AST_Assign((Object)instancevariable208, (Object)localvariable607);
method1318 = (Object)new_AST_Method_with((Type_Array)array573, (Type_Array)empty_Type_Array, 2, assign348, Self);
methodclosure1309 = (Object)new_Runtime_MethodClosure(method1318);
store_method((Type_Class)class174, (Type_Symbol)symbol43, (Runtime_MethodClosure)methodclosure1309);

// StandardTestClass>>b
method1319 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable209);
methodclosure1310 = (Object)new_Runtime_MethodClosure(method1319);
store_method((Type_Class)class174, (Type_Symbol)symbol44, (Runtime_MethodClosure)methodclosure1310);

// StandardTestClass>>b:
localvariable608 = (Object)new_AST_Variable_named(L"anObject");
array574 = (Object)new_Type_Array_with(1, localvariable608);
assign349 = (Object)new_AST_Assign((Object)instancevariable209, (Object)localvariable608);
method1320 = (Object)new_AST_Method_with((Type_Array)array574, (Type_Array)empty_Type_Array, 2, assign349, Self);
methodclosure1311 = (Object)new_Runtime_MethodClosure(method1320);
store_method((Type_Class)class174, (Type_Symbol)symbol42, (Runtime_MethodClosure)methodclosure1311);

// StandardTestClass>>a
method1321 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable208);
methodclosure1312 = (Object)new_Runtime_MethodClosure(method1321);
store_method((Type_Class)class174, (Type_Symbol)symbol46, (Runtime_MethodClosure)methodclosure1312);
classreference174 = (Object)new_Organization_ClassReference((Type_Class)class174);
symbol5 = (Object)new_Type_Symbol_cached(L"BridgeTest");
class175 = (Object)new_Class(Type_Object_Class, empty_object_layout);
((Type_Class)class175)->name = (Type_Symbol)symbol5;

// BridgeTest>>tmNumberEquals
smallint1817 = (Object)new_Type_SmallInt(1);
constant2284 = (Object)new_AST_Constant((Object)smallint1817);
smallint1818 = (Object)new_Type_SmallInt(1);
constant2285 = (Object)new_AST_Constant((Object)smallint1818);
send4002 = (Object)new_AST_Send((Object)constant2284, (Object)SMB__equal, 1, constant2285);
method1322 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send4002);
symbol19 = (Object)new_Type_Symbol_cached(L"tmNumberEquals");
methodclosure1313 = (Object)new_Runtime_MethodClosure(method1322);
store_method((Type_Class)class175, (Type_Symbol)symbol19, (Runtime_MethodClosure)methodclosure1313);

// BridgeTest>>tmNumberMult
smallint1819 = (Object)new_Type_SmallInt(2);
constant2286 = (Object)new_AST_Constant((Object)smallint1819);
smallint1820 = (Object)new_Type_SmallInt(3);
constant2287 = (Object)new_AST_Constant((Object)smallint1820);
send4003 = (Object)new_AST_Send((Object)constant2286, (Object)SMB__times, 1, constant2287);
method1323 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send4003);
symbol31 = (Object)new_Type_Symbol_cached(L"tmNumberMult");
methodclosure1314 = (Object)new_Runtime_MethodClosure(method1323);
store_method((Type_Class)class175, (Type_Symbol)symbol31, (Runtime_MethodClosure)methodclosure1314);

// BridgeTest>>tmClassReferenceReturn
send4004 = (Object)new_AST_Send((Object)Metaclass_Reference, (Object)SMB_name, 0);
method1324 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send4004);
symbol39 = (Object)new_Type_Symbol_cached(L"tmClassReferenceReturn");
methodclosure1315 = (Object)new_Runtime_MethodClosure(method1324);
store_method((Type_Class)class175, (Type_Symbol)symbol39, (Runtime_MethodClosure)methodclosure1315);

// BridgeTest>>tmSimpleInstanceCreation
localvariable609 = (Object)new_AST_Variable_named(L"instance");
array575 = (Object)new_Type_Array_with(1, localvariable609);
send4005 = (Object)new_AST_Send((Object)classreference174, (Object)SMB_basicNew, 0);
assign350 = (Object)new_AST_Assign((Object)localvariable609, (Object)send4005);
localvariable610 = (Object)new_AST_Variable_named(L"receiver");
array576 = (Object)new_Type_Array_with(1, localvariable610);
smallint1821 = (Object)new_Type_SmallInt(1);
constant2288 = (Object)new_AST_Constant((Object)smallint1821);
send4006 = (Object)new_AST_Send((Object)localvariable610, (Object)symbol43, 1, constant2288);
smallint1822 = (Object)new_Type_SmallInt(2);
constant2289 = (Object)new_AST_Constant((Object)smallint1822);
send4007 = (Object)new_AST_Send((Object)localvariable610, (Object)symbol42, 1, constant2289);
smallint1823 = (Object)new_Type_SmallInt(3);
constant2290 = (Object)new_AST_Constant((Object)smallint1823);
send4008 = (Object)new_AST_Send((Object)localvariable610, (Object)symbol41, 1, constant2290);
block240 = (Object)new_AST_Block_with((Type_Array)array576, (Type_Array)empty_Type_Array, 1, 3, send4006, send4007, send4008);
send4009 = (Object)new_AST_Send((Object)block240, (Object)SMB_value_, 1, localvariable609);
symbol49 = (Object)new_Type_Symbol_cached(L"assert:");
send4010 = (Object)new_AST_Send((Object)localvariable609, (Object)symbol46, 0);
smallint1824 = (Object)new_Type_SmallInt(1);
constant2291 = (Object)new_AST_Constant((Object)smallint1824);
send4011 = (Object)new_AST_Send((Object)send4010, (Object)SMB__equal, 1, constant2291);
send4012 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send4011);
send4013 = (Object)new_AST_Send((Object)localvariable609, (Object)symbol44, 0);
smallint1825 = (Object)new_Type_SmallInt(2);
constant2292 = (Object)new_AST_Constant((Object)smallint1825);
send4014 = (Object)new_AST_Send((Object)send4013, (Object)SMB__equal, 1, constant2292);
send4015 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send4014);
send4016 = (Object)new_AST_Send((Object)localvariable609, (Object)symbol45, 0);
smallint1826 = (Object)new_Type_SmallInt(3);
constant2293 = (Object)new_AST_Constant((Object)smallint1826);
send4017 = (Object)new_AST_Send((Object)send4016, (Object)SMB__equal, 1, constant2293);
send4018 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send4017);
send4019 = (Object)new_AST_Send((Object)localvariable609, (Object)symbol46, 0);
send4020 = (Object)new_AST_Send((Object)localvariable609, (Object)symbol44, 0);
send4021 = (Object)new_AST_Send((Object)send4019, (Object)SMB__plus, 1, send4020);
send4022 = (Object)new_AST_Send((Object)localvariable609, (Object)symbol45, 0);
send4023 = (Object)new_AST_Send((Object)send4021, (Object)SMB__plus, 1, send4022);
method1325 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array575, 6, assign350, send4009, send4012, send4015, send4018, send4023);
symbol28 = (Object)new_Type_Symbol_cached(L"tmSimpleInstanceCreation");
methodclosure1316 = (Object)new_Runtime_MethodClosure(method1325);
store_method((Type_Class)class175, (Type_Symbol)symbol28, (Runtime_MethodClosure)methodclosure1316);

// BridgeTest>>tmNumber
smallint1827 = (Object)new_Type_SmallInt(1);
constant2294 = (Object)new_AST_Constant((Object)smallint1827);
method1326 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant2294);
symbol40 = (Object)new_Type_Symbol_cached(L"tmNumber");
methodclosure1317 = (Object)new_Runtime_MethodClosure(method1326);
store_method((Type_Class)class175, (Type_Symbol)symbol40, (Runtime_MethodClosure)methodclosure1317);

// BridgeTest>>tmVariableInstanceCreationSized
localvariable611 = (Object)new_AST_Variable_named(L"instance");
array577 = (Object)new_Type_Array_with(1, localvariable611);
smallint1828 = (Object)new_Type_SmallInt(100);
constant2295 = (Object)new_AST_Constant((Object)smallint1828);
send4024 = (Object)new_AST_Send((Object)classreference173, (Object)SMB_basicNew_, 1, constant2295);
assign351 = (Object)new_AST_Assign((Object)localvariable611, (Object)send4024);
smallint1829 = (Object)new_Type_SmallInt(1);
constant2296 = (Object)new_AST_Constant((Object)smallint1829);
smallint1830 = (Object)new_Type_SmallInt(1);
constant2297 = (Object)new_AST_Constant((Object)smallint1830);
send4025 = (Object)new_AST_Send((Object)localvariable611, (Object)SMB_at_put_, 2, constant2296, constant2297);
smallint1831 = (Object)new_Type_SmallInt(100);
constant2298 = (Object)new_AST_Constant((Object)smallint1831);
smallint1832 = (Object)new_Type_SmallInt(100);
constant2299 = (Object)new_AST_Constant((Object)smallint1832);
send4026 = (Object)new_AST_Send((Object)localvariable611, (Object)SMB_at_put_, 2, constant2298, constant2299);
smallint1833 = (Object)new_Type_SmallInt(1);
constant2300 = (Object)new_AST_Constant((Object)smallint1833);
send4027 = (Object)new_AST_Send((Object)localvariable611, (Object)SMB_at_, 1, constant2300);
smallint1834 = (Object)new_Type_SmallInt(1);
constant2301 = (Object)new_AST_Constant((Object)smallint1834);
send4028 = (Object)new_AST_Send((Object)send4027, (Object)SMB__equal, 1, constant2301);
send4029 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send4028);
smallint1835 = (Object)new_Type_SmallInt(100);
constant2302 = (Object)new_AST_Constant((Object)smallint1835);
send4030 = (Object)new_AST_Send((Object)localvariable611, (Object)SMB_at_, 1, constant2302);
smallint1836 = (Object)new_Type_SmallInt(100);
constant2303 = (Object)new_AST_Constant((Object)smallint1836);
send4031 = (Object)new_AST_Send((Object)send4030, (Object)SMB__equal, 1, constant2303);
send4032 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send4031);
localvariable612 = (Object)new_AST_Variable_named(L"receiver");
array578 = (Object)new_Type_Array_with(1, localvariable612);
smallint1837 = (Object)new_Type_SmallInt(1);
constant2304 = (Object)new_AST_Constant((Object)smallint1837);
send4033 = (Object)new_AST_Send((Object)localvariable612, (Object)symbol43, 1, constant2304);
smallint1838 = (Object)new_Type_SmallInt(2);
constant2305 = (Object)new_AST_Constant((Object)smallint1838);
send4034 = (Object)new_AST_Send((Object)localvariable612, (Object)symbol42, 1, constant2305);
smallint1839 = (Object)new_Type_SmallInt(3);
constant2306 = (Object)new_AST_Constant((Object)smallint1839);
send4035 = (Object)new_AST_Send((Object)localvariable612, (Object)symbol41, 1, constant2306);
block241 = (Object)new_AST_Block_with((Type_Array)array578, (Type_Array)empty_Type_Array, 1, 3, send4033, send4034, send4035);
send4036 = (Object)new_AST_Send((Object)block241, (Object)SMB_value_, 1, localvariable611);
send4037 = (Object)new_AST_Send((Object)localvariable611, (Object)symbol46, 0);
smallint1840 = (Object)new_Type_SmallInt(1);
constant2307 = (Object)new_AST_Constant((Object)smallint1840);
send4038 = (Object)new_AST_Send((Object)send4037, (Object)SMB__equal, 1, constant2307);
send4039 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send4038);
send4040 = (Object)new_AST_Send((Object)localvariable611, (Object)symbol44, 0);
smallint1841 = (Object)new_Type_SmallInt(2);
constant2308 = (Object)new_AST_Constant((Object)smallint1841);
send4041 = (Object)new_AST_Send((Object)send4040, (Object)SMB__equal, 1, constant2308);
send4042 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send4041);
send4043 = (Object)new_AST_Send((Object)localvariable611, (Object)symbol45, 0);
smallint1842 = (Object)new_Type_SmallInt(3);
constant2309 = (Object)new_AST_Constant((Object)smallint1842);
send4044 = (Object)new_AST_Send((Object)send4043, (Object)SMB__equal, 1, constant2309);
send4045 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send4044);
send4046 = (Object)new_AST_Send((Object)localvariable611, (Object)symbol46, 0);
send4047 = (Object)new_AST_Send((Object)localvariable611, (Object)symbol44, 0);
send4048 = (Object)new_AST_Send((Object)localvariable611, (Object)symbol45, 0);
smallint1843 = (Object)new_Type_SmallInt(1);
constant2310 = (Object)new_AST_Constant((Object)smallint1843);
send4049 = (Object)new_AST_Send((Object)localvariable611, (Object)SMB_at_, 1, constant2310);
send4050 = (Object)new_AST_Send((Object)send4048, (Object)SMB__plus, 1, send4049);
send4051 = (Object)new_AST_Send((Object)send4047, (Object)SMB__plus, 1, send4050);
send4052 = (Object)new_AST_Send((Object)send4046, (Object)SMB__plus, 1, send4051);
smallint1844 = (Object)new_Type_SmallInt(100);
constant2311 = (Object)new_AST_Constant((Object)smallint1844);
send4053 = (Object)new_AST_Send((Object)localvariable611, (Object)SMB_at_, 1, constant2311);
send4054 = (Object)new_AST_Send((Object)send4052, (Object)SMB__plus, 1, send4053);
method1327 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array577, 10, assign351, send4025, send4026, send4029, send4032, send4036, send4039, send4042, send4045, send4054);
symbol32 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreationSized");
methodclosure1318 = (Object)new_Runtime_MethodClosure(method1327);
store_method((Type_Class)class175, (Type_Symbol)symbol32, (Runtime_MethodClosure)methodclosure1318);

// BridgeTest>>tmVariableInstanceCreation
localvariable613 = (Object)new_AST_Variable_named(L"instance");
array579 = (Object)new_Type_Array_with(1, localvariable613);
send4055 = (Object)new_AST_Send((Object)classreference173, (Object)SMB_basicNew, 0);
assign352 = (Object)new_AST_Assign((Object)localvariable613, (Object)send4055);
localvariable614 = (Object)new_AST_Variable_named(L"receiver");
array580 = (Object)new_Type_Array_with(1, localvariable614);
smallint1845 = (Object)new_Type_SmallInt(1);
constant2312 = (Object)new_AST_Constant((Object)smallint1845);
send4056 = (Object)new_AST_Send((Object)localvariable614, (Object)symbol43, 1, constant2312);
smallint1846 = (Object)new_Type_SmallInt(2);
constant2313 = (Object)new_AST_Constant((Object)smallint1846);
send4057 = (Object)new_AST_Send((Object)localvariable614, (Object)symbol42, 1, constant2313);
smallint1847 = (Object)new_Type_SmallInt(3);
constant2314 = (Object)new_AST_Constant((Object)smallint1847);
send4058 = (Object)new_AST_Send((Object)localvariable614, (Object)symbol41, 1, constant2314);
block242 = (Object)new_AST_Block_with((Type_Array)array580, (Type_Array)empty_Type_Array, 1, 3, send4056, send4057, send4058);
send4059 = (Object)new_AST_Send((Object)block242, (Object)SMB_value_, 1, localvariable613);
send4060 = (Object)new_AST_Send((Object)localvariable613, (Object)symbol46, 0);
smallint1848 = (Object)new_Type_SmallInt(1);
constant2315 = (Object)new_AST_Constant((Object)smallint1848);
send4061 = (Object)new_AST_Send((Object)send4060, (Object)SMB__equal, 1, constant2315);
send4062 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send4061);
send4063 = (Object)new_AST_Send((Object)localvariable613, (Object)symbol44, 0);
smallint1849 = (Object)new_Type_SmallInt(2);
constant2316 = (Object)new_AST_Constant((Object)smallint1849);
send4064 = (Object)new_AST_Send((Object)send4063, (Object)SMB__equal, 1, constant2316);
send4065 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send4064);
send4066 = (Object)new_AST_Send((Object)localvariable613, (Object)symbol45, 0);
smallint1850 = (Object)new_Type_SmallInt(3);
constant2317 = (Object)new_AST_Constant((Object)smallint1850);
send4067 = (Object)new_AST_Send((Object)send4066, (Object)SMB__equal, 1, constant2317);
send4068 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send4067);
send4069 = (Object)new_AST_Send((Object)localvariable613, (Object)symbol46, 0);
send4070 = (Object)new_AST_Send((Object)localvariable613, (Object)symbol44, 0);
send4071 = (Object)new_AST_Send((Object)send4069, (Object)SMB__plus, 1, send4070);
send4072 = (Object)new_AST_Send((Object)localvariable613, (Object)symbol45, 0);
send4073 = (Object)new_AST_Send((Object)send4071, (Object)SMB__plus, 1, send4072);
method1328 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array579, 6, assign352, send4059, send4062, send4065, send4068, send4073);
symbol21 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreation");
methodclosure1319 = (Object)new_Runtime_MethodClosure(method1328);
store_method((Type_Class)class175, (Type_Symbol)symbol21, (Runtime_MethodClosure)methodclosure1319);

// BridgeTest>>tmSymbolEquals
symbol51 = (Object)new_Type_Symbol_cached(L"Symbol");
constant2318 = (Object)new_AST_Constant((Object)symbol51);
constant2319 = (Object)new_AST_Constant((Object)symbol51);
send4074 = (Object)new_AST_Send((Object)constant2318, (Object)SMB__equal, 1, constant2319);
method1329 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send4074);
symbol13 = (Object)new_Type_Symbol_cached(L"tmSymbolEquals");
methodclosure1320 = (Object)new_Runtime_MethodClosure(method1329);
store_method((Type_Class)class175, (Type_Symbol)symbol13, (Runtime_MethodClosure)methodclosure1320);

// BridgeTest>>tmExtendedReturn
variable38 = (Object)new_AST_Variable_named(L"return");
array581 = (Object)new_Type_Array_with(1, variable38);
smallint1851 = (Object)new_Type_SmallInt(1);
constant2320 = (Object)new_AST_Constant((Object)smallint1851);
smallint1852 = (Object)new_Type_SmallInt(2);
constant2321 = (Object)new_AST_Constant((Object)smallint1852);
send4075 = (Object)new_AST_Send((Object)constant2320, (Object)SMB__gt, 1, constant2321);
smallint1853 = (Object)new_Type_SmallInt(1);
constant2322 = (Object)new_AST_Constant((Object)smallint1853);
send4076 = (Object)new_AST_Send((Object)variable38, (Object)SMB_escape_, 1, constant2322);
block243 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 2, 1, send4076);
smallint1854 = (Object)new_Type_SmallInt(2);
constant2323 = (Object)new_AST_Constant((Object)smallint1854);
send4077 = (Object)new_AST_Send((Object)variable38, (Object)SMB_escape_, 1, constant2323);
block244 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 2, 1, send4077);
send4078 = (Object)new_AST_Send((Object)send4075, (Object)SMB_ifTrue_ifFalse_, 2, block243, block244);
block245 = (Object)new_AST_Block_with((Type_Array)array581, (Type_Array)empty_Type_Array, 1, 2, send4078, Self);
send4079 = (Object)new_AST_Send((Object)AST_Callec_Reference, (Object)SMB_on_, 1, block245);
method1330 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send4079);
symbol29 = (Object)new_Type_Symbol_cached(L"tmExtendedReturn");
methodclosure1321 = (Object)new_Runtime_MethodClosure(method1330);
store_method((Type_Class)class175, (Type_Symbol)symbol29, (Runtime_MethodClosure)methodclosure1321);

// BridgeTest>>assert:
localvariable615 = (Object)new_AST_Variable_named(L"bool");
array582 = (Object)new_Type_Array_with(1, localvariable615);
symbol66 = (Object)new_Type_Symbol_cached(L"fail");
send4080 = (Object)new_AST_Send((Object)Self, (Object)symbol66, 0);
block246 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, 1, send4080);
send4081 = (Object)new_AST_Send((Object)localvariable615, (Object)SMB_ifFalse_, 1, block246);
method1331 = (Object)new_AST_Method_with((Type_Array)array582, (Type_Array)empty_Type_Array, 1, send4081);
methodclosure1322 = (Object)new_Runtime_MethodClosure(method1331);
store_method((Type_Class)class175, (Type_Symbol)symbol49, (Runtime_MethodClosure)methodclosure1322);

// BridgeTest>>tmNumberAdd
smallint1855 = (Object)new_Type_SmallInt(1);
constant2324 = (Object)new_AST_Constant((Object)smallint1855);
smallint1856 = (Object)new_Type_SmallInt(1);
constant2325 = (Object)new_AST_Constant((Object)smallint1856);
send4082 = (Object)new_AST_Send((Object)constant2324, (Object)SMB__plus, 1, constant2325);
method1332 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send4082);
symbol33 = (Object)new_Type_Symbol_cached(L"tmNumberAdd");
methodclosure1323 = (Object)new_Runtime_MethodClosure(method1332);
store_method((Type_Class)class175, (Type_Symbol)symbol33, (Runtime_MethodClosure)methodclosure1323);

// BridgeTest>>tmLocalVariable
localvariable616 = (Object)new_AST_Variable_named(L"a");
array583 = (Object)new_Type_Array_with(1, localvariable616);
smallint1857 = (Object)new_Type_SmallInt(1);
constant2326 = (Object)new_AST_Constant((Object)smallint1857);
assign353 = (Object)new_AST_Assign((Object)localvariable616, (Object)constant2326);
method1333 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array583, 2, assign353, localvariable616);
symbol22 = (Object)new_Type_Symbol_cached(L"tmLocalVariable");
methodclosure1324 = (Object)new_Runtime_MethodClosure(method1333);
store_method((Type_Class)class175, (Type_Symbol)symbol22, (Runtime_MethodClosure)methodclosure1324);

// BridgeTest>>tmBooleanFalse
method1334 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, False_Const);
symbol14 = (Object)new_Type_Symbol_cached(L"tmBooleanFalse");
methodclosure1325 = (Object)new_Runtime_MethodClosure(method1334);
store_method((Type_Class)class175, (Type_Symbol)symbol14, (Runtime_MethodClosure)methodclosure1325);

// BridgeTest>>tmNumberSubtract
smallint1858 = (Object)new_Type_SmallInt(2);
constant2327 = (Object)new_AST_Constant((Object)smallint1858);
smallint1859 = (Object)new_Type_SmallInt(1);
constant2328 = (Object)new_AST_Constant((Object)smallint1859);
send4083 = (Object)new_AST_Send((Object)constant2327, (Object)SMB__minus, 1, constant2328);
method1335 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send4083);
symbol34 = (Object)new_Type_Symbol_cached(L"tmNumberSubtract");
methodclosure1326 = (Object)new_Runtime_MethodClosure(method1335);
store_method((Type_Class)class175, (Type_Symbol)symbol34, (Runtime_MethodClosure)methodclosure1326);

// BridgeTest>>tmBooleanEquals
send4084 = (Object)new_AST_Send((Object)True_Const, (Object)SMB__equal, 1, True_Const);
method1336 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send4084);
symbol23 = (Object)new_Type_Symbol_cached(L"tmBooleanEquals");
methodclosure1327 = (Object)new_Runtime_MethodClosure(method1336);
store_method((Type_Class)class175, (Type_Symbol)symbol23, (Runtime_MethodClosure)methodclosure1327);

// BridgeTest>>tmCharacter
character127 = (Object)new_Type_Character(L'C');
constant2329 = (Object)new_AST_Constant((Object)character127);
method1337 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant2329);
symbol15 = (Object)new_Type_Symbol_cached(L"tmCharacter");
methodclosure1328 = (Object)new_Runtime_MethodClosure(method1337);
store_method((Type_Class)class175, (Type_Symbol)symbol15, (Runtime_MethodClosure)methodclosure1328);

// BridgeTest>>tmBooleanTrue
method1338 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, True_Const);
symbol35 = (Object)new_Type_Symbol_cached(L"tmBooleanTrue");
methodclosure1329 = (Object)new_Runtime_MethodClosure(method1338);
store_method((Type_Class)class175, (Type_Symbol)symbol35, (Runtime_MethodClosure)methodclosure1329);

// BridgeTest>>tmStringEquals
string301 = (Object)new_Type_String(L"String");
constant2330 = (Object)new_AST_Constant((Object)string301);
string302 = (Object)new_Type_String(L"String");
constant2331 = (Object)new_AST_Constant((Object)string302);
send4085 = (Object)new_AST_Send((Object)constant2330, (Object)SMB__equal, 1, constant2331);
method1339 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send4085);
symbol24 = (Object)new_Type_Symbol_cached(L"tmStringEquals");
methodclosure1330 = (Object)new_Runtime_MethodClosure(method1339);
store_method((Type_Class)class175, (Type_Symbol)symbol24, (Runtime_MethodClosure)methodclosure1330);

// BridgeTest>>tmFibonacci
method1340 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, Self);
symbol16 = (Object)new_Type_Symbol_cached(L"tmFibonacci");
methodclosure1331 = (Object)new_Runtime_MethodClosure(method1340);
store_method((Type_Class)class175, (Type_Symbol)symbol16, (Runtime_MethodClosure)methodclosure1331);

// BridgeTest>>tmMethodArguments:with:with:
localvariable617 = (Object)new_AST_Variable_named(L"arg1");
localvariable618 = (Object)new_AST_Variable_named(L"arg2");
localvariable619 = (Object)new_AST_Variable_named(L"arg3");
array584 = (Object)new_Type_Array_with(3, localvariable617, localvariable618, localvariable619);
send4086 = (Object)new_AST_Send((Object)localvariable617, (Object)SMB__concat, 1, localvariable618);
send4087 = (Object)new_AST_Send((Object)send4086, (Object)SMB__concat, 1, localvariable619);
method1341 = (Object)new_AST_Method_with((Type_Array)array584, (Type_Array)empty_Type_Array, 1, send4087);
symbol36 = (Object)new_Type_Symbol_cached(L"tmMethodArguments:with:with:");
methodclosure1332 = (Object)new_Runtime_MethodClosure(method1341);
store_method((Type_Class)class175, (Type_Symbol)symbol36, (Runtime_MethodClosure)methodclosure1332);

// BridgeTest>>tmMethodArgument:
localvariable620 = (Object)new_AST_Variable_named(L"arg");
array585 = (Object)new_Type_Array_with(1, localvariable620);
smallint1860 = (Object)new_Type_SmallInt(1);
constant2332 = (Object)new_AST_Constant((Object)smallint1860);
send4088 = (Object)new_AST_Send((Object)localvariable620, (Object)SMB__plus, 1, constant2332);
method1342 = (Object)new_AST_Method_with((Type_Array)array585, (Type_Array)empty_Type_Array, 1, send4088);
symbol25 = (Object)new_Type_Symbol_cached(L"tmMethodArgument:");
methodclosure1333 = (Object)new_Runtime_MethodClosure(method1342);
store_method((Type_Class)class175, (Type_Symbol)symbol25, (Runtime_MethodClosure)methodclosure1333);

// BridgeTest>>tmSimpleBasicArithmetik
smallint1861 = (Object)new_Type_SmallInt(1);
constant2333 = (Object)new_AST_Constant((Object)smallint1861);
smallint1862 = (Object)new_Type_SmallInt(2);
constant2334 = (Object)new_AST_Constant((Object)smallint1862);
send4089 = (Object)new_AST_Send((Object)constant2333, (Object)SMB__plus, 1, constant2334);
smallint1863 = (Object)new_Type_SmallInt(2);
constant2335 = (Object)new_AST_Constant((Object)smallint1863);
send4090 = (Object)new_AST_Send((Object)send4089, (Object)SMB__plus, 1, constant2335);
smallint1864 = (Object)new_Type_SmallInt(5);
constant2336 = (Object)new_AST_Constant((Object)smallint1864);
send4091 = (Object)new_AST_Send((Object)send4090, (Object)SMB__times, 1, constant2336);
method1343 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send4091);
symbol17 = (Object)new_Type_Symbol_cached(L"tmSimpleBasicArithmetik");
methodclosure1334 = (Object)new_Runtime_MethodClosure(method1343);
store_method((Type_Class)class175, (Type_Symbol)symbol17, (Runtime_MethodClosure)methodclosure1334);

// BridgeTest>>tmSimpleReturn
smallint1865 = (Object)new_Type_SmallInt(1);
constant2337 = (Object)new_AST_Constant((Object)smallint1865);
method1344 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant2337);
symbol37 = (Object)new_Type_Symbol_cached(L"tmSimpleReturn");
methodclosure1335 = (Object)new_Runtime_MethodClosure(method1344);
store_method((Type_Class)class175, (Type_Symbol)symbol37, (Runtime_MethodClosure)methodclosure1335);

// BridgeTest>>tmString
string303 = (Object)new_Type_String(L"String");
constant2338 = (Object)new_AST_Constant((Object)string303);
method1345 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant2338);
symbol26 = (Object)new_Type_Symbol_cached(L"tmString");
methodclosure1336 = (Object)new_Runtime_MethodClosure(method1345);
store_method((Type_Class)class175, (Type_Symbol)symbol26, (Runtime_MethodClosure)methodclosure1336);

// BridgeTest>>tmCharacterEquals
character128 = (Object)new_Type_Character(L'C');
constant2339 = (Object)new_AST_Constant((Object)character128);
character129 = (Object)new_Type_Character(L'C');
constant2340 = (Object)new_AST_Constant((Object)character129);
send4092 = (Object)new_AST_Send((Object)constant2339, (Object)SMB__equal, 1, constant2340);
method1346 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send4092);
symbol18 = (Object)new_Type_Symbol_cached(L"tmCharacterEquals");
methodclosure1337 = (Object)new_Runtime_MethodClosure(method1346);
store_method((Type_Class)class175, (Type_Symbol)symbol18, (Runtime_MethodClosure)methodclosure1337);

// BridgeTest>>tmNumberDiv
smallint1866 = (Object)new_Type_SmallInt(4);
constant2341 = (Object)new_AST_Constant((Object)smallint1866);
smallint1867 = (Object)new_Type_SmallInt(2);
constant2342 = (Object)new_AST_Constant((Object)smallint1867);
send4093 = (Object)new_AST_Send((Object)constant2341, (Object)SMB__divide, 1, constant2342);
method1347 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send4093);
symbol30 = (Object)new_Type_Symbol_cached(L"tmNumberDiv");
methodclosure1338 = (Object)new_Runtime_MethodClosure(method1347);
store_method((Type_Class)class175, (Type_Symbol)symbol30, (Runtime_MethodClosure)methodclosure1338);

// BridgeTest>>tmSymbol
constant2343 = (Object)new_AST_Constant((Object)symbol51);
method1348 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant2343);
symbol38 = (Object)new_Type_Symbol_cached(L"tmSymbol");
methodclosure1339 = (Object)new_Runtime_MethodClosure(method1348);
store_method((Type_Class)class175, (Type_Symbol)symbol38, (Runtime_MethodClosure)methodclosure1339);
classreference175 = (Object)new_Organization_ClassReference((Type_Class)class175);
}


/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanEquals)
/*
tmBooleanEquals
	^ true = true
*/
Object symbol23 = (Object)new_Type_Symbol_cached(L"tmBooleanEquals");
Object send4094 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol23, 0);
Object result = (Object)Eval((Object)send4094);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanFalse)
/*
tmBooleanFalse
	^ false
*/
Object symbol14 = (Object)new_Type_Symbol_cached(L"tmBooleanFalse");
Object send4095 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol14, 0);
Object result = (Object)Eval((Object)send4095);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanTrue)
/*
tmBooleanTrue
	^ true
*/
Object symbol35 = (Object)new_Type_Symbol_cached(L"tmBooleanTrue");
Object send4096 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol35, 0);
Object result = (Object)Eval((Object)send4096);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacter)
/*
tmCharacter
	^ $C
*/
Object symbol15 = (Object)new_Type_Symbol_cached(L"tmCharacter");
Object send4097 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol15, 0);
Object result = (Object)Eval((Object)send4097);
ASSERT_EMPTY_STACK
assert0(((Type_Character)result)->value == 'C');
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacterEquals)
/*
tmCharacterEquals
	^ $C = $C
*/
Object symbol18 = (Object)new_Type_Symbol_cached(L"tmCharacterEquals");
Object send4098 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol18, 0);
Object result = (Object)Eval((Object)send4098);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmClassReferenceReturn)
/*
tmClassReferenceReturn
	^ Metaclass name.
*/
Object symbol39 = (Object)new_Type_Symbol_cached(L"tmClassReferenceReturn");
Object send4099 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol39, 0);
Object result = (Object)Eval((Object)send4099);
ASSERT_EMPTY_STACK
Object symbol52 = (Object)new_Type_Symbol_cached(L"Metaclass");
result = Eval_Send1(result, SMB__equal, symbol52);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmExtendedReturn)
/*
tmExtendedReturn
	1 > 2 ifTrue: [ ^ 1 ]
		ifFalse: [ ^ 2].
*/
Object symbol29 = (Object)new_Type_Symbol_cached(L"tmExtendedReturn");
Object send4100 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol29, 0);
Object result = (Object)Eval((Object)send4100);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmLocalVariable)
/*
tmLocalVariable
	|a|
	a := 1.
	^ a
*/
Object symbol22 = (Object)new_Type_Symbol_cached(L"tmLocalVariable");
Object send4101 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol22, 0);
Object result = (Object)Eval((Object)send4101);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArgument_)
/*
tmMethodArgument: arg 
	<arg1: 1>
	^ arg + 1
*/
Object symbol25 = (Object)new_Type_Symbol_cached(L"tmMethodArgument:");
Object smallint1868 = (Object)new_Type_SmallInt(1);
Object constant2344 = (Object)new_AST_Constant((Object)smallint1868);
Object send4102 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol25, 1, constant2344);
Object result = (Object)Eval((Object)send4102);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArguments_with_with_)
/*
tmMethodArguments: arg1 with: arg2 with: arg3 
	<arg1: 'asdf' arg2: 'asdf' arg3: 'df'>
	^ arg1 , arg2 , arg3
*/
Object symbol36 = (Object)new_Type_Symbol_cached(L"tmMethodArguments:with:with:");
Object string304 = (Object)new_Type_String(L"asdf");
Object constant2345 = (Object)new_AST_Constant((Object)string304);
Object string305 = (Object)new_Type_String(L"asdf");
Object constant2346 = (Object)new_AST_Constant((Object)string305);
Object string306 = (Object)new_Type_String(L"df");
Object constant2347 = (Object)new_AST_Constant((Object)string306);
Object send4103 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol36, 3, constant2345, constant2346, constant2347);
Object result = (Object)Eval((Object)send4103);
ASSERT_EMPTY_STACK
Object string307 = (Object)new_Type_String(L"asdfasdfdf");
result = Eval_Send1(result, SMB__equal, string307);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumber)
/*
tmNumber
	^ 1
*/
Object symbol40 = (Object)new_Type_Symbol_cached(L"tmNumber");
Object send4104 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol40, 0);
Object result = (Object)Eval((Object)send4104);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberAdd)
/*
tmNumberAdd
	^ 1 + 1
*/
Object symbol33 = (Object)new_Type_Symbol_cached(L"tmNumberAdd");
Object send4105 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol33, 0);
Object result = (Object)Eval((Object)send4105);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberDiv)
/*
tmNumberDiv
	^ 4 / 2
*/
Object symbol30 = (Object)new_Type_Symbol_cached(L"tmNumberDiv");
Object send4106 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol30, 0);
Object result = (Object)Eval((Object)send4106);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberEquals)
/*
tmNumberEquals
	^ 1 = 1
*/
Object symbol19 = (Object)new_Type_Symbol_cached(L"tmNumberEquals");
Object send4107 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol19, 0);
Object result = (Object)Eval((Object)send4107);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberMult)
/*
tmNumberMult
	^ 2 * 3
*/
Object symbol31 = (Object)new_Type_Symbol_cached(L"tmNumberMult");
Object send4108 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol31, 0);
Object result = (Object)Eval((Object)send4108);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberSubtract)
/*
tmNumberSubtract
	^ 2 - 1
*/
Object symbol34 = (Object)new_Type_Symbol_cached(L"tmNumberSubtract");
Object send4109 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol34, 0);
Object result = (Object)Eval((Object)send4109);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleBasicArithmetik)
/*
tmSimpleBasicArithmetik
	^ (1 + 2) + 2 * 5
*/
Object symbol17 = (Object)new_Type_Symbol_cached(L"tmSimpleBasicArithmetik");
Object send4110 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol17, 0);
Object result = (Object)Eval((Object)send4110);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 25);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleReturn)
/*
tmSimpleReturn
	^ 1
*/
Object symbol37 = (Object)new_Type_Symbol_cached(L"tmSimpleReturn");
Object send4111 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol37, 0);
Object result = (Object)Eval((Object)send4111);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmString)
/*
tmString
	^ 'String'
*/
Object symbol26 = (Object)new_Type_Symbol_cached(L"tmString");
Object send4112 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol26, 0);
Object result = (Object)Eval((Object)send4112);
ASSERT_EMPTY_STACK
Object string308 = (Object)new_Type_String(L"String");
result = Eval_Send1(result, SMB__equal, string308);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmStringEquals)
/*
tmStringEquals
	^ 'String' = 'String'
*/
Object symbol24 = (Object)new_Type_Symbol_cached(L"tmStringEquals");
Object send4113 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol24, 0);
Object result = (Object)Eval((Object)send4113);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbol)
/*
tmSymbol
	^ #Symbol
*/
Object symbol38 = (Object)new_Type_Symbol_cached(L"tmSymbol");
Object send4114 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol38, 0);
Object result = (Object)Eval((Object)send4114);
ASSERT_EMPTY_STACK
Object symbol51 = (Object)new_Type_Symbol_cached(L"Symbol");
result = Eval_Send1(result, SMB__equal, symbol51);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbolEquals)
/*
tmSymbolEquals
	^ #Symbol = #Symbol
*/
Object symbol13 = (Object)new_Type_Symbol_cached(L"tmSymbolEquals");
Object send4115 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol13, 0);
Object result = (Object)Eval((Object)send4115);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_assert_)
/*
assert: bool
	<arg: true>
	^ bool ifFalse: [ self fail. ]
	
*/
Object symbol49 = (Object)new_Type_Symbol_cached(L"assert:");
Object send4116 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol49, 1, True_Const);
Object result = (Object)Eval((Object)send4116);
ASSERT_EMPTY_STACK
assert0(result == Nil);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmFibonacci)
/*
tmFibonacci
	
*/
Object symbol16 = (Object)new_Type_Symbol_cached(L"tmFibonacci");
Object send4117 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol16, 0);
Object result = (Object)Eval((Object)send4117);
ASSERT_EMPTY_STACK
assert0(result == ((AST_Constant)test_Class_Instance)->constant);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleInstanceCreation)
/*
tmSimpleInstanceCreation
	| instance |
	instance := StandardTestClass basicNew.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	^ instance a + instance b  + instance c
	
*/
Object symbol28 = (Object)new_Type_Symbol_cached(L"tmSimpleInstanceCreation");
Object send4118 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol28, 0);
Object result = (Object)Eval((Object)send4118);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmVariableInstanceCreation)
/*
tmVariableInstanceCreation
	| instance |
	instance := StandardVariableTestClass basicNew.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	^ instance a + instance b  + instance c
	
*/
Object symbol21 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreation");
Object send4119 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol21, 0);
Object result = (Object)Eval((Object)send4119);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmVariableInstanceCreationSized)
/*
tmVariableInstanceCreationSized
	| instance |
	instance := StandardVariableTestClass basicNew: 100.
	instance at: 1 put: 1.
	instance at: 100 put: 100.
	self assert: (instance at: 1) = 1.
	
	self assert: (instance at: 100) = 100.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	
	^ instance a + instance b + instance c + (instance at: 1) + (instance at: 100)
	
*/
Object symbol32 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreationSized");
Object send4120 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol32, 0);
Object result = (Object)Eval((Object)send4120);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 107);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

TEST_SUITE(AutoGenTest,
{
    create_ast();
    Test_Class = (Type_Class)class175;
    test_Class_Instance = (Object)new_AST_Constant((Object)instantiate((Type_Class)Test_Class));

    RUN_TEST(AutoGenTest_tmSimpleReturn);
    RUN_TEST(AutoGenTest_tmNumberMult);
    RUN_TEST(AutoGenTest_tmSymbol);
    RUN_TEST(AutoGenTest_tmNumber);
    RUN_TEST(AutoGenTest_tmBooleanFalse);
    RUN_TEST(AutoGenTest_tmString);
    RUN_TEST(AutoGenTest_tmLocalVariable);
    RUN_TEST(AutoGenTest_tmSimpleInstanceCreation);
    RUN_TEST(AutoGenTest_tmMethodArgument_);
    RUN_TEST(AutoGenTest_tmNumberEquals);
    RUN_TEST(AutoGenTest_tmClassReferenceReturn);
    RUN_TEST(AutoGenTest_tmCharacterEquals);
    RUN_TEST(AutoGenTest_tmCharacter);
    RUN_TEST(AutoGenTest_tmVariableInstanceCreation);
    RUN_TEST(AutoGenTest_tmBooleanTrue);
    RUN_TEST(AutoGenTest_tmNumberSubtract);
    RUN_TEST(AutoGenTest_tmNumberAdd);
    RUN_TEST(AutoGenTest_tmBooleanEquals);
    RUN_TEST(AutoGenTest_tmMethodArguments_with_with_);
    RUN_TEST(AutoGenTest_tmSimpleBasicArithmetik);
    RUN_TEST(AutoGenTest_tmStringEquals);
    RUN_TEST(AutoGenTest_tmSymbolEquals);
    RUN_TEST(AutoGenTest_tmNumberDiv);
    RUN_TEST(AutoGenTest_assert_);
    RUN_TEST(AutoGenTest_tmFibonacci);
    RUN_TEST(AutoGenTest_tmVariableInstanceCreationSized);
    RUN_TEST(AutoGenTest_tmExtendedReturn);
})
