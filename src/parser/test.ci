// Auto generated Tests from BridgeTest

// Test Object to put test methods in
Type_Class Test_Class;
Object test_Class_Instance;
// Test Method symbol
Type_Symbol SMB_runTestCase;
Object symbol727;
Object class96;
Object classreference115;
Object symbol725;
Object class97;
Object classreference116;
Object symbol744;
Object objectlayout44;
Object instancevariable115;
Object instancevariable116;
Object instancevariable117;
Object class98;
Object method1256;
Object symbol769;
Object methodclosure1140;
Object localvariable640;
Object array643;
Object assign272;
Object method1257;
Object symbol771;
Object methodclosure1141;
Object localvariable641;
Object array644;
Object assign273;
Object method1258;
Object symbol768;
Object methodclosure1142;
Object localvariable642;
Object array645;
Object assign274;
Object method1259;
Object symbol766;
Object methodclosure1143;
Object method1260;
Object symbol770;
Object methodclosure1144;
Object method1261;
Object symbol767;
Object methodclosure1145;
Object classreference117;
Object symbol764;
Object objectlayout45;
Object instancevariable118;
Object class99;
Object symbol736;
Object objectlayout46;
Object instancevariable119;
Object class100;
Object classreference118;
Object classreference119;
Object symbol739;
Object arraylayout20;
Object instancevariable120;
Object instancevariable121;
Object instancevariable122;
Object class101;
Object method1262;
Object methodclosure1146;
Object localvariable643;
Object array646;
Object assign275;
Object method1263;
Object methodclosure1147;
Object localvariable644;
Object array647;
Object assign276;
Object method1264;
Object methodclosure1148;
Object localvariable645;
Object array648;
Object assign277;
Object method1265;
Object methodclosure1149;
Object method1266;
Object methodclosure1150;
Object method1267;
Object methodclosure1151;
Object classreference120;
Object symbol721;
Object class102;
Object method1268;
Object symbol756;
Object methodclosure1152;
Object string655;
Object constant3072;
Object string656;
Object constant3073;
Object send3540;
Object method1269;
Object symbol746;
Object methodclosure1153;
Object character420;
Object constant3074;
Object method1270;
Object symbol738;
Object methodclosure1154;
Object character421;
Object constant3075;
Object string657;
Object constant3076;
Object send3541;
Object method1271;
Object symbol758;
Object methodclosure1155;
Object method1272;
Object symbol731;
Object methodclosure1156;
Object string658;
Object constant3077;
Object method1273;
Object symbol751;
Object methodclosure1157;
Object localvariable646;
Object array649;
Object symbol772;
Object send3542;
Object assign278;
Object symbol773;
Object send3543;
Object method1274;
Object symbol748;
Object methodclosure1158;
Object smallint1908;
Object constant3078;
Object smallint1909;
Object constant3079;
Object send3544;
Object smallint1910;
Object constant3080;
Object send3545;
Object smallint1911;
Object constant3081;
Object send3546;
Object method1275;
Object symbol741;
Object methodclosure1159;
Object symbol774;
Object constant3082;
Object send3547;
Object method1276;
Object symbol733;
Object methodclosure1160;
Object send3548;
Object method1277;
Object symbol761;
Object methodclosure1161;
Object symbol775;
Object constant3083;
Object method1278;
Object symbol753;
Object methodclosure1162;
Object character422;
Object constant3084;
Object character423;
Object constant3085;
Object send3549;
Object method1279;
Object symbol743;
Object methodclosure1163;
Object smallint1912;
Object constant3086;
Object method1280;
Object symbol735;
Object methodclosure1164;
Object smallint1913;
Object constant3087;
Object smallint1914;
Object constant3088;
Object send3550;
Object method1281;
Object symbol763;
Object methodclosure1165;
Object variable61;
Object array650;
Object smallint1915;
Object constant3089;
Object smallint1916;
Object constant3090;
Object send3551;
Object smallint1917;
Object constant3091;
Object send3552;
Object block467;
Object smallint1918;
Object constant3092;
Object send3553;
Object block468;
Object send3554;
Object block469;
Object send3555;
Object method1282;
Object symbol755;
Object methodclosure1166;
Object localvariable647;
Object array651;
Object send3556;
Object assign279;
Object localvariable648;
Object array652;
Object smallint1919;
Object constant3093;
Object send3557;
Object smallint1920;
Object constant3094;
Object send3558;
Object smallint1921;
Object constant3095;
Object send3559;
Object block470;
Object send3560;
Object symbol742;
Object send3561;
Object smallint1922;
Object constant3096;
Object send3562;
Object send3563;
Object send3564;
Object smallint1923;
Object constant3097;
Object send3565;
Object send3566;
Object send3567;
Object smallint1924;
Object constant3098;
Object send3568;
Object send3569;
Object send3570;
Object send3571;
Object send3572;
Object send3573;
Object send3574;
Object method1283;
Object symbol745;
Object methodclosure1167;
Object localvariable649;
Object array653;
Object send3575;
Object assign280;
Object smallint1925;
Object constant3099;
Object send3576;
Object smallint1926;
Object constant3100;
Object send3577;
Object send3578;
Object smallint1927;
Object constant3101;
Object send3579;
Object send3580;
Object send3581;
Object smallint1928;
Object constant3102;
Object send3582;
Object send3583;
Object method1284;
Object symbol737;
Object methodclosure1168;
Object smallint1929;
Object constant3103;
Object smallint1930;
Object constant3104;
Object send3584;
Object method1285;
Object symbol729;
Object methodclosure1169;
Object send3585;
Object method1286;
Object symbol757;
Object methodclosure1170;
Object symbol776;
Object constant3105;
Object character424;
Object constant3106;
Object send3586;
Object method1287;
Object symbol730;
Object methodclosure1171;
Object method1288;
Object symbol750;
Object methodclosure1172;
Object localvariable650;
Object array654;
Object send3587;
Object assign281;
Object localvariable651;
Object array655;
Object smallint1931;
Object constant3107;
Object send3588;
Object smallint1932;
Object constant3108;
Object send3589;
Object smallint1933;
Object constant3109;
Object send3590;
Object block471;
Object send3591;
Object send3592;
Object smallint1934;
Object constant3110;
Object send3593;
Object send3594;
Object send3595;
Object smallint1935;
Object constant3111;
Object send3596;
Object send3597;
Object send3598;
Object smallint1936;
Object constant3112;
Object send3599;
Object send3600;
Object send3601;
Object send3602;
Object send3603;
Object send3604;
Object send3605;
Object method1289;
Object symbol747;
Object methodclosure1173;
Object smallint1937;
Object constant3113;
Object smallint1938;
Object constant3114;
Object send3606;
Object method1290;
Object symbol759;
Object methodclosure1174;
Object localvariable652;
Object array656;
Object smallint1939;
Object constant3115;
Object send3607;
Object assign282;
Object smallint1940;
Object constant3116;
Object smallint1941;
Object constant3117;
Object send3608;
Object smallint1942;
Object constant3118;
Object smallint1943;
Object constant3119;
Object send3609;
Object smallint1944;
Object constant3120;
Object send3610;
Object smallint1945;
Object constant3121;
Object send3611;
Object send3612;
Object method1291;
Object symbol740;
Object methodclosure1175;
Object smallint1946;
Object constant3122;
Object method1292;
Object symbol732;
Object methodclosure1176;
Object constant3123;
Object constant3124;
Object send3613;
Object method1293;
Object symbol760;
Object methodclosure1177;
Object smallint1947;
Object constant3125;
Object smallint1948;
Object constant3126;
Object send3614;
Object method1294;
Object symbol752;
Object methodclosure1178;
Object localvariable653;
Object array657;
Object smallint1949;
Object constant3127;
Object assign283;
Object method1295;
Object symbol749;
Object methodclosure1179;
Object localvariable654;
Object array658;
Object symbol777;
Object send3615;
Object block472;
Object send3616;
Object method1296;
Object methodclosure1180;
Object smallint1950;
Object constant3128;
Object smallint1951;
Object constant3129;
Object send3617;
Object method1297;
Object symbol734;
Object methodclosure1181;
Object localvariable655;
Object array659;
Object smallint1952;
Object constant3130;
Object send3618;
Object method1298;
Object symbol762;
Object methodclosure1182;
Object localvariable656;
Object localvariable657;
Object localvariable658;
Object array660;
Object send3619;
Object send3620;
Object method1299;
Object symbol754;
Object methodclosure1183;
Object classreference121;


void create_ast() {
symbol727 = (Object)new_Type_Symbol_cached(L"ProtoObject");
class96 = (Object)new_Class(Nil, empty_object_layout);
((Type_Class)class96)->name = (Type_Symbol)symbol727;
classreference115 = (Object)new_Organization_ClassReference((Type_Class)class96);
symbol725 = (Object)new_Type_Symbol_cached(L"Object");
class97 = (Object)new_Class(class96, empty_object_layout);
((Type_Class)class97)->name = (Type_Symbol)symbol725;
classreference116 = (Object)new_Organization_ClassReference((Type_Class)class97);
symbol744 = (Object)new_Type_Symbol_cached(L"StandardTestClass");
objectlayout44 = (Object)create_type_with_vars(Type_ObjectLayout, 3);
instancevariable115 = (Object)new_AST_InstVariable(0, L"a");
((Type_Array)objectlayout44)->values[0] = instancevariable115;
instancevariable116 = (Object)new_AST_InstVariable(1, L"b");
((Type_Array)objectlayout44)->values[1] = instancevariable116;
instancevariable117 = (Object)new_AST_InstVariable(2, L"c");
((Type_Array)objectlayout44)->values[2] = instancevariable117;
class98 = (Object)new_Class(class97, objectlayout44);
((Type_Class)class98)->name = (Type_Symbol)symbol744;

// StandardTestClass>>c
method1256 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable117);
symbol769 = (Object)new_Type_Symbol_cached(L"c");
methodclosure1140 = (Object)new_Runtime_MethodClosure(method1256);
store_method((Type_Class)class98, (Type_Symbol)symbol769, (Runtime_MethodClosure)methodclosure1140);

// StandardTestClass>>c:
localvariable640 = (Object)new_AST_Variable_named(L"anObject");
array643 = (Object)new_Type_Array_with(1, localvariable640);
assign272 = (Object)new_AST_Assign((Object)instancevariable117, (Object)localvariable640);
method1257 = (Object)new_AST_Method_with((Type_Array)array643, (Type_Array)empty_Type_Array, 2, assign272, Self);
symbol771 = (Object)new_Type_Symbol_cached(L"c:");
methodclosure1141 = (Object)new_Runtime_MethodClosure(method1257);
store_method((Type_Class)class98, (Type_Symbol)symbol771, (Runtime_MethodClosure)methodclosure1141);

// StandardTestClass>>b:
localvariable641 = (Object)new_AST_Variable_named(L"anObject");
array644 = (Object)new_Type_Array_with(1, localvariable641);
assign273 = (Object)new_AST_Assign((Object)instancevariable116, (Object)localvariable641);
method1258 = (Object)new_AST_Method_with((Type_Array)array644, (Type_Array)empty_Type_Array, 2, assign273, Self);
symbol768 = (Object)new_Type_Symbol_cached(L"b:");
methodclosure1142 = (Object)new_Runtime_MethodClosure(method1258);
store_method((Type_Class)class98, (Type_Symbol)symbol768, (Runtime_MethodClosure)methodclosure1142);

// StandardTestClass>>a:
localvariable642 = (Object)new_AST_Variable_named(L"anObject");
array645 = (Object)new_Type_Array_with(1, localvariable642);
assign274 = (Object)new_AST_Assign((Object)instancevariable115, (Object)localvariable642);
method1259 = (Object)new_AST_Method_with((Type_Array)array645, (Type_Array)empty_Type_Array, 2, assign274, Self);
symbol766 = (Object)new_Type_Symbol_cached(L"a:");
methodclosure1143 = (Object)new_Runtime_MethodClosure(method1259);
store_method((Type_Class)class98, (Type_Symbol)symbol766, (Runtime_MethodClosure)methodclosure1143);

// StandardTestClass>>a
method1260 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable115);
symbol770 = (Object)new_Type_Symbol_cached(L"a");
methodclosure1144 = (Object)new_Runtime_MethodClosure(method1260);
store_method((Type_Class)class98, (Type_Symbol)symbol770, (Runtime_MethodClosure)methodclosure1144);

// StandardTestClass>>b
method1261 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable116);
symbol767 = (Object)new_Type_Symbol_cached(L"b");
methodclosure1145 = (Object)new_Runtime_MethodClosure(method1261);
store_method((Type_Class)class98, (Type_Symbol)symbol767, (Runtime_MethodClosure)methodclosure1145);
classreference117 = (Object)new_Organization_ClassReference((Type_Class)class98);
symbol764 = (Object)new_Type_Symbol_cached(L"SuperClassTestClass");
objectlayout45 = (Object)create_type_with_vars(Type_ObjectLayout, 1);
instancevariable118 = (Object)new_AST_InstVariable(0, L"a");
((Type_Array)objectlayout45)->values[0] = instancevariable118;
class99 = (Object)new_Class(class97, objectlayout45);
((Type_Class)class99)->name = (Type_Symbol)symbol764;
symbol736 = (Object)new_Type_Symbol_cached(L"ChildClassTestClass");
objectlayout46 = (Object)create_type_with_vars(Type_ObjectLayout, 2);
instancevariable119 = (Object)new_AST_InstVariable(0, L"b");
((Type_Array)objectlayout46)->values[0] = instancevariable119;
((Type_Array)objectlayout46)->values[1] = instancevariable118;
class100 = (Object)new_Class(class99, objectlayout46);
((Type_Class)class100)->name = (Type_Symbol)symbol736;
classreference118 = (Object)new_Organization_ClassReference((Type_Class)class100);
classreference119 = (Object)new_Organization_ClassReference((Type_Class)class99);
symbol739 = (Object)new_Type_Symbol_cached(L"StandardVariableTestClass");
arraylayout20 = (Object)create_type_with_vars(Type_ArrayLayout, 3);
instancevariable120 = (Object)new_AST_InstVariable(0, L"a");
((Type_Array)arraylayout20)->values[0] = instancevariable120;instancevariable121 = (Object)new_AST_InstVariable(1, L"b");
((Type_Array)arraylayout20)->values[1] = instancevariable121;instancevariable122 = (Object)new_AST_InstVariable(2, L"c");
((Type_Array)arraylayout20)->values[2] = instancevariable122;class101 = (Object)new_Class(class97, arraylayout20);
((Type_Class)class101)->name = (Type_Symbol)symbol739;

// StandardVariableTestClass>>c
method1262 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable122);
methodclosure1146 = (Object)new_Runtime_MethodClosure(method1262);
store_method((Type_Class)class101, (Type_Symbol)symbol769, (Runtime_MethodClosure)methodclosure1146);

// StandardVariableTestClass>>c:
localvariable643 = (Object)new_AST_Variable_named(L"anObject");
array646 = (Object)new_Type_Array_with(1, localvariable643);
assign275 = (Object)new_AST_Assign((Object)instancevariable122, (Object)localvariable643);
method1263 = (Object)new_AST_Method_with((Type_Array)array646, (Type_Array)empty_Type_Array, 2, assign275, Self);
methodclosure1147 = (Object)new_Runtime_MethodClosure(method1263);
store_method((Type_Class)class101, (Type_Symbol)symbol771, (Runtime_MethodClosure)methodclosure1147);

// StandardVariableTestClass>>b:
localvariable644 = (Object)new_AST_Variable_named(L"anObject");
array647 = (Object)new_Type_Array_with(1, localvariable644);
assign276 = (Object)new_AST_Assign((Object)instancevariable121, (Object)localvariable644);
method1264 = (Object)new_AST_Method_with((Type_Array)array647, (Type_Array)empty_Type_Array, 2, assign276, Self);
methodclosure1148 = (Object)new_Runtime_MethodClosure(method1264);
store_method((Type_Class)class101, (Type_Symbol)symbol768, (Runtime_MethodClosure)methodclosure1148);

// StandardVariableTestClass>>a:
localvariable645 = (Object)new_AST_Variable_named(L"anObject");
array648 = (Object)new_Type_Array_with(1, localvariable645);
assign277 = (Object)new_AST_Assign((Object)instancevariable120, (Object)localvariable645);
method1265 = (Object)new_AST_Method_with((Type_Array)array648, (Type_Array)empty_Type_Array, 2, assign277, Self);
methodclosure1149 = (Object)new_Runtime_MethodClosure(method1265);
store_method((Type_Class)class101, (Type_Symbol)symbol766, (Runtime_MethodClosure)methodclosure1149);

// StandardVariableTestClass>>a
method1266 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable120);
methodclosure1150 = (Object)new_Runtime_MethodClosure(method1266);
store_method((Type_Class)class101, (Type_Symbol)symbol770, (Runtime_MethodClosure)methodclosure1150);

// StandardVariableTestClass>>b
method1267 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable121);
methodclosure1151 = (Object)new_Runtime_MethodClosure(method1267);
store_method((Type_Class)class101, (Type_Symbol)symbol767, (Runtime_MethodClosure)methodclosure1151);
classreference120 = (Object)new_Organization_ClassReference((Type_Class)class101);
symbol721 = (Object)new_Type_Symbol_cached(L"BridgeTest");
class102 = (Object)new_Class(class97, empty_object_layout);
((Type_Class)class102)->name = (Type_Symbol)symbol721;

// BridgeTest>>tmBooleanTrue
method1268 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, True_Const);
symbol756 = (Object)new_Type_Symbol_cached(L"tmBooleanTrue");
methodclosure1152 = (Object)new_Runtime_MethodClosure(method1268);
store_method((Type_Class)class102, (Type_Symbol)symbol756, (Runtime_MethodClosure)methodclosure1152);

// BridgeTest>>tmStringEquals
string655 = (Object)new_Type_String(L"String");
constant3072 = (Object)new_AST_Constant((Object)string655);
string656 = (Object)new_Type_String(L"String");
constant3073 = (Object)new_AST_Constant((Object)string656);
send3540 = (Object)new_AST_Send((Object)constant3072, (Object)SMB__equal, 1, constant3073);
method1269 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3540);
symbol746 = (Object)new_Type_Symbol_cached(L"tmStringEquals");
methodclosure1153 = (Object)new_Runtime_MethodClosure(method1269);
store_method((Type_Class)class102, (Type_Symbol)symbol746, (Runtime_MethodClosure)methodclosure1153);

// BridgeTest>>tmCharacter
character420 = (Object)new_Type_Character(L'C');
constant3074 = (Object)new_AST_Constant((Object)character420);
method1270 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant3074);
symbol738 = (Object)new_Type_Symbol_cached(L"tmCharacter");
methodclosure1154 = (Object)new_Runtime_MethodClosure(method1270);
store_method((Type_Class)class102, (Type_Symbol)symbol738, (Runtime_MethodClosure)methodclosure1154);

// BridgeTest>>tmCharacterStringEquals
character421 = (Object)new_Type_Character(L'C');
constant3075 = (Object)new_AST_Constant((Object)character421);
string657 = (Object)new_Type_String(L"C");
constant3076 = (Object)new_AST_Constant((Object)string657);
send3541 = (Object)new_AST_Send((Object)constant3075, (Object)SMB__equal, 1, constant3076);
method1271 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3541);
symbol758 = (Object)new_Type_Symbol_cached(L"tmCharacterStringEquals");
methodclosure1155 = (Object)new_Runtime_MethodClosure(method1271);
store_method((Type_Class)class102, (Type_Symbol)symbol758, (Runtime_MethodClosure)methodclosure1155);

// BridgeTest>>tmFibonacci
method1272 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, Self);
symbol731 = (Object)new_Type_Symbol_cached(L"tmFibonacci");
methodclosure1156 = (Object)new_Runtime_MethodClosure(method1272);
store_method((Type_Class)class102, (Type_Symbol)symbol731, (Runtime_MethodClosure)methodclosure1156);

// BridgeTest>>tmString
string658 = (Object)new_Type_String(L"String");
constant3077 = (Object)new_AST_Constant((Object)string658);
method1273 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant3077);
symbol751 = (Object)new_Type_Symbol_cached(L"tmString");
methodclosure1157 = (Object)new_Runtime_MethodClosure(method1273);
store_method((Type_Class)class102, (Type_Symbol)symbol751, (Runtime_MethodClosure)methodclosure1157);

// BridgeTest>>tmSuperClassSuperSend
localvariable646 = (Object)new_AST_Variable_named(L"instance");
array649 = (Object)new_Type_Array_with(1, localvariable646);
symbol772 = (Object)new_Type_Symbol_cached(L"new");
send3542 = (Object)new_AST_Send((Object)classreference118, (Object)symbol772, 0);
assign278 = (Object)new_AST_Assign((Object)localvariable646, (Object)send3542);
symbol773 = (Object)new_Type_Symbol_cached(L"test");
send3543 = (Object)new_AST_Send((Object)localvariable646, (Object)symbol773, 0);
method1274 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array649, 2, assign278, send3543);
symbol748 = (Object)new_Type_Symbol_cached(L"tmSuperClassSuperSend");
methodclosure1158 = (Object)new_Runtime_MethodClosure(method1274);
store_method((Type_Class)class102, (Type_Symbol)symbol748, (Runtime_MethodClosure)methodclosure1158);

// BridgeTest>>tmSimpleBasicArithmetik
smallint1908 = (Object)new_Type_SmallInt(1);
constant3078 = (Object)new_AST_Constant((Object)smallint1908);
smallint1909 = (Object)new_Type_SmallInt(2);
constant3079 = (Object)new_AST_Constant((Object)smallint1909);
send3544 = (Object)new_AST_Send((Object)constant3078, (Object)SMB__plus, 1, constant3079);
smallint1910 = (Object)new_Type_SmallInt(2);
constant3080 = (Object)new_AST_Constant((Object)smallint1910);
send3545 = (Object)new_AST_Send((Object)send3544, (Object)SMB__plus, 1, constant3080);
smallint1911 = (Object)new_Type_SmallInt(5);
constant3081 = (Object)new_AST_Constant((Object)smallint1911);
send3546 = (Object)new_AST_Send((Object)send3545, (Object)SMB__times, 1, constant3081);
method1275 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3546);
symbol741 = (Object)new_Type_Symbol_cached(L"tmSimpleBasicArithmetik");
methodclosure1159 = (Object)new_Runtime_MethodClosure(method1275);
store_method((Type_Class)class102, (Type_Symbol)symbol741, (Runtime_MethodClosure)methodclosure1159);

// BridgeTest>>tmBooleanSymbolEquals
symbol774 = (Object)new_Type_Symbol_cached(L"true");
constant3082 = (Object)new_AST_Constant((Object)symbol774);
send3547 = (Object)new_AST_Send((Object)True_Const, (Object)SMB__equal, 1, constant3082);
method1276 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3547);
symbol733 = (Object)new_Type_Symbol_cached(L"tmBooleanSymbolEquals");
methodclosure1160 = (Object)new_Runtime_MethodClosure(method1276);
store_method((Type_Class)class102, (Type_Symbol)symbol733, (Runtime_MethodClosure)methodclosure1160);

// BridgeTest>>tmBooleanEquals
send3548 = (Object)new_AST_Send((Object)True_Const, (Object)SMB__equal, 1, True_Const);
method1277 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3548);
symbol761 = (Object)new_Type_Symbol_cached(L"tmBooleanEquals");
methodclosure1161 = (Object)new_Runtime_MethodClosure(method1277);
store_method((Type_Class)class102, (Type_Symbol)symbol761, (Runtime_MethodClosure)methodclosure1161);

// BridgeTest>>tmSymbol
symbol775 = (Object)new_Type_Symbol_cached(L"Symbol");
constant3083 = (Object)new_AST_Constant((Object)symbol775);
method1278 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant3083);
symbol753 = (Object)new_Type_Symbol_cached(L"tmSymbol");
methodclosure1162 = (Object)new_Runtime_MethodClosure(method1278);
store_method((Type_Class)class102, (Type_Symbol)symbol753, (Runtime_MethodClosure)methodclosure1162);

// BridgeTest>>tmCharacterEquals
character422 = (Object)new_Type_Character(L'C');
constant3084 = (Object)new_AST_Constant((Object)character422);
character423 = (Object)new_Type_Character(L'C');
constant3085 = (Object)new_AST_Constant((Object)character423);
send3549 = (Object)new_AST_Send((Object)constant3084, (Object)SMB__equal, 1, constant3085);
method1279 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3549);
symbol743 = (Object)new_Type_Symbol_cached(L"tmCharacterEquals");
methodclosure1163 = (Object)new_Runtime_MethodClosure(method1279);
store_method((Type_Class)class102, (Type_Symbol)symbol743, (Runtime_MethodClosure)methodclosure1163);

// BridgeTest>>tmSimpleReturn
smallint1912 = (Object)new_Type_SmallInt(1);
constant3086 = (Object)new_AST_Constant((Object)smallint1912);
method1280 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant3086);
symbol735 = (Object)new_Type_Symbol_cached(L"tmSimpleReturn");
methodclosure1164 = (Object)new_Runtime_MethodClosure(method1280);
store_method((Type_Class)class102, (Type_Symbol)symbol735, (Runtime_MethodClosure)methodclosure1164);

// BridgeTest>>tmNumberAdd
smallint1913 = (Object)new_Type_SmallInt(1);
constant3087 = (Object)new_AST_Constant((Object)smallint1913);
smallint1914 = (Object)new_Type_SmallInt(1);
constant3088 = (Object)new_AST_Constant((Object)smallint1914);
send3550 = (Object)new_AST_Send((Object)constant3087, (Object)SMB__plus, 1, constant3088);
method1281 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3550);
symbol763 = (Object)new_Type_Symbol_cached(L"tmNumberAdd");
methodclosure1165 = (Object)new_Runtime_MethodClosure(method1281);
store_method((Type_Class)class102, (Type_Symbol)symbol763, (Runtime_MethodClosure)methodclosure1165);

// BridgeTest>>tmExtendedReturn
variable61 = (Object)new_AST_Variable_named(L"return");
array650 = (Object)new_Type_Array_with(1, variable61);
smallint1915 = (Object)new_Type_SmallInt(1);
constant3089 = (Object)new_AST_Constant((Object)smallint1915);
smallint1916 = (Object)new_Type_SmallInt(2);
constant3090 = (Object)new_AST_Constant((Object)smallint1916);
send3551 = (Object)new_AST_Send((Object)constant3089, (Object)SMB__gt, 1, constant3090);
smallint1917 = (Object)new_Type_SmallInt(1);
constant3091 = (Object)new_AST_Constant((Object)smallint1917);
send3552 = (Object)new_AST_Send((Object)variable61, (Object)SMB_escape_, 1, constant3091);
block467 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 2, 1, send3552);
smallint1918 = (Object)new_Type_SmallInt(2);
constant3092 = (Object)new_AST_Constant((Object)smallint1918);
send3553 = (Object)new_AST_Send((Object)variable61, (Object)SMB_escape_, 1, constant3092);
block468 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 2, 1, send3553);
send3554 = (Object)new_AST_Send((Object)send3551, (Object)SMB_ifTrue_ifFalse_, 2, block467, block468);
block469 = (Object)new_AST_Block_with((Type_Array)array650, (Type_Array)empty_Type_Array, 1, 2, send3554, Self);
send3555 = (Object)new_AST_Send((Object)AST_Callec_Reference, (Object)SMB_on_, 1, block469);
method1282 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3555);
symbol755 = (Object)new_Type_Symbol_cached(L"tmExtendedReturn");
methodclosure1166 = (Object)new_Runtime_MethodClosure(method1282);
store_method((Type_Class)class102, (Type_Symbol)symbol755, (Runtime_MethodClosure)methodclosure1166);

// BridgeTest>>tmSimpleInstanceCreation
localvariable647 = (Object)new_AST_Variable_named(L"instance");
array651 = (Object)new_Type_Array_with(1, localvariable647);
send3556 = (Object)new_AST_Send((Object)classreference117, (Object)SMB_basicNew, 0);
assign279 = (Object)new_AST_Assign((Object)localvariable647, (Object)send3556);
localvariable648 = (Object)new_AST_Variable_named(L"receiver");
array652 = (Object)new_Type_Array_with(1, localvariable648);
smallint1919 = (Object)new_Type_SmallInt(1);
constant3093 = (Object)new_AST_Constant((Object)smallint1919);
send3557 = (Object)new_AST_Send((Object)localvariable648, (Object)symbol766, 1, constant3093);
smallint1920 = (Object)new_Type_SmallInt(2);
constant3094 = (Object)new_AST_Constant((Object)smallint1920);
send3558 = (Object)new_AST_Send((Object)localvariable648, (Object)symbol768, 1, constant3094);
smallint1921 = (Object)new_Type_SmallInt(3);
constant3095 = (Object)new_AST_Constant((Object)smallint1921);
send3559 = (Object)new_AST_Send((Object)localvariable648, (Object)symbol771, 1, constant3095);
block470 = (Object)new_AST_Block_with((Type_Array)array652, (Type_Array)empty_Type_Array, 1, 3, send3557, send3558, send3559);
send3560 = (Object)new_AST_Send((Object)block470, (Object)SMB_value_, 1, localvariable647);
symbol742 = (Object)new_Type_Symbol_cached(L"assert:");
send3561 = (Object)new_AST_Send((Object)localvariable647, (Object)symbol770, 0);
smallint1922 = (Object)new_Type_SmallInt(1);
constant3096 = (Object)new_AST_Constant((Object)smallint1922);
send3562 = (Object)new_AST_Send((Object)send3561, (Object)SMB__equal, 1, constant3096);
send3563 = (Object)new_AST_Send((Object)Self, (Object)symbol742, 1, send3562);
send3564 = (Object)new_AST_Send((Object)localvariable647, (Object)symbol767, 0);
smallint1923 = (Object)new_Type_SmallInt(2);
constant3097 = (Object)new_AST_Constant((Object)smallint1923);
send3565 = (Object)new_AST_Send((Object)send3564, (Object)SMB__equal, 1, constant3097);
send3566 = (Object)new_AST_Send((Object)Self, (Object)symbol742, 1, send3565);
send3567 = (Object)new_AST_Send((Object)localvariable647, (Object)symbol769, 0);
smallint1924 = (Object)new_Type_SmallInt(3);
constant3098 = (Object)new_AST_Constant((Object)smallint1924);
send3568 = (Object)new_AST_Send((Object)send3567, (Object)SMB__equal, 1, constant3098);
send3569 = (Object)new_AST_Send((Object)Self, (Object)symbol742, 1, send3568);
send3570 = (Object)new_AST_Send((Object)localvariable647, (Object)symbol770, 0);
send3571 = (Object)new_AST_Send((Object)localvariable647, (Object)symbol767, 0);
send3572 = (Object)new_AST_Send((Object)send3570, (Object)SMB__plus, 1, send3571);
send3573 = (Object)new_AST_Send((Object)localvariable647, (Object)symbol769, 0);
send3574 = (Object)new_AST_Send((Object)send3572, (Object)SMB__plus, 1, send3573);
method1283 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array651, 6, assign279, send3560, send3563, send3566, send3569, send3574);
symbol745 = (Object)new_Type_Symbol_cached(L"tmSimpleInstanceCreation");
methodclosure1167 = (Object)new_Runtime_MethodClosure(method1283);
store_method((Type_Class)class102, (Type_Symbol)symbol745, (Runtime_MethodClosure)methodclosure1167);

// BridgeTest>>tmSuperClass
localvariable649 = (Object)new_AST_Variable_named(L"instance");
array653 = (Object)new_Type_Array_with(1, localvariable649);
send3575 = (Object)new_AST_Send((Object)classreference118, (Object)symbol772, 0);
assign280 = (Object)new_AST_Assign((Object)localvariable649, (Object)send3575);
smallint1925 = (Object)new_Type_SmallInt(1);
constant3099 = (Object)new_AST_Constant((Object)smallint1925);
send3576 = (Object)new_AST_Send((Object)localvariable649, (Object)symbol766, 1, constant3099);
smallint1926 = (Object)new_Type_SmallInt(2);
constant3100 = (Object)new_AST_Constant((Object)smallint1926);
send3577 = (Object)new_AST_Send((Object)localvariable649, (Object)symbol768, 1, constant3100);
send3578 = (Object)new_AST_Send((Object)localvariable649, (Object)symbol770, 0);
smallint1927 = (Object)new_Type_SmallInt(1);
constant3101 = (Object)new_AST_Constant((Object)smallint1927);
send3579 = (Object)new_AST_Send((Object)send3578, (Object)SMB__equal, 1, constant3101);
send3580 = (Object)new_AST_Send((Object)Self, (Object)symbol742, 1, send3579);
send3581 = (Object)new_AST_Send((Object)localvariable649, (Object)symbol767, 0);
smallint1928 = (Object)new_Type_SmallInt(2);
constant3102 = (Object)new_AST_Constant((Object)smallint1928);
send3582 = (Object)new_AST_Send((Object)send3581, (Object)SMB__equal, 1, constant3102);
send3583 = (Object)new_AST_Send((Object)Self, (Object)symbol742, 1, send3582);
method1284 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array653, 6, assign280, send3576, send3577, send3580, send3583, Self);
symbol737 = (Object)new_Type_Symbol_cached(L"tmSuperClass");
methodclosure1168 = (Object)new_Runtime_MethodClosure(method1284);
store_method((Type_Class)class102, (Type_Symbol)symbol737, (Runtime_MethodClosure)methodclosure1168);

// BridgeTest>>tmNumberDiv
smallint1929 = (Object)new_Type_SmallInt(4);
constant3103 = (Object)new_AST_Constant((Object)smallint1929);
smallint1930 = (Object)new_Type_SmallInt(2);
constant3104 = (Object)new_AST_Constant((Object)smallint1930);
send3584 = (Object)new_AST_Send((Object)constant3103, (Object)SMB__divide, 1, constant3104);
method1285 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3584);
symbol729 = (Object)new_Type_Symbol_cached(L"tmNumberDiv");
methodclosure1169 = (Object)new_Runtime_MethodClosure(method1285);
store_method((Type_Class)class102, (Type_Symbol)symbol729, (Runtime_MethodClosure)methodclosure1169);

// BridgeTest>>tmClassReferenceReturn
send3585 = (Object)new_AST_Send((Object)Metaclass_Reference, (Object)SMB_name, 0);
method1286 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3585);
symbol757 = (Object)new_Type_Symbol_cached(L"tmClassReferenceReturn");
methodclosure1170 = (Object)new_Runtime_MethodClosure(method1286);
store_method((Type_Class)class102, (Type_Symbol)symbol757, (Runtime_MethodClosure)methodclosure1170);

// BridgeTest>>tmSymbolCharacterEquals
symbol776 = (Object)new_Type_Symbol_cached(L"S");
constant3105 = (Object)new_AST_Constant((Object)symbol776);
character424 = (Object)new_Type_Character(L'S');
constant3106 = (Object)new_AST_Constant((Object)character424);
send3586 = (Object)new_AST_Send((Object)constant3105, (Object)SMB__equal, 1, constant3106);
method1287 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3586);
symbol730 = (Object)new_Type_Symbol_cached(L"tmSymbolCharacterEquals");
methodclosure1171 = (Object)new_Runtime_MethodClosure(method1287);
store_method((Type_Class)class102, (Type_Symbol)symbol730, (Runtime_MethodClosure)methodclosure1171);

// BridgeTest>>tmBooleanFalse
method1288 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, False_Const);
symbol750 = (Object)new_Type_Symbol_cached(L"tmBooleanFalse");
methodclosure1172 = (Object)new_Runtime_MethodClosure(method1288);
store_method((Type_Class)class102, (Type_Symbol)symbol750, (Runtime_MethodClosure)methodclosure1172);

// BridgeTest>>tmVariableInstanceCreation
localvariable650 = (Object)new_AST_Variable_named(L"instance");
array654 = (Object)new_Type_Array_with(1, localvariable650);
send3587 = (Object)new_AST_Send((Object)classreference120, (Object)SMB_basicNew, 0);
assign281 = (Object)new_AST_Assign((Object)localvariable650, (Object)send3587);
localvariable651 = (Object)new_AST_Variable_named(L"receiver");
array655 = (Object)new_Type_Array_with(1, localvariable651);
smallint1931 = (Object)new_Type_SmallInt(1);
constant3107 = (Object)new_AST_Constant((Object)smallint1931);
send3588 = (Object)new_AST_Send((Object)localvariable651, (Object)symbol766, 1, constant3107);
smallint1932 = (Object)new_Type_SmallInt(2);
constant3108 = (Object)new_AST_Constant((Object)smallint1932);
send3589 = (Object)new_AST_Send((Object)localvariable651, (Object)symbol768, 1, constant3108);
smallint1933 = (Object)new_Type_SmallInt(3);
constant3109 = (Object)new_AST_Constant((Object)smallint1933);
send3590 = (Object)new_AST_Send((Object)localvariable651, (Object)symbol771, 1, constant3109);
block471 = (Object)new_AST_Block_with((Type_Array)array655, (Type_Array)empty_Type_Array, 1, 3, send3588, send3589, send3590);
send3591 = (Object)new_AST_Send((Object)block471, (Object)SMB_value_, 1, localvariable650);
send3592 = (Object)new_AST_Send((Object)localvariable650, (Object)symbol770, 0);
smallint1934 = (Object)new_Type_SmallInt(1);
constant3110 = (Object)new_AST_Constant((Object)smallint1934);
send3593 = (Object)new_AST_Send((Object)send3592, (Object)SMB__equal, 1, constant3110);
send3594 = (Object)new_AST_Send((Object)Self, (Object)symbol742, 1, send3593);
send3595 = (Object)new_AST_Send((Object)localvariable650, (Object)symbol767, 0);
smallint1935 = (Object)new_Type_SmallInt(2);
constant3111 = (Object)new_AST_Constant((Object)smallint1935);
send3596 = (Object)new_AST_Send((Object)send3595, (Object)SMB__equal, 1, constant3111);
send3597 = (Object)new_AST_Send((Object)Self, (Object)symbol742, 1, send3596);
send3598 = (Object)new_AST_Send((Object)localvariable650, (Object)symbol769, 0);
smallint1936 = (Object)new_Type_SmallInt(3);
constant3112 = (Object)new_AST_Constant((Object)smallint1936);
send3599 = (Object)new_AST_Send((Object)send3598, (Object)SMB__equal, 1, constant3112);
send3600 = (Object)new_AST_Send((Object)Self, (Object)symbol742, 1, send3599);
send3601 = (Object)new_AST_Send((Object)localvariable650, (Object)symbol770, 0);
send3602 = (Object)new_AST_Send((Object)localvariable650, (Object)symbol767, 0);
send3603 = (Object)new_AST_Send((Object)send3601, (Object)SMB__plus, 1, send3602);
send3604 = (Object)new_AST_Send((Object)localvariable650, (Object)symbol769, 0);
send3605 = (Object)new_AST_Send((Object)send3603, (Object)SMB__plus, 1, send3604);
method1289 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array654, 6, assign281, send3591, send3594, send3597, send3600, send3605);
symbol747 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreation");
methodclosure1173 = (Object)new_Runtime_MethodClosure(method1289);
store_method((Type_Class)class102, (Type_Symbol)symbol747, (Runtime_MethodClosure)methodclosure1173);

// BridgeTest>>tmNumberEquals
smallint1937 = (Object)new_Type_SmallInt(1);
constant3113 = (Object)new_AST_Constant((Object)smallint1937);
smallint1938 = (Object)new_Type_SmallInt(1);
constant3114 = (Object)new_AST_Constant((Object)smallint1938);
send3606 = (Object)new_AST_Send((Object)constant3113, (Object)SMB__equal, 1, constant3114);
method1290 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3606);
symbol759 = (Object)new_Type_Symbol_cached(L"tmNumberEquals");
methodclosure1174 = (Object)new_Runtime_MethodClosure(method1290);
store_method((Type_Class)class102, (Type_Symbol)symbol759, (Runtime_MethodClosure)methodclosure1174);

// BridgeTest>>tmVariableInstanceCreationSized
localvariable652 = (Object)new_AST_Variable_named(L"instance");
array656 = (Object)new_Type_Array_with(1, localvariable652);
smallint1939 = (Object)new_Type_SmallInt(100);
constant3115 = (Object)new_AST_Constant((Object)smallint1939);
send3607 = (Object)new_AST_Send((Object)classreference120, (Object)SMB_basicNew_, 1, constant3115);
assign282 = (Object)new_AST_Assign((Object)localvariable652, (Object)send3607);
smallint1940 = (Object)new_Type_SmallInt(1);
constant3116 = (Object)new_AST_Constant((Object)smallint1940);
smallint1941 = (Object)new_Type_SmallInt(1);
constant3117 = (Object)new_AST_Constant((Object)smallint1941);
send3608 = (Object)new_AST_Send((Object)localvariable652, (Object)SMB_at_put_, 2, constant3116, constant3117);
smallint1942 = (Object)new_Type_SmallInt(99);
constant3118 = (Object)new_AST_Constant((Object)smallint1942);
smallint1943 = (Object)new_Type_SmallInt(100);
constant3119 = (Object)new_AST_Constant((Object)smallint1943);
send3609 = (Object)new_AST_Send((Object)localvariable652, (Object)SMB_at_put_, 2, constant3118, constant3119);
smallint1944 = (Object)new_Type_SmallInt(1);
constant3120 = (Object)new_AST_Constant((Object)smallint1944);
send3610 = (Object)new_AST_Send((Object)localvariable652, (Object)SMB_at_, 1, constant3120);
smallint1945 = (Object)new_Type_SmallInt(1);
constant3121 = (Object)new_AST_Constant((Object)smallint1945);
send3611 = (Object)new_AST_Send((Object)send3610, (Object)SMB__equal, 1, constant3121);
send3612 = (Object)new_AST_Send((Object)Self, (Object)symbol742, 1, send3611);
method1291 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array656, 5, assign282, send3608, send3609, send3612, Self);
symbol740 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreationSized");
methodclosure1175 = (Object)new_Runtime_MethodClosure(method1291);
store_method((Type_Class)class102, (Type_Symbol)symbol740, (Runtime_MethodClosure)methodclosure1175);

// BridgeTest>>tmNumber
smallint1946 = (Object)new_Type_SmallInt(1);
constant3122 = (Object)new_AST_Constant((Object)smallint1946);
method1292 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant3122);
symbol732 = (Object)new_Type_Symbol_cached(L"tmNumber");
methodclosure1176 = (Object)new_Runtime_MethodClosure(method1292);
store_method((Type_Class)class102, (Type_Symbol)symbol732, (Runtime_MethodClosure)methodclosure1176);

// BridgeTest>>tmSymbolEquals
constant3123 = (Object)new_AST_Constant((Object)symbol775);
constant3124 = (Object)new_AST_Constant((Object)symbol775);
send3613 = (Object)new_AST_Send((Object)constant3123, (Object)SMB__equal, 1, constant3124);
method1293 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3613);
symbol760 = (Object)new_Type_Symbol_cached(L"tmSymbolEquals");
methodclosure1177 = (Object)new_Runtime_MethodClosure(method1293);
store_method((Type_Class)class102, (Type_Symbol)symbol760, (Runtime_MethodClosure)methodclosure1177);

// BridgeTest>>tmNumberSubtract
smallint1947 = (Object)new_Type_SmallInt(2);
constant3125 = (Object)new_AST_Constant((Object)smallint1947);
smallint1948 = (Object)new_Type_SmallInt(1);
constant3126 = (Object)new_AST_Constant((Object)smallint1948);
send3614 = (Object)new_AST_Send((Object)constant3125, (Object)SMB__minus, 1, constant3126);
method1294 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3614);
symbol752 = (Object)new_Type_Symbol_cached(L"tmNumberSubtract");
methodclosure1178 = (Object)new_Runtime_MethodClosure(method1294);
store_method((Type_Class)class102, (Type_Symbol)symbol752, (Runtime_MethodClosure)methodclosure1178);

// BridgeTest>>tmLocalVariable
localvariable653 = (Object)new_AST_Variable_named(L"a");
array657 = (Object)new_Type_Array_with(1, localvariable653);
smallint1949 = (Object)new_Type_SmallInt(1);
constant3127 = (Object)new_AST_Constant((Object)smallint1949);
assign283 = (Object)new_AST_Assign((Object)localvariable653, (Object)constant3127);
method1295 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array657, 2, assign283, localvariable653);
symbol749 = (Object)new_Type_Symbol_cached(L"tmLocalVariable");
methodclosure1179 = (Object)new_Runtime_MethodClosure(method1295);
store_method((Type_Class)class102, (Type_Symbol)symbol749, (Runtime_MethodClosure)methodclosure1179);

// BridgeTest>>assert:
localvariable654 = (Object)new_AST_Variable_named(L"bool");
array658 = (Object)new_Type_Array_with(1, localvariable654);
symbol777 = (Object)new_Type_Symbol_cached(L"fail");
send3615 = (Object)new_AST_Send((Object)Self, (Object)symbol777, 0);
block472 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, 1, send3615);
send3616 = (Object)new_AST_Send((Object)localvariable654, (Object)SMB_ifFalse_, 1, block472);
method1296 = (Object)new_AST_Method_with((Type_Array)array658, (Type_Array)empty_Type_Array, 1, send3616);
methodclosure1180 = (Object)new_Runtime_MethodClosure(method1296);
store_method((Type_Class)class102, (Type_Symbol)symbol742, (Runtime_MethodClosure)methodclosure1180);

// BridgeTest>>tmNumberMult
smallint1950 = (Object)new_Type_SmallInt(2);
constant3128 = (Object)new_AST_Constant((Object)smallint1950);
smallint1951 = (Object)new_Type_SmallInt(3);
constant3129 = (Object)new_AST_Constant((Object)smallint1951);
send3617 = (Object)new_AST_Send((Object)constant3128, (Object)SMB__times, 1, constant3129);
method1297 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3617);
symbol734 = (Object)new_Type_Symbol_cached(L"tmNumberMult");
methodclosure1181 = (Object)new_Runtime_MethodClosure(method1297);
store_method((Type_Class)class102, (Type_Symbol)symbol734, (Runtime_MethodClosure)methodclosure1181);

// BridgeTest>>tmMethodArgument:
localvariable655 = (Object)new_AST_Variable_named(L"arg");
array659 = (Object)new_Type_Array_with(1, localvariable655);
smallint1952 = (Object)new_Type_SmallInt(1);
constant3130 = (Object)new_AST_Constant((Object)smallint1952);
send3618 = (Object)new_AST_Send((Object)localvariable655, (Object)SMB__plus, 1, constant3130);
method1298 = (Object)new_AST_Method_with((Type_Array)array659, (Type_Array)empty_Type_Array, 1, send3618);
symbol762 = (Object)new_Type_Symbol_cached(L"tmMethodArgument:");
methodclosure1182 = (Object)new_Runtime_MethodClosure(method1298);
store_method((Type_Class)class102, (Type_Symbol)symbol762, (Runtime_MethodClosure)methodclosure1182);

// BridgeTest>>tmMethodArguments:with:with:
localvariable656 = (Object)new_AST_Variable_named(L"arg1");
localvariable657 = (Object)new_AST_Variable_named(L"arg2");
localvariable658 = (Object)new_AST_Variable_named(L"arg3");
array660 = (Object)new_Type_Array_with(3, localvariable656, localvariable657, localvariable658);
send3619 = (Object)new_AST_Send((Object)localvariable656, (Object)SMB__concat, 1, localvariable657);
send3620 = (Object)new_AST_Send((Object)send3619, (Object)SMB__concat, 1, localvariable658);
method1299 = (Object)new_AST_Method_with((Type_Array)array660, (Type_Array)empty_Type_Array, 1, send3620);
symbol754 = (Object)new_Type_Symbol_cached(L"tmMethodArguments:with:with:");
methodclosure1183 = (Object)new_Runtime_MethodClosure(method1299);
store_method((Type_Class)class102, (Type_Symbol)symbol754, (Runtime_MethodClosure)methodclosure1183);
classreference121 = (Object)new_Organization_ClassReference((Type_Class)class102);
}


/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanEquals)
/*
tmBooleanEquals
	^ true = true
*/
Object send3621 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol761, 0);
Object result = (Object)Eval((Object)send3621);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanFalse)
/*
tmBooleanFalse
	^ false
*/
Object send3622 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol750, 0);
Object result = (Object)Eval((Object)send3622);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanSymbolEquals)
/*
tmBooleanSymbolEquals
	^ true = #true
*/
Object send3623 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol733, 0);
Object result = (Object)Eval((Object)send3623);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanTrue)
/*
tmBooleanTrue
	^ true
*/
Object send3624 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol756, 0);
Object result = (Object)Eval((Object)send3624);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacter)
/*
tmCharacter
	^ $C
*/
Object send3625 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol738, 0);
Object result = (Object)Eval((Object)send3625);
ASSERT_EMPTY_STACK
assert0(((Type_Character)result)->value == 'C');
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacterEquals)
/*
tmCharacterEquals
	^ $C = $C
*/
Object send3626 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol743, 0);
Object result = (Object)Eval((Object)send3626);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacterStringEquals)
/*
tmCharacterStringEquals
	^ $C = 'C'
*/
Object send3627 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol758, 0);
Object result = (Object)Eval((Object)send3627);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmClassReferenceReturn)
/*
tmClassReferenceReturn
	^ Metaclass name.
*/
Object send3628 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol757, 0);
Object result = (Object)Eval((Object)send3628);
ASSERT_EMPTY_STACK
Object symbol778 = (Object)new_Type_Symbol_cached(L"Metaclass");
result = Eval_Send1(result, SMB__equal, symbol778);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmExtendedReturn)
/*
tmExtendedReturn
	1 > 2 ifTrue: [ ^ 1 ]
		ifFalse: [ ^ 2].
*/
Object send3629 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol755, 0);
Object result = (Object)Eval((Object)send3629);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmLocalVariable)
/*
tmLocalVariable
	|a|
	a := 1.
	^ a
*/
Object send3630 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol749, 0);
Object result = (Object)Eval((Object)send3630);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArgument_)
/*
tmMethodArgument: arg 
	<arg1: 1>
	^ arg + 1
*/
Object smallint1953 = (Object)new_Type_SmallInt(1);
Object constant3131 = (Object)new_AST_Constant((Object)smallint1953);
Object send3631 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol762, 1, constant3131);
Object result = (Object)Eval((Object)send3631);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArguments_with_with_)
/*
tmMethodArguments: arg1 with: arg2 with: arg3 
	<arg1: 'asdf' arg2: 'asdf' arg3: 'df'>
	^ arg1 , arg2 , arg3
*/
Object string659 = (Object)new_Type_String(L"asdf");
Object constant3132 = (Object)new_AST_Constant((Object)string659);
Object string660 = (Object)new_Type_String(L"asdf");
Object constant3133 = (Object)new_AST_Constant((Object)string660);
Object string661 = (Object)new_Type_String(L"df");
Object constant3134 = (Object)new_AST_Constant((Object)string661);
Object send3632 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol754, 3, constant3132, constant3133, constant3134);
Object result = (Object)Eval((Object)send3632);
ASSERT_EMPTY_STACK
Object string662 = (Object)new_Type_String(L"asdfasdfdf");
result = Eval_Send1(result, SMB__equal, string662);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumber)
/*
tmNumber
	^ 1
*/
Object send3633 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol732, 0);
Object result = (Object)Eval((Object)send3633);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberAdd)
/*
tmNumberAdd
	^ 1 + 1
*/
Object send3634 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol763, 0);
Object result = (Object)Eval((Object)send3634);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberDiv)
/*
tmNumberDiv
	^ 4 / 2
*/
Object send3635 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol729, 0);
Object result = (Object)Eval((Object)send3635);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberEquals)
/*
tmNumberEquals
	^ 1 = 1
*/
Object send3636 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol759, 0);
Object result = (Object)Eval((Object)send3636);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberMult)
/*
tmNumberMult
	^ 2 * 3
*/
Object send3637 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol734, 0);
Object result = (Object)Eval((Object)send3637);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberSubtract)
/*
tmNumberSubtract
	^ 2 - 1
*/
Object send3638 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol752, 0);
Object result = (Object)Eval((Object)send3638);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleBasicArithmetik)
/*
tmSimpleBasicArithmetik
	^ (1 + 2) + 2 * 5
*/
Object send3639 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol741, 0);
Object result = (Object)Eval((Object)send3639);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 25);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleReturn)
/*
tmSimpleReturn
	^ 1
*/
Object send3640 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol735, 0);
Object result = (Object)Eval((Object)send3640);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmString)
/*
tmString
	^ 'String'
*/
Object send3641 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol751, 0);
Object result = (Object)Eval((Object)send3641);
ASSERT_EMPTY_STACK
Object string663 = (Object)new_Type_String(L"String");
result = Eval_Send1(result, SMB__equal, string663);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmStringEquals)
/*
tmStringEquals
	^ 'String' = 'String'
*/
Object send3642 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol746, 0);
Object result = (Object)Eval((Object)send3642);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbol)
/*
tmSymbol
	^ #Symbol
*/
Object send3643 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol753, 0);
Object result = (Object)Eval((Object)send3643);
ASSERT_EMPTY_STACK
result = Eval_Send1(result, SMB__equal, symbol775);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbolCharacterEquals)
/*
tmSymbolCharacterEquals
	^ #S = $S
*/
Object send3644 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol730, 0);
Object result = (Object)Eval((Object)send3644);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbolEquals)
/*
tmSymbolEquals
	^ #Symbol = #Symbol
*/
Object send3645 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol760, 0);
Object result = (Object)Eval((Object)send3645);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_assert_)
/*
assert: bool
	<arg: true>
	^ bool ifFalse: [ self fail. ]
	
*/
Object send3646 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol742, 1, True_Const);
Object result = (Object)Eval((Object)send3646);
ASSERT_EMPTY_STACK
assert0(result == Nil);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmFibonacci)
/*
tmFibonacci
	
*/
Object send3647 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol731, 0);
Object result = (Object)Eval((Object)send3647);
ASSERT_EMPTY_STACK
assert0(result == ((AST_Constant)test_Class_Instance)->constant);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleInstanceCreation)
/*
tmSimpleInstanceCreation
	| instance |
	instance := StandardTestClass basicNew.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	^ instance a + instance b  + instance c
	
*/
Object send3648 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol745, 0);
Object result = (Object)Eval((Object)send3648);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSuperClass)
/*
tmSuperClass
	| instance |
	instance := ChildClassTestClass new.
	instance a: 1.
	instance b: 2.
	self assert: instance a = 1.
	self assert: instance b = 2.
*/
Object send3649 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol737, 0);
Object result = (Object)Eval((Object)send3649);
ASSERT_EMPTY_STACK
assert0(result == ((AST_Constant)test_Class_Instance)->constant);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSuperClassSuperSend)
/*
tmSuperClassSuperSend
	| instance |
	instance := ChildClassTestClass new.
	^ instance test
*/
Object send3650 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol748, 0);
Object result = (Object)Eval((Object)send3650);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 100);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmVariableInstanceCreation)
/*
tmVariableInstanceCreation
	| instance |
	instance := StandardVariableTestClass basicNew.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	^ instance a + instance b  + instance c
	
*/
Object send3651 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol747, 0);
Object result = (Object)Eval((Object)send3651);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmVariableInstanceCreationSized)
/*
tmVariableInstanceCreationSized
	| instance |
	instance := StandardVariableTestClass basicNew: 100.
	instance at: 1 put: 1.
	instance at: 99 put: 100.
	self assert: (instance at: 1) = 1.
	"TODO match one based index of Smalltalk with 0 based index of Pinocchio"
	self assert: (instance at: 99) = 100.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	
	^ instance a + instance b + instance c + (instance at: 1) + (instance at: 99)
	
*/
Object send3652 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol740, 0);
Object result = (Object)Eval((Object)send3652);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 107);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

TEST_SUITE(AutoGenTest,
{
    create_ast();
    Test_Class = (Type_Class)class102;
    test_Class_Instance = (Object)new_AST_Constant((Object)instantiate((Type_Class)Test_Class));

    RUN_TEST(AutoGenTest_tmSimpleReturn);
    RUN_TEST(AutoGenTest_tmNumberMult);
    RUN_TEST(AutoGenTest_tmString);
    RUN_TEST(AutoGenTest_tmSymbolCharacterEquals);
    RUN_TEST(AutoGenTest_tmMethodArgument_);
    RUN_TEST(AutoGenTest_tmNumberEquals);
    RUN_TEST(AutoGenTest_tmClassReferenceReturn);
    RUN_TEST(AutoGenTest_tmVariableInstanceCreation);
    RUN_TEST(AutoGenTest_tmNumberSubtract);
    RUN_TEST(AutoGenTest_tmNumberAdd);
    RUN_TEST(AutoGenTest_tmBooleanEquals);
    RUN_TEST(AutoGenTest_tmMethodArguments_with_with_);
    RUN_TEST(AutoGenTest_tmSimpleBasicArithmetik);
    RUN_TEST(AutoGenTest_tmStringEquals);
    RUN_TEST(AutoGenTest_tmFibonacci);
    RUN_TEST(AutoGenTest_tmNumberDiv);
    RUN_TEST(AutoGenTest_assert_);
    RUN_TEST(AutoGenTest_tmExtendedReturn);
    RUN_TEST(AutoGenTest_tmSuperClassSuperSend);
    RUN_TEST(AutoGenTest_tmSymbol);
    RUN_TEST(AutoGenTest_tmNumber);
    RUN_TEST(AutoGenTest_tmBooleanFalse);
    RUN_TEST(AutoGenTest_tmSimpleInstanceCreation);
    RUN_TEST(AutoGenTest_tmLocalVariable);
    RUN_TEST(AutoGenTest_tmCharacterEquals);
    RUN_TEST(AutoGenTest_tmCharacter);
    RUN_TEST(AutoGenTest_tmBooleanTrue);
    RUN_TEST(AutoGenTest_tmCharacterStringEquals);
    RUN_TEST(AutoGenTest_tmSymbolEquals);
    RUN_TEST(AutoGenTest_tmSuperClass);
    RUN_TEST(AutoGenTest_tmVariableInstanceCreationSized);
    RUN_TEST(AutoGenTest_tmBooleanSymbolEquals);
})