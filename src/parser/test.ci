// Auto generated Tests from BridgeTest

// Test Object to put test methods in
Type_Class Test_Class;
Object test_Class_Instance;
// Test Method symbol
Type_Symbol SMB_runTestCase;
Object symbol28;
Object symbol33;
Object class28;
Object symbol32;
Object classreference31;
Object symbol34;
Object classreference32;
Object symbol31;
Object class27;
Object symbol27;
Object class26;
Object smallint345;
Object constant479;
Object method235;
Object symbol11;
Object methodclosure223;
Object localvariable108;
Object array103;
Object smallint346;
Object constant480;
Object send675;
Object method236;
Object symbol39;
Object methodclosure224;
Object symbol19;
Object constant481;
Object method237;
Object symbol20;
Object methodclosure225;
Object smallint347;
Object constant482;
Object smallint348;
Object constant483;
Object send676;
Object method238;
Object symbol12;
Object methodclosure226;
Object variable10;
Object array104;
Object smallint349;
Object constant484;
Object smallint350;
Object constant485;
Object send679;
Object smallint351;
Object constant486;
Object send680;
Object block68;
Object smallint352;
Object constant487;
Object send681;
Object block69;
Object send678;
Object block67;
Object send677;
Object method239;
Object symbol40;
Object methodclosure227;
Object send682;
Object method240;
Object symbol5;
Object methodclosure228;
Object constant488;
Object constant489;
Object send683;
Object method241;
Object symbol21;
Object methodclosure229;
Object smallint353;
Object constant490;
Object smallint354;
Object constant491;
Object send684;
Object method242;
Object symbol13;
Object methodclosure230;
Object method243;
Object symbol41;
Object methodclosure231;
Object method244;
Object symbol6;
Object methodclosure232;
Object smallint355;
Object constant492;
Object smallint356;
Object constant493;
Object send685;
Object method245;
Object symbol14;
Object methodclosure233;
Object method246;
Object symbol7;
Object methodclosure234;
Object smallint357;
Object constant494;
Object smallint358;
Object constant495;
Object send686;
Object method247;
Object symbol15;
Object methodclosure235;
Object localvariable109;
Object array105;
Object symbol42;
Object arraylayout6;
Object instancevariable31;
Object instancevariable32;
Object instancevariable33;
Object class29;
Object method249;
Object symbol50;
Object methodclosure236;
Object method250;
Object symbol47;
Object methodclosure237;
Object localvariable110;
Object array106;
Object assign62;
Object method251;
Object symbol49;
Object methodclosure238;
Object localvariable111;
Object array107;
Object assign63;
Object method252;
Object symbol2;
Object methodclosure239;
Object method253;
Object symbol51;
Object methodclosure240;
Object localvariable112;
Object array108;
Object assign64;
Object method254;
Object symbol48;
Object methodclosure241;
Object classreference33;
Object symbol52;
Object smallint359;
Object constant496;
Object send687;
Object assign61;
Object smallint360;
Object constant497;
Object smallint361;
Object constant498;
Object send688;
Object smallint362;
Object constant499;
Object smallint363;
Object constant500;
Object send689;
Object symbol53;
Object smallint364;
Object constant501;
Object send692;
Object smallint365;
Object constant502;
Object send691;
Object send690;
Object smallint366;
Object constant503;
Object send695;
Object smallint367;
Object constant504;
Object send694;
Object send693;
Object localvariable113;
Object array109;
Object smallint368;
Object constant505;
Object send697;
Object smallint369;
Object constant506;
Object send698;
Object block70;
Object symbol54;
Object smallint370;
Object constant507;
Object send699;
Object send696;
Object send702;
Object smallint371;
Object constant508;
Object send701;
Object send700;
Object send705;
Object smallint372;
Object constant509;
Object send704;
Object send703;
Object send708;
Object smallint373;
Object constant510;
Object send707;
Object send706;
Object send711;
Object send713;
Object send715;
Object smallint374;
Object constant511;
Object send716;
Object send714;
Object send712;
Object send710;
Object smallint375;
Object constant512;
Object send717;
Object send709;
Object method248;
Object symbol43;
Object methodclosure242;
Object character46;
Object constant513;
Object method255;
Object symbol8;
Object methodclosure243;
Object localvariable114;
Object localvariable115;
Object localvariable116;
Object array110;
Object send719;
Object send718;
Object method256;
Object symbol35;
Object methodclosure244;
Object smallint376;
Object constant514;
Object smallint377;
Object constant515;
Object send720;
Object method257;
Object symbol16;
Object methodclosure245;
Object smallint378;
Object constant516;
Object method258;
Object symbol36;
Object methodclosure246;
Object character47;
Object constant517;
Object character48;
Object constant518;
Object send721;
Object method259;
Object symbol9;
Object methodclosure247;
Object string77;
Object constant519;
Object method260;
Object symbol17;
Object methodclosure248;
Object localvariable117;
Object array111;
Object symbol44;
Object objectlayout24;
Object instancevariable34;
Object instancevariable35;
Object instancevariable36;
Object class30;
Object method262;
Object methodclosure249;
Object method263;
Object methodclosure250;
Object localvariable118;
Object array112;
Object assign66;
Object method264;
Object methodclosure251;
Object localvariable119;
Object array113;
Object assign67;
Object method265;
Object methodclosure252;
Object method266;
Object methodclosure253;
Object localvariable120;
Object array114;
Object assign68;
Object method267;
Object methodclosure254;
Object classreference34;
Object symbol55;
Object send722;
Object assign65;
Object localvariable121;
Object array115;
Object smallint379;
Object constant520;
Object send724;
Object smallint380;
Object constant521;
Object send725;
Object block71;
Object smallint381;
Object constant522;
Object send726;
Object send723;
Object send729;
Object smallint382;
Object constant523;
Object send728;
Object send727;
Object send732;
Object smallint383;
Object constant524;
Object send731;
Object send730;
Object send735;
Object smallint384;
Object constant525;
Object send734;
Object send733;
Object send738;
Object send739;
Object send737;
Object send740;
Object send736;
Object method261;
Object symbol45;
Object methodclosure255;
Object smallint385;
Object constant526;
Object smallint386;
Object constant527;
Object send743;
Object smallint387;
Object constant528;
Object send742;
Object smallint388;
Object constant529;
Object send741;
Object method268;
Object symbol37;
Object methodclosure256;
Object string78;
Object constant530;
Object string79;
Object constant531;
Object send744;
Object method269;
Object symbol18;
Object methodclosure257;
Object localvariable122;
Object array116;
Object send745;
Object assign69;
Object localvariable123;
Object array117;
Object smallint389;
Object smallint390;
Object constant532;
Object send747;
Object constant533;
Object send748;
Object block72;
Object smallint391;
Object constant534;
Object send749;
Object send746;
Object send752;
Object smallint392;
Object constant535;
Object send751;
Object send750;
Object send755;
Object smallint393;
Object constant536;
Object send754;
Object send753;
Object send758;
Object smallint394;
Object constant537;
Object send757;
Object send756;
Object send761;
Object send762;
Object send760;
Object send763;
Object send759;
Object method270;
Object symbol46;
Object methodclosure258;
Object send764;
Object method271;
Object symbol38;
Object methodclosure259;
Object localvariable124;
Object array118;
Object smallint395;
Object constant538;
Object assign70;
Object method272;
Object symbol10;
Object methodclosure260;
Object classreference30;


void create_ast() {
symbol28 = (Object)new_Type_Symbol_cached(L"BridgeTest");
symbol33 = (Object)new_Type_Symbol_cached(L"ProtoObject");
class28 = (Object)new_Class(Nil, empty_object_layout);
((Type_Class)class28)->name = (Type_Symbol)symbol33;
symbol32 = (Object)new_Type_Symbol_cached(L"Object");
classreference31 = (Object)new_Organization_ClassReference((Type_Class)class27);
symbol34 = (Object)new_Type_Symbol_cached(L"ProtoObject");
classreference32 = (Object)new_Organization_ClassReference((Type_Class)class28);
symbol31 = (Object)new_Type_Symbol_cached(L"Object");
class27 = (Object)new_Class(class28, empty_object_layout);
((Type_Class)class27)->name = (Type_Symbol)symbol31;
symbol27 = (Object)new_Type_Symbol_cached(L"BridgeTest");
class26 = (Object)new_Class(class27, empty_object_layout);
((Type_Class)class26)->name = (Type_Symbol)symbol27;

// BridgeTest>>tmNumber
smallint345 = (Object)new_Type_SmallInt(1);
constant479 = (Object)new_AST_Constant(smallint345);
method235 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant479);
symbol11 = (Object)new_Type_Symbol_cached(L"tmNumber");
methodclosure223 = (Object)new_Runtime_MethodClosure(method235);
store_method((Type_Class)class26, (Type_Symbol)symbol11, (Runtime_MethodClosure)methodclosure223);

// BridgeTest>>tmMethodArgument:
localvariable108 = (Object)new_AST_Variable_named(L"arg");
array103 = (Object)new_Type_Array_with(1, localvariable108);
smallint346 = (Object)new_Type_SmallInt(1);
constant480 = (Object)new_AST_Constant(smallint346);
send675 = (Object)new_AST_Send((Object)localvariable108, (Object)SMB__plus, 1, constant480);
method236 = (Object)new_AST_Method_with((Type_Array)array103, (Type_Array)empty_Type_Array, 1, send675);
symbol39 = (Object)new_Type_Symbol_cached(L"tmMethodArgument:");
methodclosure224 = (Object)new_Runtime_MethodClosure(method236);
store_method((Type_Class)class26, (Type_Symbol)symbol39, (Runtime_MethodClosure)methodclosure224);

// BridgeTest>>tmSymbol
symbol19 = (Object)new_Type_Symbol_cached(L"Symbol");
constant481 = (Object)new_AST_Constant(symbol19);
method237 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant481);
symbol20 = (Object)new_Type_Symbol_cached(L"tmSymbol");
methodclosure225 = (Object)new_Runtime_MethodClosure(method237);
store_method((Type_Class)class26, (Type_Symbol)symbol20, (Runtime_MethodClosure)methodclosure225);

// BridgeTest>>tmNumberAdd
smallint347 = (Object)new_Type_SmallInt(1);
constant482 = (Object)new_AST_Constant(smallint347);
smallint348 = (Object)new_Type_SmallInt(1);
constant483 = (Object)new_AST_Constant(smallint348);
send676 = (Object)new_AST_Send((Object)constant482, (Object)SMB__plus, 1, constant483);
method238 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send676);
symbol12 = (Object)new_Type_Symbol_cached(L"tmNumberAdd");
methodclosure226 = (Object)new_Runtime_MethodClosure(method238);
store_method((Type_Class)class26, (Type_Symbol)symbol12, (Runtime_MethodClosure)methodclosure226);

// BridgeTest>>tmExtendedReturn
variable10 = (Object)new_AST_Variable_named(L"return");
array104 = (Object)new_Type_Array_with(1, variable10);
smallint349 = (Object)new_Type_SmallInt(1);
constant484 = (Object)new_AST_Constant(smallint349);
smallint350 = (Object)new_Type_SmallInt(2);
constant485 = (Object)new_AST_Constant(smallint350);
send679 = (Object)new_AST_Send((Object)constant484, (Object)SMB__gt, 1, constant485);
smallint351 = (Object)new_Type_SmallInt(1);
constant486 = (Object)new_AST_Constant(smallint351);
send680 = (Object)new_AST_Send((Object)variable10, (Object)SMB_escape_, 1, constant486);
block68 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 3, 1, send680);
smallint352 = (Object)new_Type_SmallInt(2);
constant487 = (Object)new_AST_Constant(smallint352);
send681 = (Object)new_AST_Send((Object)variable10, (Object)SMB_escape_, 1, constant487);
block69 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 3, 1, send681);
send678 = (Object)new_AST_Send((Object)send679, (Object)SMB_ifTrue_ifFalse_, 2, block68, block69);
block67 = (Object)new_AST_Block_with((Type_Array)array104, (Type_Array)empty_Type_Array, 2, 2, send678, Self);
send677 = (Object)new_AST_Send((Object)AST_Callec_Reference, (Object)SMB_on_, 1, block67);
method239 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send677);
symbol40 = (Object)new_Type_Symbol_cached(L"tmExtendedReturn");
methodclosure227 = (Object)new_Runtime_MethodClosure(method239);
store_method((Type_Class)class26, (Type_Symbol)symbol40, (Runtime_MethodClosure)methodclosure227);

// BridgeTest>>tmBooleanEquals
send682 = (Object)new_AST_Send((Object)True_Const, (Object)SMB__equal, 1, True_Const);
method240 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send682);
symbol5 = (Object)new_Type_Symbol_cached(L"tmBooleanEquals");
methodclosure228 = (Object)new_Runtime_MethodClosure(method240);
store_method((Type_Class)class26, (Type_Symbol)symbol5, (Runtime_MethodClosure)methodclosure228);

// BridgeTest>>tmSymbolEquals
constant488 = (Object)new_AST_Constant(symbol19);
constant489 = (Object)new_AST_Constant(symbol19);
send683 = (Object)new_AST_Send((Object)constant488, (Object)SMB__equal, 1, constant489);
method241 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send683);
symbol21 = (Object)new_Type_Symbol_cached(L"tmSymbolEquals");
methodclosure229 = (Object)new_Runtime_MethodClosure(method241);
store_method((Type_Class)class26, (Type_Symbol)symbol21, (Runtime_MethodClosure)methodclosure229);

// BridgeTest>>tmNumberDiv
smallint353 = (Object)new_Type_SmallInt(4);
constant490 = (Object)new_AST_Constant(smallint353);
smallint354 = (Object)new_Type_SmallInt(2);
constant491 = (Object)new_AST_Constant(smallint354);
send684 = (Object)new_AST_Send((Object)constant490, (Object)SMB__divide, 1, constant491);
method242 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send684);
symbol13 = (Object)new_Type_Symbol_cached(L"tmNumberDiv");
methodclosure230 = (Object)new_Runtime_MethodClosure(method242);
store_method((Type_Class)class26, (Type_Symbol)symbol13, (Runtime_MethodClosure)methodclosure230);

// BridgeTest>>tmFibonacci
method243 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, Self);
symbol41 = (Object)new_Type_Symbol_cached(L"tmFibonacci");
methodclosure231 = (Object)new_Runtime_MethodClosure(method243);
store_method((Type_Class)class26, (Type_Symbol)symbol41, (Runtime_MethodClosure)methodclosure231);

// BridgeTest>>tmBooleanFalse
method244 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, False_Const);
symbol6 = (Object)new_Type_Symbol_cached(L"tmBooleanFalse");
methodclosure232 = (Object)new_Runtime_MethodClosure(method244);
store_method((Type_Class)class26, (Type_Symbol)symbol6, (Runtime_MethodClosure)methodclosure232);

// BridgeTest>>tmNumberEquals
smallint355 = (Object)new_Type_SmallInt(1);
constant492 = (Object)new_AST_Constant(smallint355);
smallint356 = (Object)new_Type_SmallInt(1);
constant493 = (Object)new_AST_Constant(smallint356);
send685 = (Object)new_AST_Send((Object)constant492, (Object)SMB__equal, 1, constant493);
method245 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send685);
symbol14 = (Object)new_Type_Symbol_cached(L"tmNumberEquals");
methodclosure233 = (Object)new_Runtime_MethodClosure(method245);
store_method((Type_Class)class26, (Type_Symbol)symbol14, (Runtime_MethodClosure)methodclosure233);

// BridgeTest>>tmBooleanTrue
method246 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, True_Const);
symbol7 = (Object)new_Type_Symbol_cached(L"tmBooleanTrue");
methodclosure234 = (Object)new_Runtime_MethodClosure(method246);
store_method((Type_Class)class26, (Type_Symbol)symbol7, (Runtime_MethodClosure)methodclosure234);

// BridgeTest>>tmNumberMult
smallint357 = (Object)new_Type_SmallInt(2);
constant494 = (Object)new_AST_Constant(smallint357);
smallint358 = (Object)new_Type_SmallInt(3);
constant495 = (Object)new_AST_Constant(smallint358);
send686 = (Object)new_AST_Send((Object)constant494, (Object)SMB__times, 1, constant495);
method247 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send686);
symbol15 = (Object)new_Type_Symbol_cached(L"tmNumberMult");
methodclosure235 = (Object)new_Runtime_MethodClosure(method247);
store_method((Type_Class)class26, (Type_Symbol)symbol15, (Runtime_MethodClosure)methodclosure235);

// BridgeTest>>tmVariableInstanceCreationSized
localvariable109 = (Object)new_AST_Variable_named(L"instance");
array105 = (Object)new_Type_Array_with(1, localvariable109);
symbol42 = (Object)new_Type_Symbol_cached(L"StandardVariableTestClass");
arraylayout6 = (Object)create_type_with_vars(Type_ArrayLayout, 3);
instancevariable31 = (Object)new_AST_InstVariable(0, L"a");
((Type_Array)arraylayout6)->values[0] = instancevariable31;instancevariable32 = (Object)new_AST_InstVariable(1, L"b");
((Type_Array)arraylayout6)->values[1] = instancevariable32;instancevariable33 = (Object)new_AST_InstVariable(2, L"c");
((Type_Array)arraylayout6)->values[2] = instancevariable33;class29 = (Object)new_Class(class27, arraylayout6);
((Type_Class)class29)->name = (Type_Symbol)symbol42;

// StandardVariableTestClass>>c
method249 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable33);
symbol50 = (Object)new_Type_Symbol_cached(L"c");
methodclosure236 = (Object)new_Runtime_MethodClosure(method249);
store_method((Type_Class)class29, (Type_Symbol)symbol50, (Runtime_MethodClosure)methodclosure236);

// StandardVariableTestClass>>b
method250 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable32);
symbol47 = (Object)new_Type_Symbol_cached(L"b");
methodclosure237 = (Object)new_Runtime_MethodClosure(method250);
store_method((Type_Class)class29, (Type_Symbol)symbol47, (Runtime_MethodClosure)methodclosure237);

// StandardVariableTestClass>>c:
localvariable110 = (Object)new_AST_Variable_named(L"anObject");
array106 = (Object)new_Type_Array_with(1, localvariable110);
assign62 = (Object)new_AST_Assign((Object)instancevariable33, (Object)localvariable110);
method251 = (Object)new_AST_Method_with((Type_Array)array106, (Type_Array)empty_Type_Array, 2, assign62, Self);
symbol49 = (Object)new_Type_Symbol_cached(L"c:");
methodclosure238 = (Object)new_Runtime_MethodClosure(method251);
store_method((Type_Class)class29, (Type_Symbol)symbol49, (Runtime_MethodClosure)methodclosure238);

// StandardVariableTestClass>>a:
localvariable111 = (Object)new_AST_Variable_named(L"anObject");
array107 = (Object)new_Type_Array_with(1, localvariable111);
assign63 = (Object)new_AST_Assign((Object)instancevariable31, (Object)localvariable111);
method252 = (Object)new_AST_Method_with((Type_Array)array107, (Type_Array)empty_Type_Array, 2, assign63, Self);
symbol2 = (Object)new_Type_Symbol_cached(L"a:");
methodclosure239 = (Object)new_Runtime_MethodClosure(method252);
store_method((Type_Class)class29, (Type_Symbol)symbol2, (Runtime_MethodClosure)methodclosure239);

// StandardVariableTestClass>>a
method253 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable31);
symbol51 = (Object)new_Type_Symbol_cached(L"a");
methodclosure240 = (Object)new_Runtime_MethodClosure(method253);
store_method((Type_Class)class29, (Type_Symbol)symbol51, (Runtime_MethodClosure)methodclosure240);

// StandardVariableTestClass>>b:
localvariable112 = (Object)new_AST_Variable_named(L"anObject");
array108 = (Object)new_Type_Array_with(1, localvariable112);
assign64 = (Object)new_AST_Assign((Object)instancevariable32, (Object)localvariable112);
method254 = (Object)new_AST_Method_with((Type_Array)array108, (Type_Array)empty_Type_Array, 2, assign64, Self);
symbol48 = (Object)new_Type_Symbol_cached(L"b:");
methodclosure241 = (Object)new_Runtime_MethodClosure(method254);
store_method((Type_Class)class29, (Type_Symbol)symbol48, (Runtime_MethodClosure)methodclosure241);
classreference33 = (Object)new_Organization_ClassReference((Type_Class)class29);
symbol52 = (Object)new_Type_Symbol_cached(L"new:");
smallint359 = (Object)new_Type_SmallInt(100);
constant496 = (Object)new_AST_Constant(smallint359);
send687 = (Object)new_AST_Send((Object)classreference33, (Object)symbol52, 1, constant496);
assign61 = (Object)new_AST_Assign((Object)localvariable109, (Object)send687);
smallint360 = (Object)new_Type_SmallInt(1);
constant497 = (Object)new_AST_Constant(smallint360);
smallint361 = (Object)new_Type_SmallInt(1);
constant498 = (Object)new_AST_Constant(smallint361);
send688 = (Object)new_AST_Send((Object)localvariable109, (Object)SMB_at_put_, 2, constant497, constant498);
smallint362 = (Object)new_Type_SmallInt(100);
constant499 = (Object)new_AST_Constant(smallint362);
smallint363 = (Object)new_Type_SmallInt(100);
constant500 = (Object)new_AST_Constant(smallint363);
send689 = (Object)new_AST_Send((Object)localvariable109, (Object)SMB_at_put_, 2, constant499, constant500);
symbol53 = (Object)new_Type_Symbol_cached(L"assert:");
smallint364 = (Object)new_Type_SmallInt(1);
constant501 = (Object)new_AST_Constant(smallint364);
send692 = (Object)new_AST_Send((Object)localvariable109, (Object)SMB_at_, 1, constant501);
smallint365 = (Object)new_Type_SmallInt(1);
constant502 = (Object)new_AST_Constant(smallint365);
send691 = (Object)new_AST_Send((Object)send692, (Object)SMB__equal, 1, constant502);
send690 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send691);
smallint366 = (Object)new_Type_SmallInt(100);
constant503 = (Object)new_AST_Constant(smallint366);
send695 = (Object)new_AST_Send((Object)localvariable109, (Object)SMB_at_, 1, constant503);
smallint367 = (Object)new_Type_SmallInt(100);
constant504 = (Object)new_AST_Constant(smallint367);
send694 = (Object)new_AST_Send((Object)send695, (Object)SMB__equal, 1, constant504);
send693 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send694);
localvariable113 = (Object)new_AST_Variable_named(L"receiver");
array109 = (Object)new_Type_Array_with(1, localvariable113);
smallint368 = (Object)new_Type_SmallInt(2);
constant505 = (Object)new_AST_Constant(smallint368);
send697 = (Object)new_AST_Send((Object)localvariable113, (Object)symbol48, 1, constant505);
smallint369 = (Object)new_Type_SmallInt(3);
constant506 = (Object)new_AST_Constant(smallint369);
send698 = (Object)new_AST_Send((Object)localvariable113, (Object)symbol49, 1, constant506);
block70 = (Object)new_AST_Block_with((Type_Array)array109, (Type_Array)empty_Type_Array, 2, 2, send697, send698);
symbol54 = (Object)new_Type_Symbol_cached(L"nil");
smallint370 = (Object)new_Type_SmallInt(1);
constant507 = (Object)new_AST_Constant(smallint370);
send699 = (Object)new_AST_Send((Object)localvariable109, (Object)symbol2, 1, constant507);
send696 = (Object)new_AST_Send((Object)block70, (Object)symbol54, 1, send699);
send702 = (Object)new_AST_Send((Object)localvariable109, (Object)symbol51, 0);
smallint371 = (Object)new_Type_SmallInt(1);
constant508 = (Object)new_AST_Constant(smallint371);
send701 = (Object)new_AST_Send((Object)send702, (Object)SMB__equal, 1, constant508);
send700 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send701);
send705 = (Object)new_AST_Send((Object)localvariable109, (Object)symbol47, 0);
smallint372 = (Object)new_Type_SmallInt(2);
constant509 = (Object)new_AST_Constant(smallint372);
send704 = (Object)new_AST_Send((Object)send705, (Object)SMB__equal, 1, constant509);
send703 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send704);
send708 = (Object)new_AST_Send((Object)localvariable109, (Object)symbol50, 0);
smallint373 = (Object)new_Type_SmallInt(3);
constant510 = (Object)new_AST_Constant(smallint373);
send707 = (Object)new_AST_Send((Object)send708, (Object)SMB__equal, 1, constant510);
send706 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send707);
send711 = (Object)new_AST_Send((Object)localvariable109, (Object)symbol51, 0);
send713 = (Object)new_AST_Send((Object)localvariable109, (Object)symbol47, 0);
send715 = (Object)new_AST_Send((Object)localvariable109, (Object)symbol50, 0);
smallint374 = (Object)new_Type_SmallInt(1);
constant511 = (Object)new_AST_Constant(smallint374);
send716 = (Object)new_AST_Send((Object)localvariable109, (Object)SMB_at_, 1, constant511);
send714 = (Object)new_AST_Send((Object)send715, (Object)SMB__plus, 1, send716);
send712 = (Object)new_AST_Send((Object)send713, (Object)SMB__plus, 1, send714);
send710 = (Object)new_AST_Send((Object)send711, (Object)SMB__plus, 1, send712);
smallint375 = (Object)new_Type_SmallInt(100);
constant512 = (Object)new_AST_Constant(smallint375);
send717 = (Object)new_AST_Send((Object)localvariable109, (Object)SMB_at_, 1, constant512);
send709 = (Object)new_AST_Send((Object)send710, (Object)SMB__plus, 1, send717);
method248 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array105, 10, assign61, send688, send689, send690, send693, send696, send700, send703, send706, send709);
symbol43 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreationSized");
methodclosure242 = (Object)new_Runtime_MethodClosure(method248);
store_method((Type_Class)class29, (Type_Symbol)symbol43, (Runtime_MethodClosure)methodclosure242);

// StandardVariableTestClass>>tmCharacter
character46 = (Object)new_Type_Character(L'C');
constant513 = (Object)new_AST_Constant(character46);
method255 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant513);
symbol8 = (Object)new_Type_Symbol_cached(L"tmCharacter");
methodclosure243 = (Object)new_Runtime_MethodClosure(method255);
store_method((Type_Class)class29, (Type_Symbol)symbol8, (Runtime_MethodClosure)methodclosure243);

// StandardVariableTestClass>>tmMethodArguments:with:with:
localvariable114 = (Object)new_AST_Variable_named(L"arg1");
localvariable115 = (Object)new_AST_Variable_named(L"arg2");
localvariable116 = (Object)new_AST_Variable_named(L"arg3");
array110 = (Object)new_Type_Array_with(3, localvariable114, localvariable115, localvariable116);
send719 = (Object)new_AST_Send((Object)localvariable114, (Object)SMB__concat, 1, localvariable115);
send718 = (Object)new_AST_Send((Object)send719, (Object)SMB__concat, 1, localvariable116);
method256 = (Object)new_AST_Method_with((Type_Array)array110, (Type_Array)empty_Type_Array, 1, send718);
symbol35 = (Object)new_Type_Symbol_cached(L"tmMethodArguments:with:with:");
methodclosure244 = (Object)new_Runtime_MethodClosure(method256);
store_method((Type_Class)class29, (Type_Symbol)symbol35, (Runtime_MethodClosure)methodclosure244);

// StandardVariableTestClass>>tmNumberSubtract
smallint376 = (Object)new_Type_SmallInt(2);
constant514 = (Object)new_AST_Constant(smallint376);
smallint377 = (Object)new_Type_SmallInt(1);
constant515 = (Object)new_AST_Constant(smallint377);
send720 = (Object)new_AST_Send((Object)constant514, (Object)SMB__minus, 1, constant515);
method257 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send720);
symbol16 = (Object)new_Type_Symbol_cached(L"tmNumberSubtract");
methodclosure245 = (Object)new_Runtime_MethodClosure(method257);
store_method((Type_Class)class29, (Type_Symbol)symbol16, (Runtime_MethodClosure)methodclosure245);

// StandardVariableTestClass>>tmSimpleReturn
smallint378 = (Object)new_Type_SmallInt(1);
constant516 = (Object)new_AST_Constant(smallint378);
method258 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant516);
symbol36 = (Object)new_Type_Symbol_cached(L"tmSimpleReturn");
methodclosure246 = (Object)new_Runtime_MethodClosure(method258);
store_method((Type_Class)class29, (Type_Symbol)symbol36, (Runtime_MethodClosure)methodclosure246);

// StandardVariableTestClass>>tmCharacterEquals
character47 = (Object)new_Type_Character(L'C');
constant517 = (Object)new_AST_Constant(character47);
character48 = (Object)new_Type_Character(L'C');
constant518 = (Object)new_AST_Constant(character48);
send721 = (Object)new_AST_Send((Object)constant517, (Object)SMB__equal, 1, constant518);
method259 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send721);
symbol9 = (Object)new_Type_Symbol_cached(L"tmCharacterEquals");
methodclosure247 = (Object)new_Runtime_MethodClosure(method259);
store_method((Type_Class)class29, (Type_Symbol)symbol9, (Runtime_MethodClosure)methodclosure247);

// StandardVariableTestClass>>tmString
string77 = (Object)new_Type_String(L"String");
constant519 = (Object)new_AST_Constant(string77);
method260 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant519);
symbol17 = (Object)new_Type_Symbol_cached(L"tmString");
methodclosure248 = (Object)new_Runtime_MethodClosure(method260);
store_method((Type_Class)class29, (Type_Symbol)symbol17, (Runtime_MethodClosure)methodclosure248);

// StandardVariableTestClass>>tmSimpleInstanceCreation
localvariable117 = (Object)new_AST_Variable_named(L"instance");
array111 = (Object)new_Type_Array_with(1, localvariable117);
symbol44 = (Object)new_Type_Symbol_cached(L"StandardTestClass");
objectlayout24 = (Object)create_type_with_vars(Type_ObjectLayout, 3);
instancevariable34 = (Object)new_AST_InstVariable(0, L"a");
((Type_Array)objectlayout24)->values[0] = instancevariable34;
instancevariable35 = (Object)new_AST_InstVariable(1, L"b");
((Type_Array)objectlayout24)->values[1] = instancevariable35;
instancevariable36 = (Object)new_AST_InstVariable(2, L"c");
((Type_Array)objectlayout24)->values[2] = instancevariable36;
class30 = (Object)new_Class(class27, objectlayout24);
((Type_Class)class30)->name = (Type_Symbol)symbol44;

// StandardTestClass>>c
method262 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable36);
methodclosure249 = (Object)new_Runtime_MethodClosure(method262);
store_method((Type_Class)class30, (Type_Symbol)symbol50, (Runtime_MethodClosure)methodclosure249);

// StandardTestClass>>b
method263 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable35);
methodclosure250 = (Object)new_Runtime_MethodClosure(method263);
store_method((Type_Class)class30, (Type_Symbol)symbol47, (Runtime_MethodClosure)methodclosure250);

// StandardTestClass>>c:
localvariable118 = (Object)new_AST_Variable_named(L"anObject");
array112 = (Object)new_Type_Array_with(1, localvariable118);
assign66 = (Object)new_AST_Assign((Object)instancevariable36, (Object)localvariable118);
method264 = (Object)new_AST_Method_with((Type_Array)array112, (Type_Array)empty_Type_Array, 2, assign66, Self);
methodclosure251 = (Object)new_Runtime_MethodClosure(method264);
store_method((Type_Class)class30, (Type_Symbol)symbol49, (Runtime_MethodClosure)methodclosure251);

// StandardTestClass>>a:
localvariable119 = (Object)new_AST_Variable_named(L"anObject");
array113 = (Object)new_Type_Array_with(1, localvariable119);
assign67 = (Object)new_AST_Assign((Object)instancevariable34, (Object)localvariable119);
method265 = (Object)new_AST_Method_with((Type_Array)array113, (Type_Array)empty_Type_Array, 2, assign67, Self);
methodclosure252 = (Object)new_Runtime_MethodClosure(method265);
store_method((Type_Class)class30, (Type_Symbol)symbol2, (Runtime_MethodClosure)methodclosure252);

// StandardTestClass>>a
method266 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable34);
methodclosure253 = (Object)new_Runtime_MethodClosure(method266);
store_method((Type_Class)class30, (Type_Symbol)symbol51, (Runtime_MethodClosure)methodclosure253);

// StandardTestClass>>b:
localvariable120 = (Object)new_AST_Variable_named(L"anObject");
array114 = (Object)new_Type_Array_with(1, localvariable120);
assign68 = (Object)new_AST_Assign((Object)instancevariable35, (Object)localvariable120);
method267 = (Object)new_AST_Method_with((Type_Array)array114, (Type_Array)empty_Type_Array, 2, assign68, Self);
methodclosure254 = (Object)new_Runtime_MethodClosure(method267);
store_method((Type_Class)class30, (Type_Symbol)symbol48, (Runtime_MethodClosure)methodclosure254);
classreference34 = (Object)new_Organization_ClassReference((Type_Class)class30);
symbol55 = (Object)new_Type_Symbol_cached(L"new");
send722 = (Object)new_AST_Send((Object)classreference34, (Object)symbol55, 0);
assign65 = (Object)new_AST_Assign((Object)localvariable117, (Object)send722);
localvariable121 = (Object)new_AST_Variable_named(L"receiver");
array115 = (Object)new_Type_Array_with(1, localvariable121);
smallint379 = (Object)new_Type_SmallInt(2);
constant520 = (Object)new_AST_Constant(smallint379);
send724 = (Object)new_AST_Send((Object)localvariable121, (Object)symbol48, 1, constant520);
smallint380 = (Object)new_Type_SmallInt(3);
constant521 = (Object)new_AST_Constant(smallint380);
send725 = (Object)new_AST_Send((Object)localvariable121, (Object)symbol49, 1, constant521);
block71 = (Object)new_AST_Block_with((Type_Array)array115, (Type_Array)empty_Type_Array, 2, 2, send724, send725);
smallint381 = (Object)new_Type_SmallInt(1);
constant522 = (Object)new_AST_Constant(smallint381);
send726 = (Object)new_AST_Send((Object)localvariable117, (Object)symbol2, 1, constant522);
send723 = (Object)new_AST_Send((Object)block71, (Object)symbol54, 1, send726);
send729 = (Object)new_AST_Send((Object)localvariable117, (Object)symbol51, 0);
smallint382 = (Object)new_Type_SmallInt(1);
constant523 = (Object)new_AST_Constant(smallint382);
send728 = (Object)new_AST_Send((Object)send729, (Object)SMB__equal, 1, constant523);
send727 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send728);
send732 = (Object)new_AST_Send((Object)localvariable117, (Object)symbol47, 0);
smallint383 = (Object)new_Type_SmallInt(2);
constant524 = (Object)new_AST_Constant(smallint383);
send731 = (Object)new_AST_Send((Object)send732, (Object)SMB__equal, 1, constant524);
send730 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send731);
send735 = (Object)new_AST_Send((Object)localvariable117, (Object)symbol50, 0);
smallint384 = (Object)new_Type_SmallInt(3);
constant525 = (Object)new_AST_Constant(smallint384);
send734 = (Object)new_AST_Send((Object)send735, (Object)SMB__equal, 1, constant525);
send733 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send734);
send738 = (Object)new_AST_Send((Object)localvariable117, (Object)symbol51, 0);
send739 = (Object)new_AST_Send((Object)localvariable117, (Object)symbol47, 0);
send737 = (Object)new_AST_Send((Object)send738, (Object)SMB__plus, 1, send739);
send740 = (Object)new_AST_Send((Object)localvariable117, (Object)symbol50, 0);
send736 = (Object)new_AST_Send((Object)send737, (Object)SMB__plus, 1, send740);
method261 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array111, 6, assign65, send723, send727, send730, send733, send736);
symbol45 = (Object)new_Type_Symbol_cached(L"tmSimpleInstanceCreation");
methodclosure255 = (Object)new_Runtime_MethodClosure(method261);
store_method((Type_Class)class30, (Type_Symbol)symbol45, (Runtime_MethodClosure)methodclosure255);

// StandardTestClass>>tmSimpleBasicArithmetik
smallint385 = (Object)new_Type_SmallInt(1);
constant526 = (Object)new_AST_Constant(smallint385);
smallint386 = (Object)new_Type_SmallInt(2);
constant527 = (Object)new_AST_Constant(smallint386);
send743 = (Object)new_AST_Send((Object)constant526, (Object)SMB__plus, 1, constant527);
smallint387 = (Object)new_Type_SmallInt(2);
constant528 = (Object)new_AST_Constant(smallint387);
send742 = (Object)new_AST_Send((Object)send743, (Object)SMB__plus, 1, constant528);
smallint388 = (Object)new_Type_SmallInt(5);
constant529 = (Object)new_AST_Constant(smallint388);
send741 = (Object)new_AST_Send((Object)send742, (Object)SMB__times, 1, constant529);
method268 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send741);
symbol37 = (Object)new_Type_Symbol_cached(L"tmSimpleBasicArithmetik");
methodclosure256 = (Object)new_Runtime_MethodClosure(method268);
store_method((Type_Class)class30, (Type_Symbol)symbol37, (Runtime_MethodClosure)methodclosure256);

// StandardTestClass>>tmStringEquals
string78 = (Object)new_Type_String(L"String");
constant530 = (Object)new_AST_Constant(string78);
string79 = (Object)new_Type_String(L"String");
constant531 = (Object)new_AST_Constant(string79);
send744 = (Object)new_AST_Send((Object)constant530, (Object)SMB__equal, 1, constant531);
method269 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send744);
symbol18 = (Object)new_Type_Symbol_cached(L"tmStringEquals");
methodclosure257 = (Object)new_Runtime_MethodClosure(method269);
store_method((Type_Class)class30, (Type_Symbol)symbol18, (Runtime_MethodClosure)methodclosure257);

// StandardTestClass>>tmVariableInstanceCreation
localvariable122 = (Object)new_AST_Variable_named(L"instance");
array116 = (Object)new_Type_Array_with(1, localvariable122);
send745 = (Object)new_AST_Send((Object)classreference33, (Object)symbol55, 0);
assign69 = (Object)new_AST_Assign((Object)localvariable122, (Object)send745);
localvariable123 = (Object)new_AST_Variable_named(L"receiver");
array117 = (Object)new_Type_Array_with(1, localvariable123);
smallint389 = (Object)new_Type_SmallInt(2);
smallint390 = (Object)new_Type_SmallInt(2);
constant532 = (Object)new_AST_Constant(smallint389);
send747 = (Object)new_AST_Send((Object)localvariable123, (Object)symbol48, 1, constant532);
constant533 = (Object)new_AST_Constant(smallint390);
send748 = (Object)new_AST_Send((Object)localvariable123, (Object)symbol49, 1, constant533);
block72 = (Object)new_AST_Block_with((Type_Array)array117, (Type_Array)empty_Type_Array, 2, 2, send747, send748);
smallint391 = (Object)new_Type_SmallInt(1);
constant534 = (Object)new_AST_Constant(smallint391);
send749 = (Object)new_AST_Send((Object)localvariable122, (Object)symbol2, 1, constant534);
send746 = (Object)new_AST_Send((Object)block72, (Object)symbol54, 1, send749);
send752 = (Object)new_AST_Send((Object)localvariable122, (Object)symbol51, 0);
smallint392 = (Object)new_Type_SmallInt(1);
constant535 = (Object)new_AST_Constant(smallint392);
send751 = (Object)new_AST_Send((Object)send752, (Object)SMB__equal, 1, constant535);
send750 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send751);
send755 = (Object)new_AST_Send((Object)localvariable122, (Object)symbol47, 0);
smallint393 = (Object)new_Type_SmallInt(2);
constant536 = (Object)new_AST_Constant(smallint393);
send754 = (Object)new_AST_Send((Object)send755, (Object)SMB__equal, 1, constant536);
send753 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send754);
send758 = (Object)new_AST_Send((Object)localvariable122, (Object)symbol50, 0);
smallint394 = (Object)new_Type_SmallInt(3);
constant537 = (Object)new_AST_Constant(smallint394);
send757 = (Object)new_AST_Send((Object)send758, (Object)SMB__equal, 1, constant537);
send756 = (Object)new_AST_Send((Object)Self, (Object)symbol53, 1, send757);
send761 = (Object)new_AST_Send((Object)localvariable122, (Object)symbol51, 0);
send762 = (Object)new_AST_Send((Object)localvariable122, (Object)symbol47, 0);
send760 = (Object)new_AST_Send((Object)send761, (Object)SMB__plus, 1, send762);
send763 = (Object)new_AST_Send((Object)localvariable122, (Object)symbol50, 0);
send759 = (Object)new_AST_Send((Object)send760, (Object)SMB__plus, 1, send763);
method270 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array116, 6, assign69, send746, send750, send753, send756, send759);
symbol46 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreation");
methodclosure258 = (Object)new_Runtime_MethodClosure(method270);
store_method((Type_Class)class30, (Type_Symbol)symbol46, (Runtime_MethodClosure)methodclosure258);

// StandardTestClass>>tmClassReferenceReturn
send764 = (Object)new_AST_Send((Object)Metaclass_Reference, (Object)SMB_name, 0);
method271 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send764);
symbol38 = (Object)new_Type_Symbol_cached(L"tmClassReferenceReturn");
methodclosure259 = (Object)new_Runtime_MethodClosure(method271);
store_method((Type_Class)class30, (Type_Symbol)symbol38, (Runtime_MethodClosure)methodclosure259);

// StandardTestClass>>tmLocalVariable
localvariable124 = (Object)new_AST_Variable_named(L"a");
array118 = (Object)new_Type_Array_with(1, localvariable124);
smallint395 = (Object)new_Type_SmallInt(1);
constant538 = (Object)new_AST_Constant(smallint395);
assign70 = (Object)new_AST_Assign((Object)localvariable124, (Object)constant538);
method272 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array118, 2, assign70, localvariable124);
symbol10 = (Object)new_Type_Symbol_cached(L"tmLocalVariable");
methodclosure260 = (Object)new_Runtime_MethodClosure(method272);
store_method((Type_Class)class30, (Type_Symbol)symbol10, (Runtime_MethodClosure)methodclosure260);
classreference30 = (Object)new_Organization_ClassReference((Type_Class)class26);
}


/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanEquals)
/*
tmBooleanEquals
	^ true = true
*/
Object symbol5 = (Object)new_Type_Symbol_cached(L"tmBooleanEquals");
Object send765 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol5, 0);
Object result = (Object)Eval((Object)send765);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanFalse)
/*
tmBooleanFalse
	^ false
*/
Object symbol6 = (Object)new_Type_Symbol_cached(L"tmBooleanFalse");
Object send766 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol6, 0);
Object result = (Object)Eval((Object)send766);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanTrue)
/*
tmBooleanTrue
	^ true
*/
Object symbol7 = (Object)new_Type_Symbol_cached(L"tmBooleanTrue");
Object send767 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol7, 0);
Object result = (Object)Eval((Object)send767);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacter)
/*
tmCharacter
	^ $C
*/
Object symbol8 = (Object)new_Type_Symbol_cached(L"tmCharacter");
Object send768 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol8, 0);
Object result = (Object)Eval((Object)send768);
ASSERT_EMPTY_STACK
assert0(((Type_Character)result)->value == 'C');
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacterEquals)
/*
tmCharacterEquals
	^ $C = $C
*/
Object symbol9 = (Object)new_Type_Symbol_cached(L"tmCharacterEquals");
Object send769 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol9, 0);
Object result = (Object)Eval((Object)send769);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmClassReferenceReturn)
/*
tmClassReferenceReturn
	^ Metaclass name.
*/
Object symbol38 = (Object)new_Type_Symbol_cached(L"tmClassReferenceReturn");
Object send770 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol38, 0);
Object result = (Object)Eval((Object)send770);
ASSERT_EMPTY_STACK
Object symbol56 = (Object)new_Type_Symbol_cached(L"Metaclass");
result = Eval_Send1(result, SMB__equal, symbol56);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmExtendedReturn)
/*
tmExtendedReturn
	1 > 2 ifTrue: [ ^ 1 ]
		ifFalse: [ ^ 2].
*/
Object symbol40 = (Object)new_Type_Symbol_cached(L"tmExtendedReturn");
Object send771 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol40, 0);
Object result = (Object)Eval((Object)send771);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmLocalVariable)
/*
tmLocalVariable
	|a|
	a := 1.
	^ a
*/
Object symbol10 = (Object)new_Type_Symbol_cached(L"tmLocalVariable");
Object send772 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol10, 0);
Object result = (Object)Eval((Object)send772);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArgument_)
/*
tmMethodArgument: arg 
	<arg1: 1>
	^ arg + 1
*/
Object symbol39 = (Object)new_Type_Symbol_cached(L"tmMethodArgument:");
Object smallint396 = (Object)new_Type_SmallInt(1);
Object constant539 = (Object)new_AST_Constant(smallint396);
Object send773 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol39, 1, constant539);
Object result = (Object)Eval((Object)send773);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArguments_with_with_)
/*
tmMethodArguments: arg1 with: arg2 with: arg3 
	<arg1: 'asdf' arg2: 'asdf' arg3: 'df'>
	^ arg1 , arg2 , arg3
*/
Object symbol35 = (Object)new_Type_Symbol_cached(L"tmMethodArguments:with:with:");
Object string80 = (Object)new_Type_String(L"asdf");
Object constant540 = (Object)new_AST_Constant(string80);
Object string81 = (Object)new_Type_String(L"asdf");
Object constant541 = (Object)new_AST_Constant(string81);
Object string82 = (Object)new_Type_String(L"df");
Object constant542 = (Object)new_AST_Constant(string82);
Object send774 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol35, 3, constant540, constant541, constant542);
Object result = (Object)Eval((Object)send774);
ASSERT_EMPTY_STACK
Object string83 = (Object)new_Type_String(L"asdfasdfdf");
result = Eval_Send1(result, SMB__equal, string83);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumber)
/*
tmNumber
	^ 1
*/
Object symbol11 = (Object)new_Type_Symbol_cached(L"tmNumber");
Object send775 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol11, 0);
Object result = (Object)Eval((Object)send775);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberAdd)
/*
tmNumberAdd
	^ 1 + 1
*/
Object symbol12 = (Object)new_Type_Symbol_cached(L"tmNumberAdd");
Object send776 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol12, 0);
Object result = (Object)Eval((Object)send776);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberDiv)
/*
tmNumberDiv
	^ 4 / 2
*/
Object symbol13 = (Object)new_Type_Symbol_cached(L"tmNumberDiv");
Object send777 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol13, 0);
Object result = (Object)Eval((Object)send777);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberEquals)
/*
tmNumberEquals
	^ 1 = 1
*/
Object symbol14 = (Object)new_Type_Symbol_cached(L"tmNumberEquals");
Object send778 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol14, 0);
Object result = (Object)Eval((Object)send778);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberMult)
/*
tmNumberMult
	^ 2 * 3
*/
Object symbol15 = (Object)new_Type_Symbol_cached(L"tmNumberMult");
Object send779 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol15, 0);
Object result = (Object)Eval((Object)send779);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberSubtract)
/*
tmNumberSubtract
	^ 2 - 1
*/
Object symbol16 = (Object)new_Type_Symbol_cached(L"tmNumberSubtract");
Object send780 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol16, 0);
Object result = (Object)Eval((Object)send780);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleBasicArithmetik)
/*
tmSimpleBasicArithmetik
	^ (1 + 2) + 2 * 5
*/
Object symbol37 = (Object)new_Type_Symbol_cached(L"tmSimpleBasicArithmetik");
Object send781 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol37, 0);
Object result = (Object)Eval((Object)send781);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 25);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleReturn)
/*
tmSimpleReturn
	^ 1
*/
Object symbol36 = (Object)new_Type_Symbol_cached(L"tmSimpleReturn");
Object send782 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol36, 0);
Object result = (Object)Eval((Object)send782);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmString)
/*
tmString
	^ 'String'
*/
Object symbol17 = (Object)new_Type_Symbol_cached(L"tmString");
Object send783 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol17, 0);
Object result = (Object)Eval((Object)send783);
ASSERT_EMPTY_STACK
Object string84 = (Object)new_Type_String(L"String");
result = Eval_Send1(result, SMB__equal, string84);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmStringEquals)
/*
tmStringEquals
	^ 'String' = 'String'
*/
Object symbol18 = (Object)new_Type_Symbol_cached(L"tmStringEquals");
Object send784 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol18, 0);
Object result = (Object)Eval((Object)send784);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbol)
/*
tmSymbol
	^ #Symbol
*/
Object symbol20 = (Object)new_Type_Symbol_cached(L"tmSymbol");
Object send785 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol20, 0);
Object result = (Object)Eval((Object)send785);
ASSERT_EMPTY_STACK
Object symbol19 = (Object)new_Type_Symbol_cached(L"Symbol");
result = Eval_Send1(result, SMB__equal, symbol19);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbolEquals)
/*
tmSymbolEquals
	^ #Symbol = #Symbol
*/
Object symbol21 = (Object)new_Type_Symbol_cached(L"tmSymbolEquals");
Object send786 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol21, 0);
Object result = (Object)Eval((Object)send786);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

TEST_SUITE(AutoGenTest,
{
    create_ast();
    Test_Class = new_Class_named((Object)Type_Object_Class, L"Test_Object", Type_Object_Class->type);
    test_Class_Instance = (Object)new_AST_Constant((Object)instantiate((Type_Class)Test_Class));

    RUN_TEST(AutoGenTest_tmSimpleReturn);
    RUN_TEST(AutoGenTest_tmNumberMult);
    RUN_TEST(AutoGenTest_tmSymbol);
    RUN_TEST(AutoGenTest_tmNumber);
    RUN_TEST(AutoGenTest_tmBooleanFalse);
    RUN_TEST(AutoGenTest_tmString);
    RUN_TEST(AutoGenTest_tmLocalVariable);
    RUN_TEST(AutoGenTest_tmMethodArgument_);
    RUN_TEST(AutoGenTest_tmNumberEquals);
    RUN_TEST(AutoGenTest_tmClassReferenceReturn);
    RUN_TEST(AutoGenTest_tmCharacterEquals);
    RUN_TEST(AutoGenTest_tmCharacter);
    RUN_TEST(AutoGenTest_tmBooleanTrue);
    RUN_TEST(AutoGenTest_tmNumberSubtract);
    RUN_TEST(AutoGenTest_tmNumberAdd);
    RUN_TEST(AutoGenTest_tmBooleanEquals);
    RUN_TEST(AutoGenTest_tmMethodArguments_with_with_);
    RUN_TEST(AutoGenTest_tmSimpleBasicArithmetik);
    RUN_TEST(AutoGenTest_tmStringEquals);
    RUN_TEST(AutoGenTest_tmSymbolEquals);
    RUN_TEST(AutoGenTest_tmNumberDiv);
    RUN_TEST(AutoGenTest_tmExtendedReturn);
})
