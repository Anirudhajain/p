// Auto generated Tests from PinocchioCDumperTest

// Test Object to put test methods in
Type_Class Test_Class;
Object test_Class_Instance;
// Test Method symbol
Type_Symbol SMB_runTestCase;


/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanEquals)
/*
tmBooleanEquals
	^ true = true
*/
Object send1008 = (Object)new_AST_Send((Object)True_Const, (Object)SMB__equal, 1, True_Const);
Object symbol93 = (Object)new_Type_Symbol_cached(L"tmBooleanEquals");

// nil>>tmBooleanEquals
Object method432 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send1008);
Object methodclosure340 = (Object)new_Runtime_MethodClosure(method432);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol93, (Runtime_MethodClosure)methodclosure340);

Object send1009 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol93, 0);
Object result = (Object)Eval((Object)send1009);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanFalse)
/*
tmBooleanFalse
	^ false
*/
Object symbol94 = (Object)new_Type_Symbol_cached(L"tmBooleanFalse");

// nil>>tmBooleanFalse
Object method433 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, False_Const);
Object methodclosure341 = (Object)new_Runtime_MethodClosure(method433);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol94, (Runtime_MethodClosure)methodclosure341);

Object send1010 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol94, 0);
Object result = (Object)Eval((Object)send1010);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanTrue)
/*
tmBooleanTrue
	^ true
*/
Object symbol95 = (Object)new_Type_Symbol_cached(L"tmBooleanTrue");

// nil>>tmBooleanTrue
Object method434 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, True_Const);
Object methodclosure342 = (Object)new_Runtime_MethodClosure(method434);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol95, (Runtime_MethodClosure)methodclosure342);

Object send1011 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol95, 0);
Object result = (Object)Eval((Object)send1011);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacter)
/*
tmCharacter
	^ $C
*/
Object character304 = (Object)new_Type_Character(L'C');
Object constant1524 = (Object)new_AST_Constant(character304);
Object symbol96 = (Object)new_Type_Symbol_cached(L"tmCharacter");

// nil>>tmCharacter
Object method435 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant1524);
Object methodclosure343 = (Object)new_Runtime_MethodClosure(method435);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol96, (Runtime_MethodClosure)methodclosure343);

Object send1012 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol96, 0);
Object result = (Object)Eval((Object)send1012);
ASSERT_EMPTY_STACK
assert0(((Type_Character)result)->value == 'C');
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacterEquals)
/*
tmCharacterEquals
	^ $C = $C
*/
Object character305 = (Object)new_Type_Character(L'C');
Object constant1525 = (Object)new_AST_Constant(character305);
Object character306 = (Object)new_Type_Character(L'C');
Object constant1526 = (Object)new_AST_Constant(character306);
Object send1013 = (Object)new_AST_Send((Object)constant1525, (Object)SMB__equal, 1, constant1526);
Object symbol97 = (Object)new_Type_Symbol_cached(L"tmCharacterEquals");

// nil>>tmCharacterEquals
Object method436 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send1013);
Object methodclosure344 = (Object)new_Runtime_MethodClosure(method436);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol97, (Runtime_MethodClosure)methodclosure344);

Object send1014 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol97, 0);
Object result = (Object)Eval((Object)send1014);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmLocalVariable)
/*
tmLocalVariable
	|a|
	^ a
*/
Object localvariable276 = (Object)new_AST_Variable_named(L"a");
Object symbol98 = (Object)new_Type_Symbol_cached(L"tmLocalVariable");

// nil>>tmLocalVariable
Object array284 = (Object)new_Type_Array_with(1, localvariable276);
Object method437 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array284, 1, localvariable276);
Object methodclosure345 = (Object)new_Runtime_MethodClosure(method437);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol98, (Runtime_MethodClosure)methodclosure345);

Object send1015 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol98, 0);
Object result = (Object)Eval((Object)send1015);
ASSERT_EMPTY_STACK
assert0(result == Nil);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmLocalVariableAssignment)
/*
tmLocalVariableAssignment
	|a|
	a := 1.
	^ a
*/
Object localvariable277 = (Object)new_AST_Variable_named(L"a");
Object smallint750 = (Object)new_Type_SmallInt(1);
Object constant1527 = (Object)new_AST_Constant(smallint750);
Object assign55 = (Object)new_AST_Assign((Object)localvariable277, (Object)constant1527);
Object symbol99 = (Object)new_Type_Symbol_cached(L"tmLocalVariableAssignment");

// nil>>tmLocalVariableAssignment
Object array285 = (Object)new_Type_Array_with(1, localvariable277);
Object method438 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array285, 2, assign55, localvariable277);
Object methodclosure346 = (Object)new_Runtime_MethodClosure(method438);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol99, (Runtime_MethodClosure)methodclosure346);

Object send1016 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol99, 0);
Object result = (Object)Eval((Object)send1016);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmLocalVariableAssignments)
/*
tmLocalVariableAssignments
	|a b c d e f g|
	d := 6.
	^ d
*/
Object localvariable278 = (Object)new_AST_Variable_named(L"d");
Object smallint751 = (Object)new_Type_SmallInt(6);
Object constant1528 = (Object)new_AST_Constant(smallint751);
Object assign56 = (Object)new_AST_Assign((Object)localvariable278, (Object)constant1528);
Object symbol100 = (Object)new_Type_Symbol_cached(L"tmLocalVariableAssignments");

// nil>>tmLocalVariableAssignments
Object localvariable279 = (Object)new_AST_Variable_named(L"a");
Object localvariable280 = (Object)new_AST_Variable_named(L"b");
Object localvariable281 = (Object)new_AST_Variable_named(L"c");
Object localvariable282 = (Object)new_AST_Variable_named(L"e");
Object localvariable283 = (Object)new_AST_Variable_named(L"f");
Object localvariable284 = (Object)new_AST_Variable_named(L"g");
Object array286 = (Object)new_Type_Array_with(7, localvariable279, localvariable280, localvariable281, localvariable278, localvariable282, localvariable283, localvariable284);
Object method439 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array286, 2, assign56, localvariable278);
Object methodclosure347 = (Object)new_Runtime_MethodClosure(method439);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol100, (Runtime_MethodClosure)methodclosure347);

Object send1017 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol100, 0);
Object result = (Object)Eval((Object)send1017);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmLocalVariables)
/*
tmLocalVariables
	|a b c d e f g|
	^ c
*/
Object localvariable285 = (Object)new_AST_Variable_named(L"c");
Object symbol101 = (Object)new_Type_Symbol_cached(L"tmLocalVariables");

// nil>>tmLocalVariables
Object localvariable286 = (Object)new_AST_Variable_named(L"a");
Object localvariable287 = (Object)new_AST_Variable_named(L"b");
Object localvariable288 = (Object)new_AST_Variable_named(L"d");
Object localvariable289 = (Object)new_AST_Variable_named(L"e");
Object localvariable290 = (Object)new_AST_Variable_named(L"f");
Object localvariable291 = (Object)new_AST_Variable_named(L"g");
Object array287 = (Object)new_Type_Array_with(7, localvariable286, localvariable287, localvariable285, localvariable288, localvariable289, localvariable290, localvariable291);
Object method440 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array287, 1, localvariable285);
Object methodclosure348 = (Object)new_Runtime_MethodClosure(method440);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol101, (Runtime_MethodClosure)methodclosure348);

Object send1018 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol101, 0);
Object result = (Object)Eval((Object)send1018);
ASSERT_EMPTY_STACK
assert0(result == Nil);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumber)
/*
tmNumber
	^ 1
*/
Object smallint752 = (Object)new_Type_SmallInt(1);
Object constant1529 = (Object)new_AST_Constant(smallint752);
Object symbol102 = (Object)new_Type_Symbol_cached(L"tmNumber");

// nil>>tmNumber
Object method441 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant1529);
Object methodclosure349 = (Object)new_Runtime_MethodClosure(method441);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol102, (Runtime_MethodClosure)methodclosure349);

Object send1019 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol102, 0);
Object result = (Object)Eval((Object)send1019);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberAdd)
/*
tmNumberAdd
	^ 1 + 1
*/
Object smallint753 = (Object)new_Type_SmallInt(1);
Object constant1530 = (Object)new_AST_Constant(smallint753);
Object smallint754 = (Object)new_Type_SmallInt(1);
Object constant1531 = (Object)new_AST_Constant(smallint754);
Object send1020 = (Object)new_AST_Send((Object)constant1530, (Object)SMB__plus, 1, constant1531);
Object symbol103 = (Object)new_Type_Symbol_cached(L"tmNumberAdd");

// nil>>tmNumberAdd
Object method442 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send1020);
Object methodclosure350 = (Object)new_Runtime_MethodClosure(method442);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol103, (Runtime_MethodClosure)methodclosure350);

Object send1021 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol103, 0);
Object result = (Object)Eval((Object)send1021);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberDiv)
/*
tmNumberDiv
	^ 4 / 2
*/
Object smallint755 = (Object)new_Type_SmallInt(4);
Object constant1532 = (Object)new_AST_Constant(smallint755);
Object smallint756 = (Object)new_Type_SmallInt(2);
Object constant1533 = (Object)new_AST_Constant(smallint756);
Object send1022 = (Object)new_AST_Send((Object)constant1532, (Object)SMB__divide, 1, constant1533);
Object symbol104 = (Object)new_Type_Symbol_cached(L"tmNumberDiv");

// nil>>tmNumberDiv
Object method443 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send1022);
Object methodclosure351 = (Object)new_Runtime_MethodClosure(method443);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol104, (Runtime_MethodClosure)methodclosure351);

Object send1023 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol104, 0);
Object result = (Object)Eval((Object)send1023);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberEquals)
/*
tmNumberEquals
	^ 1 = 1
*/
Object smallint757 = (Object)new_Type_SmallInt(1);
Object constant1534 = (Object)new_AST_Constant(smallint757);
Object smallint758 = (Object)new_Type_SmallInt(1);
Object constant1535 = (Object)new_AST_Constant(smallint758);
Object send1024 = (Object)new_AST_Send((Object)constant1534, (Object)SMB__equal, 1, constant1535);
Object symbol105 = (Object)new_Type_Symbol_cached(L"tmNumberEquals");

// nil>>tmNumberEquals
Object method444 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send1024);
Object methodclosure352 = (Object)new_Runtime_MethodClosure(method444);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol105, (Runtime_MethodClosure)methodclosure352);

Object send1025 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol105, 0);
Object result = (Object)Eval((Object)send1025);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberMult)
/*
tmNumberMult
	^ 2 * 3
*/
Object smallint759 = (Object)new_Type_SmallInt(2);
Object constant1536 = (Object)new_AST_Constant(smallint759);
Object smallint760 = (Object)new_Type_SmallInt(3);
Object constant1537 = (Object)new_AST_Constant(smallint760);
Object send1026 = (Object)new_AST_Send((Object)constant1536, (Object)SMB__times, 1, constant1537);
Object symbol106 = (Object)new_Type_Symbol_cached(L"tmNumberMult");

// nil>>tmNumberMult
Object method445 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send1026);
Object methodclosure353 = (Object)new_Runtime_MethodClosure(method445);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol106, (Runtime_MethodClosure)methodclosure353);

Object send1027 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol106, 0);
Object result = (Object)Eval((Object)send1027);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberSubtract)
/*
tmNumberSubtract
	^ 2 - 1
*/
Object smallint761 = (Object)new_Type_SmallInt(2);
Object constant1538 = (Object)new_AST_Constant(smallint761);
Object smallint762 = (Object)new_Type_SmallInt(1);
Object constant1539 = (Object)new_AST_Constant(smallint762);
Object send1028 = (Object)new_AST_Send((Object)constant1538, (Object)SMB__minus, 1, constant1539);
Object symbol107 = (Object)new_Type_Symbol_cached(L"tmNumberSubtract");

// nil>>tmNumberSubtract
Object method446 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send1028);
Object methodclosure354 = (Object)new_Runtime_MethodClosure(method446);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol107, (Runtime_MethodClosure)methodclosure354);

Object send1029 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol107, 0);
Object result = (Object)Eval((Object)send1029);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmString)
/*
tmString
	^ 'String'
*/
Object string407 = (Object)new_Type_String(L"String");
Object constant1540 = (Object)new_AST_Constant(string407);
Object symbol108 = (Object)new_Type_Symbol_cached(L"tmString");

// nil>>tmString
Object method447 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant1540);
Object methodclosure355 = (Object)new_Runtime_MethodClosure(method447);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol108, (Runtime_MethodClosure)methodclosure355);

Object send1030 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol108, 0);
Object result = (Object)Eval((Object)send1030);
ASSERT_EMPTY_STACK
Object string408 = (Object)new_Type_String(L"String");
result = Eval_Send1(result, SMB__equal, string408);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmStringEquals)
/*
tmStringEquals
	^ 'String' = 'String'
*/
Object string409 = (Object)new_Type_String(L"String");
Object constant1541 = (Object)new_AST_Constant(string409);
Object string410 = (Object)new_Type_String(L"String");
Object constant1542 = (Object)new_AST_Constant(string410);
Object send1031 = (Object)new_AST_Send((Object)constant1541, (Object)SMB__equal, 1, constant1542);
Object symbol109 = (Object)new_Type_Symbol_cached(L"tmStringEquals");

// nil>>tmStringEquals
Object method448 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send1031);
Object methodclosure356 = (Object)new_Runtime_MethodClosure(method448);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol109, (Runtime_MethodClosure)methodclosure356);

Object send1032 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol109, 0);
Object result = (Object)Eval((Object)send1032);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbol)
/*
tmSymbol
	^ #Symbol
*/
Object symbol110 = (Object)new_Type_Symbol_cached(L"Symbol");
Object constant1543 = (Object)new_AST_Constant(symbol110);
Object symbol111 = (Object)new_Type_Symbol_cached(L"tmSymbol");

// nil>>tmSymbol
Object method449 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant1543);
Object methodclosure357 = (Object)new_Runtime_MethodClosure(method449);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol111, (Runtime_MethodClosure)methodclosure357);

Object send1033 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol111, 0);
Object result = (Object)Eval((Object)send1033);
ASSERT_EMPTY_STACK
result = Eval_Send1(result, SMB__equal, symbol110);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbolEquals)
/*
tmSymbolEquals
	^ #Symbol = #Symbol
*/
Object symbol110 = (Object)new_Type_Symbol_cached(L"Symbol");
Object constant1544 = (Object)new_AST_Constant(symbol110);
Object constant1545 = (Object)new_AST_Constant(symbol110);
Object send1034 = (Object)new_AST_Send((Object)constant1544, (Object)SMB__equal, 1, constant1545);
Object symbol112 = (Object)new_Type_Symbol_cached(L"tmSymbolEquals");

// nil>>tmSymbolEquals
Object method450 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send1034);
Object methodclosure358 = (Object)new_Runtime_MethodClosure(method450);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol112, (Runtime_MethodClosure)methodclosure358);

Object send1035 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol112, 0);
Object result = (Object)Eval((Object)send1035);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmClassReferenceReturn)
/*
tmClassReferenceReturn
	^ Metaclass name.
*/
Object send1036 = (Object)new_AST_Send((Object)Metaclass_Reference, (Object)SMB_name, 0);
Object symbol113 = (Object)new_Type_Symbol_cached(L"tmClassReferenceReturn");

// nil>>tmClassReferenceReturn
Object method451 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send1036);
Object methodclosure359 = (Object)new_Runtime_MethodClosure(method451);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol113, (Runtime_MethodClosure)methodclosure359);

Object send1037 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol113, 0);
Object result = (Object)Eval((Object)send1037);
ASSERT_EMPTY_STACK
Object symbol114 = (Object)new_Type_Symbol_cached(L"Metaclass");
result = Eval_Send1(result, SMB__equal, symbol114);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmExtendedReturn)
/*
tmExtendedReturn
	1 > 2 ifTrue: [ ^ 1 ]
		ifFalse: [ ^ 2].
*/
Object variable32 = (Object)new_AST_Variable_named(L"return");
Object array288 = (Object)new_Type_Array_with(1, variable32);
Object smallint763 = (Object)new_Type_SmallInt(1);
Object constant1546 = (Object)new_AST_Constant(smallint763);
Object smallint764 = (Object)new_Type_SmallInt(2);
Object constant1547 = (Object)new_AST_Constant(smallint764);
Object send1040 = (Object)new_AST_Send((Object)constant1546, (Object)SMB__gt, 1, constant1547);
Object smallint765 = (Object)new_Type_SmallInt(1);
Object constant1548 = (Object)new_AST_Constant(smallint765);
Object send1041 = (Object)new_AST_Send((Object)variable32, (Object)SMB_escape_, 1, constant1548);
Object block266 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 2, 1, send1041);
Object smallint766 = (Object)new_Type_SmallInt(2);
Object constant1549 = (Object)new_AST_Constant(smallint766);
Object send1042 = (Object)new_AST_Send((Object)variable32, (Object)SMB_escape_, 1, constant1549);
Object block267 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 2, 1, send1042);
Object send1039 = (Object)new_AST_Send((Object)send1040, (Object)SMB_ifTrue_ifFalse_, 2, block266, block267);
Object block265 = (Object)new_AST_Block_with((Type_Array)array288, (Type_Array)empty_Type_Array, 1, 2, send1039, Self);
Object send1038 = (Object)new_AST_Send((Object)AST_Callec_Reference, (Object)SMB_on_, 1, block265);
Object symbol115 = (Object)new_Type_Symbol_cached(L"tmExtendedReturn");

// nil>>tmExtendedReturn
Object method452 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send1038);
Object methodclosure360 = (Object)new_Runtime_MethodClosure(method452);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol115, (Runtime_MethodClosure)methodclosure360);

Object send1043 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol115, 0);
Object result = (Object)Eval((Object)send1043);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArgument_)
/*
tmMethodArgument: arg 
	<arg1: 1>
	^ arg + 1
*/
Object localvariable292 = (Object)new_AST_Variable_named(L"arg");
Object smallint767 = (Object)new_Type_SmallInt(1);
Object constant1550 = (Object)new_AST_Constant(smallint767);
Object send1044 = (Object)new_AST_Send((Object)localvariable292, (Object)SMB__plus, 1, constant1550);
Object symbol116 = (Object)new_Type_Symbol_cached(L"tmMethodArgument:");

// nil>>tmMethodArgument:
Object array289 = (Object)new_Type_Array_with(1, localvariable292);
Object method453 = (Object)new_AST_Method_with((Type_Array)array289, (Type_Array)empty_Type_Array, 1, send1044);
Object methodclosure361 = (Object)new_Runtime_MethodClosure(method453);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol116, (Runtime_MethodClosure)methodclosure361);

Object smallint768 = (Object)new_Type_SmallInt(1);
Object constant1551 = (Object)new_AST_Constant(smallint768);
Object send1045 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol116, 1, constant1551);
Object result = (Object)Eval((Object)send1045);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArguments_with_with_)
/*
tmMethodArguments: arg1 with: arg2 with: arg3 
	<arg1: 'asdf' arg2: 'asdf' arg3: 'df'>
	^ arg1 , arg2 , arg3
*/
Object localvariable293 = (Object)new_AST_Variable_named(L"arg1");
Object localvariable294 = (Object)new_AST_Variable_named(L"arg2");
Object send1047 = (Object)new_AST_Send((Object)localvariable293, (Object)SMB__concat, 1, localvariable294);
Object localvariable295 = (Object)new_AST_Variable_named(L"arg3");
Object send1046 = (Object)new_AST_Send((Object)send1047, (Object)SMB__concat, 1, localvariable295);
Object symbol117 = (Object)new_Type_Symbol_cached(L"tmMethodArguments:with:with:");

// nil>>tmMethodArguments:with:with:
Object array290 = (Object)new_Type_Array_with(3, localvariable293, localvariable294, localvariable295);
Object method454 = (Object)new_AST_Method_with((Type_Array)array290, (Type_Array)empty_Type_Array, 1, send1046);
Object methodclosure362 = (Object)new_Runtime_MethodClosure(method454);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol117, (Runtime_MethodClosure)methodclosure362);

Object string411 = (Object)new_Type_String(L"asdf");
Object constant1552 = (Object)new_AST_Constant(string411);
Object string412 = (Object)new_Type_String(L"asdf");
Object constant1553 = (Object)new_AST_Constant(string412);
Object string413 = (Object)new_Type_String(L"df");
Object constant1554 = (Object)new_AST_Constant(string413);
Object send1048 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol117, 3, constant1552, constant1553, constant1554);
Object result = (Object)Eval((Object)send1048);
ASSERT_EMPTY_STACK
Object string414 = (Object)new_Type_String(L"asdfasdfdf");
result = Eval_Send1(result, SMB__equal, string414);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleBasicArithmetik)
/*
tmSimpleBasicArithmetik
	^ (1 + 2) + 2 * 5
*/
Object smallint769 = (Object)new_Type_SmallInt(1);
Object constant1555 = (Object)new_AST_Constant(smallint769);
Object smallint770 = (Object)new_Type_SmallInt(2);
Object constant1556 = (Object)new_AST_Constant(smallint770);
Object send1051 = (Object)new_AST_Send((Object)constant1555, (Object)SMB__plus, 1, constant1556);
Object smallint771 = (Object)new_Type_SmallInt(2);
Object constant1557 = (Object)new_AST_Constant(smallint771);
Object send1050 = (Object)new_AST_Send((Object)send1051, (Object)SMB__plus, 1, constant1557);
Object smallint772 = (Object)new_Type_SmallInt(5);
Object constant1558 = (Object)new_AST_Constant(smallint772);
Object send1049 = (Object)new_AST_Send((Object)send1050, (Object)SMB__times, 1, constant1558);
Object symbol118 = (Object)new_Type_Symbol_cached(L"tmSimpleBasicArithmetik");

// nil>>tmSimpleBasicArithmetik
Object method455 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send1049);
Object methodclosure363 = (Object)new_Runtime_MethodClosure(method455);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol118, (Runtime_MethodClosure)methodclosure363);

Object send1052 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol118, 0);
Object result = (Object)Eval((Object)send1052);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 25);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleReturn)
/*
tmSimpleReturn
	^ 1
*/
Object smallint773 = (Object)new_Type_SmallInt(1);
Object constant1559 = (Object)new_AST_Constant(smallint773);
Object symbol119 = (Object)new_Type_Symbol_cached(L"tmSimpleReturn");

// nil>>tmSimpleReturn
Object method456 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant1559);
Object methodclosure364 = (Object)new_Runtime_MethodClosure(method456);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol119, (Runtime_MethodClosure)methodclosure364);

Object send1053 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol119, 0);
Object result = (Object)Eval((Object)send1053);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

TEST_SUITE(AutoGenTest,
{
    Test_Class = new_Class_named((Object)Type_Object_Class, L"Test_Object", Type_Object_Class->type);
    test_Class_Instance = (Object)new_AST_Constant((Object)instantiate((Type_Class)Test_Class));

    RUN_TEST(AutoGenTest_tmSymbol);
    RUN_TEST(AutoGenTest_tmNumberMult);
    RUN_TEST(AutoGenTest_tmSimpleReturn);
    RUN_TEST(AutoGenTest_tmNumber);
    RUN_TEST(AutoGenTest_tmBooleanFalse);
    RUN_TEST(AutoGenTest_tmString);
    RUN_TEST(AutoGenTest_tmLocalVariable);
    RUN_TEST(AutoGenTest_tmMethodArgument_);
    RUN_TEST(AutoGenTest_tmNumberEquals);
    RUN_TEST(AutoGenTest_tmClassReferenceReturn);
    RUN_TEST(AutoGenTest_tmCharacterEquals);
    RUN_TEST(AutoGenTest_tmCharacter);
    RUN_TEST(AutoGenTest_tmLocalVariables);
    RUN_TEST(AutoGenTest_tmNumberSubtract);
    RUN_TEST(AutoGenTest_tmLocalVariableAssignment);
    RUN_TEST(AutoGenTest_tmBooleanEquals);
    RUN_TEST(AutoGenTest_tmNumberAdd);
    RUN_TEST(AutoGenTest_tmBooleanTrue);
    RUN_TEST(AutoGenTest_tmStringEquals);
    RUN_TEST(AutoGenTest_tmSymbolEquals);
    RUN_TEST(AutoGenTest_tmNumberDiv);
    RUN_TEST(AutoGenTest_tmMethodArguments_with_with_);
    RUN_TEST(AutoGenTest_tmSimpleBasicArithmetik);
    RUN_TEST(AutoGenTest_tmLocalVariableAssignments);
    RUN_TEST(AutoGenTest_tmExtendedReturn);
})