// Auto generated Tests from PinocchioCDumperTest

// Test Object to put test methods in
Type_Class Test_Class;
Object test_Class_Instance;
// Test Method symbol
Type_Symbol SMB_runTestCase;


/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanEquals)
/*
tmBooleanEquals
	^ true = true
*/
Object send962 = (Object)new_AST_Send((Object)True_Const, (Object)SMB__equal, 1, True_Const);
Object symbol66 = (Object)new_Type_Symbol_cached(L"tmBooleanEquals");

// nil>>tmBooleanEquals
Object method407 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send962);
Object methodclosure315 = (Object)new_Runtime_MethodClosure(method407);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol66, (Runtime_MethodClosure)methodclosure315);

Object send963 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol66, 0);
Object result = (Object)Eval((Object)send963);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanFalse)
/*
tmBooleanFalse
	^ false
*/
Object symbol67 = (Object)new_Type_Symbol_cached(L"tmBooleanFalse");

// nil>>tmBooleanFalse
Object method408 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, False_Const);
Object methodclosure316 = (Object)new_Runtime_MethodClosure(method408);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol67, (Runtime_MethodClosure)methodclosure316);

Object send964 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol67, 0);
Object result = (Object)Eval((Object)send964);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanTrue)
/*
tmBooleanTrue
	^ true
*/
Object symbol68 = (Object)new_Type_Symbol_cached(L"tmBooleanTrue");

// nil>>tmBooleanTrue
Object method409 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, True_Const);
Object methodclosure317 = (Object)new_Runtime_MethodClosure(method409);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol68, (Runtime_MethodClosure)methodclosure317);

Object send965 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol68, 0);
Object result = (Object)Eval((Object)send965);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacter)
/*
tmCharacter
	^ $C
*/
Object character301 = (Object)new_Type_Character(L'C');
Object constant1488 = (Object)new_AST_Constant(character301);
Object symbol69 = (Object)new_Type_Symbol_cached(L"tmCharacter");

// nil>>tmCharacter
Object method410 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant1488);
Object methodclosure318 = (Object)new_Runtime_MethodClosure(method410);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol69, (Runtime_MethodClosure)methodclosure318);

Object send966 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol69, 0);
Object result = (Object)Eval((Object)send966);
ASSERT_EMPTY_STACK
assert0(((Type_Character)result)->value == 'C');
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacterEquals)
/*
tmCharacterEquals
	^ $C = $C
*/
Object character302 = (Object)new_Type_Character(L'C');
Object constant1489 = (Object)new_AST_Constant(character302);
Object character303 = (Object)new_Type_Character(L'C');
Object constant1490 = (Object)new_AST_Constant(character303);
Object send967 = (Object)new_AST_Send((Object)constant1489, (Object)SMB__equal, 1, constant1490);
Object symbol70 = (Object)new_Type_Symbol_cached(L"tmCharacterEquals");

// nil>>tmCharacterEquals
Object method411 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send967);
Object methodclosure319 = (Object)new_Runtime_MethodClosure(method411);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol70, (Runtime_MethodClosure)methodclosure319);

Object send968 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol70, 0);
Object result = (Object)Eval((Object)send968);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmLocalVariable)
/*
tmLocalVariable
	|a|
	^ a
*/
Object localvariable256 = (Object)new_AST_Variable_named(L"a");
Object symbol71 = (Object)new_Type_Symbol_cached(L"tmLocalVariable");

// nil>>tmLocalVariable
Object array277 = (Object)new_Type_Array_with(1, localvariable256);
Object method412 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array277, 1, localvariable256);
Object methodclosure320 = (Object)new_Runtime_MethodClosure(method412);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol71, (Runtime_MethodClosure)methodclosure320);

Object send969 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol71, 0);
Object result = (Object)Eval((Object)send969);
ASSERT_EMPTY_STACK
assert0(result == Nil);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmLocalVariableAssignment)
/*
tmLocalVariableAssignment
	|a|
	a := 1.
	^ a
*/
Object localvariable257 = (Object)new_AST_Variable_named(L"a");
Object smallint726 = (Object)new_Type_SmallInt(1);
Object constant1491 = (Object)new_AST_Constant(smallint726);
Object assign53 = (Object)new_AST_Assign((Object)localvariable257, (Object)constant1491);
Object symbol72 = (Object)new_Type_Symbol_cached(L"tmLocalVariableAssignment");

// nil>>tmLocalVariableAssignment
Object array278 = (Object)new_Type_Array_with(1, localvariable257);
Object method413 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array278, 2, assign53, localvariable257);
Object methodclosure321 = (Object)new_Runtime_MethodClosure(method413);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol72, (Runtime_MethodClosure)methodclosure321);

Object send970 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol72, 0);
Object result = (Object)Eval((Object)send970);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmLocalVariableAssignments)
/*
tmLocalVariableAssignments
	|a b c d e f g|
	d := 6.
	^ d
*/
Object localvariable258 = (Object)new_AST_Variable_named(L"d");
Object smallint727 = (Object)new_Type_SmallInt(6);
Object constant1492 = (Object)new_AST_Constant(smallint727);
Object assign54 = (Object)new_AST_Assign((Object)localvariable258, (Object)constant1492);
Object symbol73 = (Object)new_Type_Symbol_cached(L"tmLocalVariableAssignments");

// nil>>tmLocalVariableAssignments
Object localvariable259 = (Object)new_AST_Variable_named(L"a");
Object localvariable260 = (Object)new_AST_Variable_named(L"b");
Object localvariable261 = (Object)new_AST_Variable_named(L"c");
Object localvariable262 = (Object)new_AST_Variable_named(L"e");
Object localvariable263 = (Object)new_AST_Variable_named(L"f");
Object localvariable264 = (Object)new_AST_Variable_named(L"g");
Object array279 = (Object)new_Type_Array_with(7, localvariable259, localvariable260, localvariable261, localvariable258, localvariable262, localvariable263, localvariable264);
Object method414 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array279, 2, assign54, localvariable258);
Object methodclosure322 = (Object)new_Runtime_MethodClosure(method414);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol73, (Runtime_MethodClosure)methodclosure322);

Object send971 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol73, 0);
Object result = (Object)Eval((Object)send971);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmLocalVariables)
/*
tmLocalVariables
	|a b c d e f g|
	^ c
*/
Object localvariable265 = (Object)new_AST_Variable_named(L"c");
Object symbol74 = (Object)new_Type_Symbol_cached(L"tmLocalVariables");

// nil>>tmLocalVariables
Object localvariable266 = (Object)new_AST_Variable_named(L"a");
Object localvariable267 = (Object)new_AST_Variable_named(L"b");
Object localvariable268 = (Object)new_AST_Variable_named(L"d");
Object localvariable269 = (Object)new_AST_Variable_named(L"e");
Object localvariable270 = (Object)new_AST_Variable_named(L"f");
Object localvariable271 = (Object)new_AST_Variable_named(L"g");
Object array280 = (Object)new_Type_Array_with(7, localvariable266, localvariable267, localvariable265, localvariable268, localvariable269, localvariable270, localvariable271);
Object method415 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array280, 1, localvariable265);
Object methodclosure323 = (Object)new_Runtime_MethodClosure(method415);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol74, (Runtime_MethodClosure)methodclosure323);

Object send972 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol74, 0);
Object result = (Object)Eval((Object)send972);
ASSERT_EMPTY_STACK
assert0(result == Nil);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumber)
/*
tmNumber
	^ 1
*/
Object smallint728 = (Object)new_Type_SmallInt(1);
Object constant1493 = (Object)new_AST_Constant(smallint728);
Object symbol75 = (Object)new_Type_Symbol_cached(L"tmNumber");

// nil>>tmNumber
Object method416 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant1493);
Object methodclosure324 = (Object)new_Runtime_MethodClosure(method416);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol75, (Runtime_MethodClosure)methodclosure324);

Object send973 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol75, 0);
Object result = (Object)Eval((Object)send973);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberAdd)
/*
tmNumberAdd
	^ 1 + 1
*/
Object smallint729 = (Object)new_Type_SmallInt(1);
Object constant1494 = (Object)new_AST_Constant(smallint729);
Object smallint730 = (Object)new_Type_SmallInt(1);
Object constant1495 = (Object)new_AST_Constant(smallint730);
Object send974 = (Object)new_AST_Send((Object)constant1494, (Object)SMB__plus, 1, constant1495);
Object symbol76 = (Object)new_Type_Symbol_cached(L"tmNumberAdd");

// nil>>tmNumberAdd
Object method417 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send974);
Object methodclosure325 = (Object)new_Runtime_MethodClosure(method417);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol76, (Runtime_MethodClosure)methodclosure325);

Object send975 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol76, 0);
Object result = (Object)Eval((Object)send975);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberDiv)
/*
tmNumberDiv
	^ 4 / 2
*/
Object smallint731 = (Object)new_Type_SmallInt(4);
Object constant1496 = (Object)new_AST_Constant(smallint731);
Object smallint732 = (Object)new_Type_SmallInt(2);
Object constant1497 = (Object)new_AST_Constant(smallint732);
Object send976 = (Object)new_AST_Send((Object)constant1496, (Object)SMB__divide, 1, constant1497);
Object symbol77 = (Object)new_Type_Symbol_cached(L"tmNumberDiv");

// nil>>tmNumberDiv
Object method418 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send976);
Object methodclosure326 = (Object)new_Runtime_MethodClosure(method418);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol77, (Runtime_MethodClosure)methodclosure326);

Object send977 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol77, 0);
Object result = (Object)Eval((Object)send977);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberEquals)
/*
tmNumberEquals
	^ 1 = 1
*/
Object smallint733 = (Object)new_Type_SmallInt(1);
Object constant1498 = (Object)new_AST_Constant(smallint733);
Object smallint734 = (Object)new_Type_SmallInt(1);
Object constant1499 = (Object)new_AST_Constant(smallint734);
Object send978 = (Object)new_AST_Send((Object)constant1498, (Object)SMB__equal, 1, constant1499);
Object symbol78 = (Object)new_Type_Symbol_cached(L"tmNumberEquals");

// nil>>tmNumberEquals
Object method419 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send978);
Object methodclosure327 = (Object)new_Runtime_MethodClosure(method419);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol78, (Runtime_MethodClosure)methodclosure327);

Object send979 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol78, 0);
Object result = (Object)Eval((Object)send979);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberMult)
/*
tmNumberMult
	^ 2 * 3
*/
Object smallint735 = (Object)new_Type_SmallInt(2);
Object constant1500 = (Object)new_AST_Constant(smallint735);
Object smallint736 = (Object)new_Type_SmallInt(3);
Object constant1501 = (Object)new_AST_Constant(smallint736);
Object send980 = (Object)new_AST_Send((Object)constant1500, (Object)SMB__times, 1, constant1501);
Object symbol79 = (Object)new_Type_Symbol_cached(L"tmNumberMult");

// nil>>tmNumberMult
Object method420 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send980);
Object methodclosure328 = (Object)new_Runtime_MethodClosure(method420);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol79, (Runtime_MethodClosure)methodclosure328);

Object send981 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol79, 0);
Object result = (Object)Eval((Object)send981);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberSubtract)
/*
tmNumberSubtract
	^ 2 - 1
*/
Object smallint737 = (Object)new_Type_SmallInt(2);
Object constant1502 = (Object)new_AST_Constant(smallint737);
Object smallint738 = (Object)new_Type_SmallInt(1);
Object constant1503 = (Object)new_AST_Constant(smallint738);
Object send982 = (Object)new_AST_Send((Object)constant1502, (Object)SMB__minus, 1, constant1503);
Object symbol80 = (Object)new_Type_Symbol_cached(L"tmNumberSubtract");

// nil>>tmNumberSubtract
Object method421 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send982);
Object methodclosure329 = (Object)new_Runtime_MethodClosure(method421);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol80, (Runtime_MethodClosure)methodclosure329);

Object send983 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol80, 0);
Object result = (Object)Eval((Object)send983);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmString)
/*
tmString
	^ 'String'
*/
Object string399 = (Object)new_Type_String(L"String");
Object constant1504 = (Object)new_AST_Constant(string399);
Object symbol81 = (Object)new_Type_Symbol_cached(L"tmString");

// nil>>tmString
Object method422 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant1504);
Object methodclosure330 = (Object)new_Runtime_MethodClosure(method422);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol81, (Runtime_MethodClosure)methodclosure330);

Object send984 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol81, 0);
Object result = (Object)Eval((Object)send984);
ASSERT_EMPTY_STACK
result = Eval_Send1(result, SMB__equal, string400);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmStringEquals)
/*
tmStringEquals
	^ 'String' = 'String'
*/
Object string401 = (Object)new_Type_String(L"String");
Object constant1505 = (Object)new_AST_Constant(string401);
Object string402 = (Object)new_Type_String(L"String");
Object constant1506 = (Object)new_AST_Constant(string402);
Object send985 = (Object)new_AST_Send((Object)constant1505, (Object)SMB__equal, 1, constant1506);
Object symbol82 = (Object)new_Type_Symbol_cached(L"tmStringEquals");

// nil>>tmStringEquals
Object method423 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send985);
Object methodclosure331 = (Object)new_Runtime_MethodClosure(method423);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol82, (Runtime_MethodClosure)methodclosure331);

Object send986 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol82, 0);
Object result = (Object)Eval((Object)send986);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbol)
/*
tmSymbol
	^ #Symbol
*/
Object symbol83 = (Object)new_Type_Symbol_cached(L"Symbol");
Object constant1507 = (Object)new_AST_Constant(symbol83);
Object symbol84 = (Object)new_Type_Symbol_cached(L"tmSymbol");

// nil>>tmSymbol
Object method424 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant1507);
Object methodclosure332 = (Object)new_Runtime_MethodClosure(method424);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol84, (Runtime_MethodClosure)methodclosure332);

Object send987 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol84, 0);
Object result = (Object)Eval((Object)send987);
ASSERT_EMPTY_STACK
result = Eval_Send1(result, SMB__equal, symbol83);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbolEquals)
/*
tmSymbolEquals
	^ #Symbol = #Symbol
*/
Object symbol83 = (Object)new_Type_Symbol_cached(L"Symbol");
Object constant1508 = (Object)new_AST_Constant(symbol83);
Object constant1509 = (Object)new_AST_Constant(symbol83);
Object send988 = (Object)new_AST_Send((Object)constant1508, (Object)SMB__equal, 1, constant1509);
Object symbol85 = (Object)new_Type_Symbol_cached(L"tmSymbolEquals");

// nil>>tmSymbolEquals
Object method425 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send988);
Object methodclosure333 = (Object)new_Runtime_MethodClosure(method425);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol85, (Runtime_MethodClosure)methodclosure333);

Object send989 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol85, 0);
Object result = (Object)Eval((Object)send989);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmClassReferenceReturn)
/*
tmClassReferenceReturn
	^ Metaclass name.
*/
Object send990 = (Object)new_AST_Send((Object)Metaclass_Reference, (Object)SMB_name, 0);
Object symbol86 = (Object)new_Type_Symbol_cached(L"tmClassReferenceReturn");

// nil>>tmClassReferenceReturn
Object method426 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send990);
Object methodclosure334 = (Object)new_Runtime_MethodClosure(method426);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol86, (Runtime_MethodClosure)methodclosure334);

Object send991 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol86, 0);
Object result = (Object)Eval((Object)send991);
ASSERT_EMPTY_STACK
Object symbol87 = (Object)new_Type_Symbol_cached(L"Metaclass");
result = Eval_Send1(result, SMB__equal, symbol87);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmExtendedReturn)
/*
tmExtendedReturn
	1 > 2 ifTrue: [ ^ 1 ]
		ifFalse: [ ^ 2].
*/
Object variable31 = (Object)new_AST_Variable_named(L"return");
Object array281 = (Object)new_Type_Array_with(1, variable31);
Object smallint739 = (Object)new_Type_SmallInt(1);
Object constant1510 = (Object)new_AST_Constant(smallint739);
Object smallint740 = (Object)new_Type_SmallInt(2);
Object constant1511 = (Object)new_AST_Constant(smallint740);
Object send994 = (Object)new_AST_Send((Object)constant1510, (Object)SMB__gt, 1, constant1511);
Object smallint741 = (Object)new_Type_SmallInt(1);
Object constant1512 = (Object)new_AST_Constant(smallint741);
Object send995 = (Object)new_AST_Send((Object)variable31, (Object)SMB_escape_, 1, constant1512);
Object block263 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 2, 1, send995);
Object smallint742 = (Object)new_Type_SmallInt(2);
Object constant1513 = (Object)new_AST_Constant(smallint742);
Object send996 = (Object)new_AST_Send((Object)variable31, (Object)SMB_escape_, 1, constant1513);
Object block264 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 2, 1, send996);
Object send993 = (Object)new_AST_Send((Object)send994, (Object)SMB_ifTrue_ifFalse_, 2, block263, block264);
Object block262 = (Object)new_AST_Block_with((Type_Array)array281, (Type_Array)empty_Type_Array, 1, 2, send993, Self);
Object send992 = (Object)new_AST_Send((Object)AST_Callec_Reference, (Object)SMB_on_, 1, block262);
Object symbol88 = (Object)new_Type_Symbol_cached(L"tmExtendedReturn");

// nil>>tmExtendedReturn
Object method427 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send992);
Object methodclosure335 = (Object)new_Runtime_MethodClosure(method427);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol88, (Runtime_MethodClosure)methodclosure335);

Object send997 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol88, 0);
Object result = (Object)Eval((Object)send997);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArgument_)
/*
tmMethodArgument: arg 
	<arg1: 1>
	^ arg + 1
*/
Object localvariable272 = (Object)new_AST_Variable_named(L"arg");
Object smallint743 = (Object)new_Type_SmallInt(1);
Object constant1514 = (Object)new_AST_Constant(smallint743);
Object send998 = (Object)new_AST_Send((Object)localvariable272, (Object)SMB__plus, 1, constant1514);
Object symbol89 = (Object)new_Type_Symbol_cached(L"tmMethodArgument:");

// nil>>tmMethodArgument:
Object array282 = (Object)new_Type_Array_with(1, localvariable272);
Object method428 = (Object)new_AST_Method_with((Type_Array)array282, (Type_Array)empty_Type_Array, 1, send998);
Object methodclosure336 = (Object)new_Runtime_MethodClosure(method428);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol89, (Runtime_MethodClosure)methodclosure336);

Object smallint744 = (Object)new_Type_SmallInt(1);
Object constant1515 = (Object)new_AST_Constant(smallint744);
Object send999 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol89, 1, constant1515);
Object result = (Object)Eval((Object)send999);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArguments_with_with_)
/*
tmMethodArguments: arg1 with: arg2 with: arg3 
	<arg1: 'asdf' arg2: 'asdf' arg3: 'df'>
	^ arg1 , arg2 , arg3
*/
Object localvariable273 = (Object)new_AST_Variable_named(L"arg1");
Object localvariable274 = (Object)new_AST_Variable_named(L"arg2");
Object send1001 = (Object)new_AST_Send((Object)localvariable273, (Object)SMB__concat, 1, localvariable274);
Object localvariable275 = (Object)new_AST_Variable_named(L"arg3");
Object send1000 = (Object)new_AST_Send((Object)send1001, (Object)SMB__concat, 1, localvariable275);
Object symbol90 = (Object)new_Type_Symbol_cached(L"tmMethodArguments:with:with:");

// nil>>tmMethodArguments:with:with:
Object array283 = (Object)new_Type_Array_with(3, localvariable273, localvariable274, localvariable275);
Object method429 = (Object)new_AST_Method_with((Type_Array)array283, (Type_Array)empty_Type_Array, 1, send1000);
Object methodclosure337 = (Object)new_Runtime_MethodClosure(method429);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol90, (Runtime_MethodClosure)methodclosure337);

Object string403 = (Object)new_Type_String(L"asdf");
Object constant1516 = (Object)new_AST_Constant(string403);
Object string404 = (Object)new_Type_String(L"asdf");
Object constant1517 = (Object)new_AST_Constant(string404);
Object string405 = (Object)new_Type_String(L"df");
Object constant1518 = (Object)new_AST_Constant(string405);
Object send1002 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol90, 3, constant1516, constant1517, constant1518);
Object result = (Object)Eval((Object)send1002);
ASSERT_EMPTY_STACK
Object string406 = (Object)new_Type_String(L"asdfasdfdf");
result = Eval_Send1(result, SMB__equal, string406);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleBasicArithmetik)
/*
tmSimpleBasicArithmetik
	^ (1 + 2) + 2 * 5
*/
Object smallint745 = (Object)new_Type_SmallInt(1);
Object constant1519 = (Object)new_AST_Constant(smallint745);
Object smallint746 = (Object)new_Type_SmallInt(2);
Object constant1520 = (Object)new_AST_Constant(smallint746);
Object send1005 = (Object)new_AST_Send((Object)constant1519, (Object)SMB__plus, 1, constant1520);
Object smallint747 = (Object)new_Type_SmallInt(2);
Object constant1521 = (Object)new_AST_Constant(smallint747);
Object send1004 = (Object)new_AST_Send((Object)send1005, (Object)SMB__plus, 1, constant1521);
Object smallint748 = (Object)new_Type_SmallInt(5);
Object constant1522 = (Object)new_AST_Constant(smallint748);
Object send1003 = (Object)new_AST_Send((Object)send1004, (Object)SMB__times, 1, constant1522);
Object symbol91 = (Object)new_Type_Symbol_cached(L"tmSimpleBasicArithmetik");

// nil>>tmSimpleBasicArithmetik
Object method430 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send1003);
Object methodclosure338 = (Object)new_Runtime_MethodClosure(method430);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol91, (Runtime_MethodClosure)methodclosure338);

Object send1006 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol91, 0);
Object result = (Object)Eval((Object)send1006);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 25);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleReturn)
/*
tmSimpleReturn
	^ 1
*/
Object smallint749 = (Object)new_Type_SmallInt(1);
Object constant1523 = (Object)new_AST_Constant(smallint749);
Object symbol92 = (Object)new_Type_Symbol_cached(L"tmSimpleReturn");

// nil>>tmSimpleReturn
Object method431 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant1523);
Object methodclosure339 = (Object)new_Runtime_MethodClosure(method431);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol92, (Runtime_MethodClosure)methodclosure339);

Object send1007 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol92, 0);
Object result = (Object)Eval((Object)send1007);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

TEST_SUITE(AutoGenTest,
{
    Test_Class = new_Class_named((Object)Type_Object_Class, L"Test_Object", Type_Object_Class->type);
    test_Class_Instance = (Object)new_AST_Constant((Object)instantiate((Type_Class)Test_Class));

    RUN_TEST(AutoGenTest_tmSymbol);
    RUN_TEST(AutoGenTest_tmNumberMult);
    RUN_TEST(AutoGenTest_tmSimpleReturn);
    RUN_TEST(AutoGenTest_tmNumber);
    RUN_TEST(AutoGenTest_tmBooleanFalse);
    RUN_TEST(AutoGenTest_tmString);
    RUN_TEST(AutoGenTest_tmLocalVariable);
    RUN_TEST(AutoGenTest_tmMethodArgument_);
    RUN_TEST(AutoGenTest_tmNumberEquals);
    RUN_TEST(AutoGenTest_tmClassReferenceReturn);
    RUN_TEST(AutoGenTest_tmCharacterEquals);
    RUN_TEST(AutoGenTest_tmCharacter);
    RUN_TEST(AutoGenTest_tmLocalVariables);
    RUN_TEST(AutoGenTest_tmNumberSubtract);
    RUN_TEST(AutoGenTest_tmLocalVariableAssignment);
    RUN_TEST(AutoGenTest_tmBooleanEquals);
    RUN_TEST(AutoGenTest_tmNumberAdd);
    RUN_TEST(AutoGenTest_tmBooleanTrue);
    RUN_TEST(AutoGenTest_tmStringEquals);
    RUN_TEST(AutoGenTest_tmSymbolEquals);
    RUN_TEST(AutoGenTest_tmNumberDiv);
    RUN_TEST(AutoGenTest_tmMethodArguments_with_with_);
    RUN_TEST(AutoGenTest_tmSimpleBasicArithmetik);
    RUN_TEST(AutoGenTest_tmLocalVariableAssignments);
    RUN_TEST(AutoGenTest_tmExtendedReturn);
})
