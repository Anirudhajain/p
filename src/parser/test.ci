// Auto generated Tests from BridgeTest

// Test Object to put test methods in
Type_Class Test_Class;
Object test_Class_Instance;
// Test Method symbol
Type_Symbol SMB_runTestCase;
Object symbol672;
Object class91;
Object symbol670;
Object class92;
Object classreference110;
Object classreference111;
Object symbol682;
Object arraylayout19;
Object instancevariable109;
Object instancevariable110;
Object instancevariable111;
Object class93;
Object method1214;
Object symbol710;
Object methodclosure1098;
Object localvariable623;
Object array627;
Object assign262;
Object method1215;
Object symbol706;
Object methodclosure1099;
Object localvariable624;
Object array628;
Object assign263;
Object method1216;
Object symbol708;
Object methodclosure1100;
Object localvariable625;
Object array629;
Object assign264;
Object method1217;
Object symbol711;
Object methodclosure1101;
Object method1218;
Object symbol709;
Object methodclosure1102;
Object method1219;
Object symbol707;
Object methodclosure1103;
Object classreference112;
Object symbol687;
Object objectlayout43;
Object instancevariable112;
Object instancevariable113;
Object instancevariable114;
Object class94;
Object method1220;
Object methodclosure1104;
Object localvariable626;
Object array630;
Object assign265;
Object method1221;
Object methodclosure1105;
Object localvariable627;
Object array631;
Object assign266;
Object method1222;
Object methodclosure1106;
Object localvariable628;
Object array632;
Object assign267;
Object method1223;
Object methodclosure1107;
Object method1224;
Object methodclosure1108;
Object method1225;
Object methodclosure1109;
Object classreference113;
Object symbol666;
Object class95;
Object smallint1866;
Object constant3013;
Object smallint1867;
Object constant3014;
Object send3440;
Object method1226;
Object symbol679;
Object methodclosure1110;
Object character415;
Object constant3015;
Object string646;
Object constant3016;
Object send3441;
Object method1227;
Object symbol700;
Object methodclosure1111;
Object localvariable629;
Object array633;
Object smallint1868;
Object constant3017;
Object assign268;
Object method1228;
Object symbol691;
Object methodclosure1112;
Object send3442;
Object method1229;
Object symbol699;
Object methodclosure1113;
Object smallint1869;
Object constant3018;
Object method1230;
Object symbol680;
Object methodclosure1114;
Object localvariable630;
Object array634;
Object send3443;
Object assign269;
Object localvariable631;
Object array635;
Object smallint1870;
Object constant3019;
Object send3444;
Object smallint1871;
Object constant3020;
Object send3445;
Object smallint1872;
Object constant3021;
Object send3446;
Object block461;
Object send3447;
Object symbol685;
Object send3448;
Object smallint1873;
Object constant3022;
Object send3449;
Object send3450;
Object send3451;
Object smallint1874;
Object constant3023;
Object send3452;
Object send3453;
Object send3454;
Object smallint1875;
Object constant3024;
Object send3455;
Object send3456;
Object send3457;
Object send3458;
Object send3459;
Object send3460;
Object send3461;
Object method1231;
Object symbol688;
Object methodclosure1115;
Object smallint1876;
Object constant3025;
Object smallint1877;
Object constant3026;
Object send3462;
Object method1232;
Object symbol701;
Object methodclosure1116;
Object method1233;
Object symbol692;
Object methodclosure1117;
Object character416;
Object constant3027;
Object method1234;
Object symbol681;
Object methodclosure1118;
Object string647;
Object constant3028;
Object string648;
Object constant3029;
Object send3463;
Object method1235;
Object symbol689;
Object methodclosure1119;
Object symbol712;
Object constant3030;
Object constant3031;
Object send3464;
Object method1236;
Object symbol702;
Object methodclosure1120;
Object string649;
Object constant3032;
Object method1237;
Object symbol693;
Object methodclosure1121;
Object smallint1878;
Object constant3033;
Object smallint1879;
Object constant3034;
Object send3465;
Object method1238;
Object symbol674;
Object methodclosure1122;
Object send3466;
Object method1239;
Object symbol703;
Object methodclosure1123;
Object smallint1880;
Object constant3035;
Object smallint1881;
Object constant3036;
Object send3467;
Object method1240;
Object symbol694;
Object methodclosure1124;
Object localvariable632;
Object array636;
Object smallint1882;
Object constant3037;
Object send3468;
Object assign270;
Object smallint1883;
Object constant3038;
Object smallint1884;
Object constant3039;
Object send3469;
Object smallint1885;
Object constant3040;
Object smallint1886;
Object constant3041;
Object send3470;
Object smallint1887;
Object constant3042;
Object send3471;
Object smallint1888;
Object constant3043;
Object send3472;
Object send3473;
Object method1241;
Object symbol683;
Object methodclosure1125;
Object symbol713;
Object constant3044;
Object character417;
Object constant3045;
Object send3474;
Object method1242;
Object symbol675;
Object methodclosure1126;
Object localvariable633;
Object array637;
Object smallint1889;
Object constant3046;
Object send3475;
Object method1243;
Object symbol704;
Object methodclosure1127;
Object constant3047;
Object method1244;
Object symbol695;
Object methodclosure1128;
Object smallint1890;
Object constant3048;
Object smallint1891;
Object constant3049;
Object send3476;
Object smallint1892;
Object constant3050;
Object send3477;
Object smallint1893;
Object constant3051;
Object send3478;
Object method1245;
Object symbol684;
Object methodclosure1129;
Object method1246;
Object symbol676;
Object methodclosure1130;
Object smallint1894;
Object constant3052;
Object smallint1895;
Object constant3053;
Object send3479;
Object method1247;
Object symbol705;
Object methodclosure1131;
Object localvariable634;
Object localvariable635;
Object localvariable636;
Object array638;
Object send3480;
Object send3481;
Object method1248;
Object symbol696;
Object methodclosure1132;
Object localvariable637;
Object array639;
Object symbol714;
Object send3482;
Object block462;
Object send3483;
Object method1249;
Object methodclosure1133;
Object smallint1896;
Object constant3054;
Object method1250;
Object symbol677;
Object methodclosure1134;
Object variable60;
Object array640;
Object smallint1897;
Object constant3055;
Object smallint1898;
Object constant3056;
Object send3484;
Object smallint1899;
Object constant3057;
Object send3485;
Object block463;
Object smallint1900;
Object constant3058;
Object send3486;
Object block464;
Object send3487;
Object block465;
Object send3488;
Object method1251;
Object symbol697;
Object methodclosure1135;
Object character418;
Object constant3059;
Object character419;
Object constant3060;
Object send3489;
Object method1252;
Object symbol686;
Object methodclosure1136;
Object symbol715;
Object constant3061;
Object send3490;
Object method1253;
Object symbol678;
Object methodclosure1137;
Object localvariable638;
Object array641;
Object send3491;
Object assign271;
Object localvariable639;
Object array642;
Object smallint1901;
Object constant3062;
Object send3492;
Object smallint1902;
Object constant3063;
Object send3493;
Object smallint1903;
Object constant3064;
Object send3494;
Object block466;
Object send3495;
Object send3496;
Object smallint1904;
Object constant3065;
Object send3497;
Object send3498;
Object send3499;
Object smallint1905;
Object constant3066;
Object send3500;
Object send3501;
Object send3502;
Object smallint1906;
Object constant3067;
Object send3503;
Object send3504;
Object send3505;
Object send3506;
Object send3507;
Object send3508;
Object send3509;
Object method1254;
Object symbol690;
Object methodclosure1138;
Object method1255;
Object symbol698;
Object methodclosure1139;
Object classreference114;


void create_ast() {
symbol672 = (Object)new_Type_Symbol_cached(L"ProtoObject");
class91 = (Object)new_Class(Nil, empty_object_layout);
((Type_Class)class91)->name = (Type_Symbol)symbol672;
symbol670 = (Object)new_Type_Symbol_cached(L"Object");
class92 = (Object)new_Class(class91, empty_object_layout);
((Type_Class)class92)->name = (Type_Symbol)symbol670;
classreference110 = (Object)new_Organization_ClassReference((Type_Class)class92);
classreference111 = (Object)new_Organization_ClassReference((Type_Class)class91);
symbol682 = (Object)new_Type_Symbol_cached(L"StandardVariableTestClass");
arraylayout19 = (Object)create_type_with_vars(Type_ArrayLayout, 3);
instancevariable109 = (Object)new_AST_InstVariable(0, L"a");
((Type_Array)arraylayout19)->values[0] = instancevariable109;instancevariable110 = (Object)new_AST_InstVariable(1, L"b");
((Type_Array)arraylayout19)->values[1] = instancevariable110;instancevariable111 = (Object)new_AST_InstVariable(2, L"c");
((Type_Array)arraylayout19)->values[2] = instancevariable111;class93 = (Object)new_Class(class92, arraylayout19);
((Type_Class)class93)->name = (Type_Symbol)symbol682;

// StandardVariableTestClass>>a
method1214 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable109);
symbol710 = (Object)new_Type_Symbol_cached(L"a");
methodclosure1098 = (Object)new_Runtime_MethodClosure(method1214);
store_method((Type_Class)class93, (Type_Symbol)symbol710, (Runtime_MethodClosure)methodclosure1098);

// StandardVariableTestClass>>a:
localvariable623 = (Object)new_AST_Variable_named(L"anObject");
array627 = (Object)new_Type_Array_with(1, localvariable623);
assign262 = (Object)new_AST_Assign((Object)instancevariable109, (Object)localvariable623);
method1215 = (Object)new_AST_Method_with((Type_Array)array627, (Type_Array)empty_Type_Array, 2, assign262, Self);
symbol706 = (Object)new_Type_Symbol_cached(L"a:");
methodclosure1099 = (Object)new_Runtime_MethodClosure(method1215);
store_method((Type_Class)class93, (Type_Symbol)symbol706, (Runtime_MethodClosure)methodclosure1099);

// StandardVariableTestClass>>b:
localvariable624 = (Object)new_AST_Variable_named(L"anObject");
array628 = (Object)new_Type_Array_with(1, localvariable624);
assign263 = (Object)new_AST_Assign((Object)instancevariable110, (Object)localvariable624);
method1216 = (Object)new_AST_Method_with((Type_Array)array628, (Type_Array)empty_Type_Array, 2, assign263, Self);
symbol708 = (Object)new_Type_Symbol_cached(L"b:");
methodclosure1100 = (Object)new_Runtime_MethodClosure(method1216);
store_method((Type_Class)class93, (Type_Symbol)symbol708, (Runtime_MethodClosure)methodclosure1100);

// StandardVariableTestClass>>c:
localvariable625 = (Object)new_AST_Variable_named(L"anObject");
array629 = (Object)new_Type_Array_with(1, localvariable625);
assign264 = (Object)new_AST_Assign((Object)instancevariable111, (Object)localvariable625);
method1217 = (Object)new_AST_Method_with((Type_Array)array629, (Type_Array)empty_Type_Array, 2, assign264, Self);
symbol711 = (Object)new_Type_Symbol_cached(L"c:");
methodclosure1101 = (Object)new_Runtime_MethodClosure(method1217);
store_method((Type_Class)class93, (Type_Symbol)symbol711, (Runtime_MethodClosure)methodclosure1101);

// StandardVariableTestClass>>c
method1218 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable111);
symbol709 = (Object)new_Type_Symbol_cached(L"c");
methodclosure1102 = (Object)new_Runtime_MethodClosure(method1218);
store_method((Type_Class)class93, (Type_Symbol)symbol709, (Runtime_MethodClosure)methodclosure1102);

// StandardVariableTestClass>>b
method1219 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable110);
symbol707 = (Object)new_Type_Symbol_cached(L"b");
methodclosure1103 = (Object)new_Runtime_MethodClosure(method1219);
store_method((Type_Class)class93, (Type_Symbol)symbol707, (Runtime_MethodClosure)methodclosure1103);
classreference112 = (Object)new_Organization_ClassReference((Type_Class)class93);
symbol687 = (Object)new_Type_Symbol_cached(L"StandardTestClass");
objectlayout43 = (Object)create_type_with_vars(Type_ObjectLayout, 3);
instancevariable112 = (Object)new_AST_InstVariable(0, L"a");
((Type_Array)objectlayout43)->values[0] = instancevariable112;
instancevariable113 = (Object)new_AST_InstVariable(1, L"b");
((Type_Array)objectlayout43)->values[1] = instancevariable113;
instancevariable114 = (Object)new_AST_InstVariable(2, L"c");
((Type_Array)objectlayout43)->values[2] = instancevariable114;
class94 = (Object)new_Class(class92, objectlayout43);
((Type_Class)class94)->name = (Type_Symbol)symbol687;

// StandardTestClass>>a
method1220 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable112);
methodclosure1104 = (Object)new_Runtime_MethodClosure(method1220);
store_method((Type_Class)class94, (Type_Symbol)symbol710, (Runtime_MethodClosure)methodclosure1104);

// StandardTestClass>>a:
localvariable626 = (Object)new_AST_Variable_named(L"anObject");
array630 = (Object)new_Type_Array_with(1, localvariable626);
assign265 = (Object)new_AST_Assign((Object)instancevariable112, (Object)localvariable626);
method1221 = (Object)new_AST_Method_with((Type_Array)array630, (Type_Array)empty_Type_Array, 2, assign265, Self);
methodclosure1105 = (Object)new_Runtime_MethodClosure(method1221);
store_method((Type_Class)class94, (Type_Symbol)symbol706, (Runtime_MethodClosure)methodclosure1105);

// StandardTestClass>>b:
localvariable627 = (Object)new_AST_Variable_named(L"anObject");
array631 = (Object)new_Type_Array_with(1, localvariable627);
assign266 = (Object)new_AST_Assign((Object)instancevariable113, (Object)localvariable627);
method1222 = (Object)new_AST_Method_with((Type_Array)array631, (Type_Array)empty_Type_Array, 2, assign266, Self);
methodclosure1106 = (Object)new_Runtime_MethodClosure(method1222);
store_method((Type_Class)class94, (Type_Symbol)symbol708, (Runtime_MethodClosure)methodclosure1106);

// StandardTestClass>>c:
localvariable628 = (Object)new_AST_Variable_named(L"anObject");
array632 = (Object)new_Type_Array_with(1, localvariable628);
assign267 = (Object)new_AST_Assign((Object)instancevariable114, (Object)localvariable628);
method1223 = (Object)new_AST_Method_with((Type_Array)array632, (Type_Array)empty_Type_Array, 2, assign267, Self);
methodclosure1107 = (Object)new_Runtime_MethodClosure(method1223);
store_method((Type_Class)class94, (Type_Symbol)symbol711, (Runtime_MethodClosure)methodclosure1107);

// StandardTestClass>>c
method1224 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable114);
methodclosure1108 = (Object)new_Runtime_MethodClosure(method1224);
store_method((Type_Class)class94, (Type_Symbol)symbol709, (Runtime_MethodClosure)methodclosure1108);

// StandardTestClass>>b
method1225 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable113);
methodclosure1109 = (Object)new_Runtime_MethodClosure(method1225);
store_method((Type_Class)class94, (Type_Symbol)symbol707, (Runtime_MethodClosure)methodclosure1109);
classreference113 = (Object)new_Organization_ClassReference((Type_Class)class94);
symbol666 = (Object)new_Type_Symbol_cached(L"BridgeTest");
class95 = (Object)new_Class(class92, empty_object_layout);
((Type_Class)class95)->name = (Type_Symbol)symbol666;

// BridgeTest>>tmNumberMult
smallint1866 = (Object)new_Type_SmallInt(2);
constant3013 = (Object)new_AST_Constant((Object)smallint1866);
smallint1867 = (Object)new_Type_SmallInt(3);
constant3014 = (Object)new_AST_Constant((Object)smallint1867);
send3440 = (Object)new_AST_Send((Object)constant3013, (Object)SMB__times, 1, constant3014);
method1226 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3440);
symbol679 = (Object)new_Type_Symbol_cached(L"tmNumberMult");
methodclosure1110 = (Object)new_Runtime_MethodClosure(method1226);
store_method((Type_Class)class95, (Type_Symbol)symbol679, (Runtime_MethodClosure)methodclosure1110);

// BridgeTest>>tmCharacterStringEquals
character415 = (Object)new_Type_Character(L'C');
constant3015 = (Object)new_AST_Constant((Object)character415);
string646 = (Object)new_Type_String(L"C");
constant3016 = (Object)new_AST_Constant((Object)string646);
send3441 = (Object)new_AST_Send((Object)constant3015, (Object)SMB__equal, 1, constant3016);
method1227 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3441);
symbol700 = (Object)new_Type_Symbol_cached(L"tmCharacterStringEquals");
methodclosure1111 = (Object)new_Runtime_MethodClosure(method1227);
store_method((Type_Class)class95, (Type_Symbol)symbol700, (Runtime_MethodClosure)methodclosure1111);

// BridgeTest>>tmLocalVariable
localvariable629 = (Object)new_AST_Variable_named(L"a");
array633 = (Object)new_Type_Array_with(1, localvariable629);
smallint1868 = (Object)new_Type_SmallInt(1);
constant3017 = (Object)new_AST_Constant((Object)smallint1868);
assign268 = (Object)new_AST_Assign((Object)localvariable629, (Object)constant3017);
method1228 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array633, 2, assign268, localvariable629);
symbol691 = (Object)new_Type_Symbol_cached(L"tmLocalVariable");
methodclosure1112 = (Object)new_Runtime_MethodClosure(method1228);
store_method((Type_Class)class95, (Type_Symbol)symbol691, (Runtime_MethodClosure)methodclosure1112);

// BridgeTest>>tmClassReferenceReturn
send3442 = (Object)new_AST_Send((Object)Metaclass_Reference, (Object)SMB_name, 0);
method1229 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3442);
symbol699 = (Object)new_Type_Symbol_cached(L"tmClassReferenceReturn");
methodclosure1113 = (Object)new_Runtime_MethodClosure(method1229);
store_method((Type_Class)class95, (Type_Symbol)symbol699, (Runtime_MethodClosure)methodclosure1113);

// BridgeTest>>tmSimpleReturn
smallint1869 = (Object)new_Type_SmallInt(1);
constant3018 = (Object)new_AST_Constant((Object)smallint1869);
method1230 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant3018);
symbol680 = (Object)new_Type_Symbol_cached(L"tmSimpleReturn");
methodclosure1114 = (Object)new_Runtime_MethodClosure(method1230);
store_method((Type_Class)class95, (Type_Symbol)symbol680, (Runtime_MethodClosure)methodclosure1114);

// BridgeTest>>tmSimpleInstanceCreation
localvariable630 = (Object)new_AST_Variable_named(L"instance");
array634 = (Object)new_Type_Array_with(1, localvariable630);
send3443 = (Object)new_AST_Send((Object)classreference113, (Object)SMB_basicNew, 0);
assign269 = (Object)new_AST_Assign((Object)localvariable630, (Object)send3443);
localvariable631 = (Object)new_AST_Variable_named(L"receiver");
array635 = (Object)new_Type_Array_with(1, localvariable631);
smallint1870 = (Object)new_Type_SmallInt(1);
constant3019 = (Object)new_AST_Constant((Object)smallint1870);
send3444 = (Object)new_AST_Send((Object)localvariable631, (Object)symbol706, 1, constant3019);
smallint1871 = (Object)new_Type_SmallInt(2);
constant3020 = (Object)new_AST_Constant((Object)smallint1871);
send3445 = (Object)new_AST_Send((Object)localvariable631, (Object)symbol708, 1, constant3020);
smallint1872 = (Object)new_Type_SmallInt(3);
constant3021 = (Object)new_AST_Constant((Object)smallint1872);
send3446 = (Object)new_AST_Send((Object)localvariable631, (Object)symbol711, 1, constant3021);
block461 = (Object)new_AST_Block_with((Type_Array)array635, (Type_Array)empty_Type_Array, 1, 3, send3444, send3445, send3446);
send3447 = (Object)new_AST_Send((Object)block461, (Object)SMB_value_, 1, localvariable630);
symbol685 = (Object)new_Type_Symbol_cached(L"assert:");
send3448 = (Object)new_AST_Send((Object)localvariable630, (Object)symbol710, 0);
smallint1873 = (Object)new_Type_SmallInt(1);
constant3022 = (Object)new_AST_Constant((Object)smallint1873);
send3449 = (Object)new_AST_Send((Object)send3448, (Object)SMB__equal, 1, constant3022);
send3450 = (Object)new_AST_Send((Object)Self, (Object)symbol685, 1, send3449);
send3451 = (Object)new_AST_Send((Object)localvariable630, (Object)symbol707, 0);
smallint1874 = (Object)new_Type_SmallInt(2);
constant3023 = (Object)new_AST_Constant((Object)smallint1874);
send3452 = (Object)new_AST_Send((Object)send3451, (Object)SMB__equal, 1, constant3023);
send3453 = (Object)new_AST_Send((Object)Self, (Object)symbol685, 1, send3452);
send3454 = (Object)new_AST_Send((Object)localvariable630, (Object)symbol709, 0);
smallint1875 = (Object)new_Type_SmallInt(3);
constant3024 = (Object)new_AST_Constant((Object)smallint1875);
send3455 = (Object)new_AST_Send((Object)send3454, (Object)SMB__equal, 1, constant3024);
send3456 = (Object)new_AST_Send((Object)Self, (Object)symbol685, 1, send3455);
send3457 = (Object)new_AST_Send((Object)localvariable630, (Object)symbol710, 0);
send3458 = (Object)new_AST_Send((Object)localvariable630, (Object)symbol707, 0);
send3459 = (Object)new_AST_Send((Object)send3457, (Object)SMB__plus, 1, send3458);
send3460 = (Object)new_AST_Send((Object)localvariable630, (Object)symbol709, 0);
send3461 = (Object)new_AST_Send((Object)send3459, (Object)SMB__plus, 1, send3460);
method1231 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array634, 6, assign269, send3447, send3450, send3453, send3456, send3461);
symbol688 = (Object)new_Type_Symbol_cached(L"tmSimpleInstanceCreation");
methodclosure1115 = (Object)new_Runtime_MethodClosure(method1231);
store_method((Type_Class)class95, (Type_Symbol)symbol688, (Runtime_MethodClosure)methodclosure1115);

// BridgeTest>>tmNumberEquals
smallint1876 = (Object)new_Type_SmallInt(1);
constant3025 = (Object)new_AST_Constant((Object)smallint1876);
smallint1877 = (Object)new_Type_SmallInt(1);
constant3026 = (Object)new_AST_Constant((Object)smallint1877);
send3462 = (Object)new_AST_Send((Object)constant3025, (Object)SMB__equal, 1, constant3026);
method1232 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3462);
symbol701 = (Object)new_Type_Symbol_cached(L"tmNumberEquals");
methodclosure1116 = (Object)new_Runtime_MethodClosure(method1232);
store_method((Type_Class)class95, (Type_Symbol)symbol701, (Runtime_MethodClosure)methodclosure1116);

// BridgeTest>>tmBooleanFalse
method1233 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, False_Const);
symbol692 = (Object)new_Type_Symbol_cached(L"tmBooleanFalse");
methodclosure1117 = (Object)new_Runtime_MethodClosure(method1233);
store_method((Type_Class)class95, (Type_Symbol)symbol692, (Runtime_MethodClosure)methodclosure1117);

// BridgeTest>>tmCharacter
character416 = (Object)new_Type_Character(L'C');
constant3027 = (Object)new_AST_Constant((Object)character416);
method1234 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant3027);
symbol681 = (Object)new_Type_Symbol_cached(L"tmCharacter");
methodclosure1118 = (Object)new_Runtime_MethodClosure(method1234);
store_method((Type_Class)class95, (Type_Symbol)symbol681, (Runtime_MethodClosure)methodclosure1118);

// BridgeTest>>tmStringEquals
string647 = (Object)new_Type_String(L"String");
constant3028 = (Object)new_AST_Constant((Object)string647);
string648 = (Object)new_Type_String(L"String");
constant3029 = (Object)new_AST_Constant((Object)string648);
send3463 = (Object)new_AST_Send((Object)constant3028, (Object)SMB__equal, 1, constant3029);
method1235 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3463);
symbol689 = (Object)new_Type_Symbol_cached(L"tmStringEquals");
methodclosure1119 = (Object)new_Runtime_MethodClosure(method1235);
store_method((Type_Class)class95, (Type_Symbol)symbol689, (Runtime_MethodClosure)methodclosure1119);

// BridgeTest>>tmSymbolEquals
symbol712 = (Object)new_Type_Symbol_cached(L"Symbol");
constant3030 = (Object)new_AST_Constant((Object)symbol712);
constant3031 = (Object)new_AST_Constant((Object)symbol712);
send3464 = (Object)new_AST_Send((Object)constant3030, (Object)SMB__equal, 1, constant3031);
method1236 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3464);
symbol702 = (Object)new_Type_Symbol_cached(L"tmSymbolEquals");
methodclosure1120 = (Object)new_Runtime_MethodClosure(method1236);
store_method((Type_Class)class95, (Type_Symbol)symbol702, (Runtime_MethodClosure)methodclosure1120);

// BridgeTest>>tmString
string649 = (Object)new_Type_String(L"String");
constant3032 = (Object)new_AST_Constant((Object)string649);
method1237 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant3032);
symbol693 = (Object)new_Type_Symbol_cached(L"tmString");
methodclosure1121 = (Object)new_Runtime_MethodClosure(method1237);
store_method((Type_Class)class95, (Type_Symbol)symbol693, (Runtime_MethodClosure)methodclosure1121);

// BridgeTest>>tmNumberDiv
smallint1878 = (Object)new_Type_SmallInt(4);
constant3033 = (Object)new_AST_Constant((Object)smallint1878);
smallint1879 = (Object)new_Type_SmallInt(2);
constant3034 = (Object)new_AST_Constant((Object)smallint1879);
send3465 = (Object)new_AST_Send((Object)constant3033, (Object)SMB__divide, 1, constant3034);
method1238 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3465);
symbol674 = (Object)new_Type_Symbol_cached(L"tmNumberDiv");
methodclosure1122 = (Object)new_Runtime_MethodClosure(method1238);
store_method((Type_Class)class95, (Type_Symbol)symbol674, (Runtime_MethodClosure)methodclosure1122);

// BridgeTest>>tmBooleanEquals
send3466 = (Object)new_AST_Send((Object)True_Const, (Object)SMB__equal, 1, True_Const);
method1239 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3466);
symbol703 = (Object)new_Type_Symbol_cached(L"tmBooleanEquals");
methodclosure1123 = (Object)new_Runtime_MethodClosure(method1239);
store_method((Type_Class)class95, (Type_Symbol)symbol703, (Runtime_MethodClosure)methodclosure1123);

// BridgeTest>>tmNumberSubtract
smallint1880 = (Object)new_Type_SmallInt(2);
constant3035 = (Object)new_AST_Constant((Object)smallint1880);
smallint1881 = (Object)new_Type_SmallInt(1);
constant3036 = (Object)new_AST_Constant((Object)smallint1881);
send3467 = (Object)new_AST_Send((Object)constant3035, (Object)SMB__minus, 1, constant3036);
method1240 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3467);
symbol694 = (Object)new_Type_Symbol_cached(L"tmNumberSubtract");
methodclosure1124 = (Object)new_Runtime_MethodClosure(method1240);
store_method((Type_Class)class95, (Type_Symbol)symbol694, (Runtime_MethodClosure)methodclosure1124);

// BridgeTest>>tmVariableInstanceCreationSized
localvariable632 = (Object)new_AST_Variable_named(L"instance");
array636 = (Object)new_Type_Array_with(1, localvariable632);
smallint1882 = (Object)new_Type_SmallInt(100);
constant3037 = (Object)new_AST_Constant((Object)smallint1882);
send3468 = (Object)new_AST_Send((Object)classreference112, (Object)SMB_basicNew_, 1, constant3037);
assign270 = (Object)new_AST_Assign((Object)localvariable632, (Object)send3468);
smallint1883 = (Object)new_Type_SmallInt(1);
constant3038 = (Object)new_AST_Constant((Object)smallint1883);
smallint1884 = (Object)new_Type_SmallInt(1);
constant3039 = (Object)new_AST_Constant((Object)smallint1884);
send3469 = (Object)new_AST_Send((Object)localvariable632, (Object)SMB_at_put_, 2, constant3038, constant3039);
smallint1885 = (Object)new_Type_SmallInt(99);
constant3040 = (Object)new_AST_Constant((Object)smallint1885);
smallint1886 = (Object)new_Type_SmallInt(100);
constant3041 = (Object)new_AST_Constant((Object)smallint1886);
send3470 = (Object)new_AST_Send((Object)localvariable632, (Object)SMB_at_put_, 2, constant3040, constant3041);
smallint1887 = (Object)new_Type_SmallInt(1);
constant3042 = (Object)new_AST_Constant((Object)smallint1887);
send3471 = (Object)new_AST_Send((Object)localvariable632, (Object)SMB_at_, 1, constant3042);
smallint1888 = (Object)new_Type_SmallInt(1);
constant3043 = (Object)new_AST_Constant((Object)smallint1888);
send3472 = (Object)new_AST_Send((Object)send3471, (Object)SMB__equal, 1, constant3043);
send3473 = (Object)new_AST_Send((Object)Self, (Object)symbol685, 1, send3472);
method1241 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array636, 5, assign270, send3469, send3470, send3473, Self);
symbol683 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreationSized");
methodclosure1125 = (Object)new_Runtime_MethodClosure(method1241);
store_method((Type_Class)class95, (Type_Symbol)symbol683, (Runtime_MethodClosure)methodclosure1125);

// BridgeTest>>tmSymbolCharacterEquals
symbol713 = (Object)new_Type_Symbol_cached(L"S");
constant3044 = (Object)new_AST_Constant((Object)symbol713);
character417 = (Object)new_Type_Character(L'S');
constant3045 = (Object)new_AST_Constant((Object)character417);
send3474 = (Object)new_AST_Send((Object)constant3044, (Object)SMB__equal, 1, constant3045);
method1242 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3474);
symbol675 = (Object)new_Type_Symbol_cached(L"tmSymbolCharacterEquals");
methodclosure1126 = (Object)new_Runtime_MethodClosure(method1242);
store_method((Type_Class)class95, (Type_Symbol)symbol675, (Runtime_MethodClosure)methodclosure1126);

// BridgeTest>>tmMethodArgument:
localvariable633 = (Object)new_AST_Variable_named(L"arg");
array637 = (Object)new_Type_Array_with(1, localvariable633);
smallint1889 = (Object)new_Type_SmallInt(1);
constant3046 = (Object)new_AST_Constant((Object)smallint1889);
send3475 = (Object)new_AST_Send((Object)localvariable633, (Object)SMB__plus, 1, constant3046);
method1243 = (Object)new_AST_Method_with((Type_Array)array637, (Type_Array)empty_Type_Array, 1, send3475);
symbol704 = (Object)new_Type_Symbol_cached(L"tmMethodArgument:");
methodclosure1127 = (Object)new_Runtime_MethodClosure(method1243);
store_method((Type_Class)class95, (Type_Symbol)symbol704, (Runtime_MethodClosure)methodclosure1127);

// BridgeTest>>tmSymbol
constant3047 = (Object)new_AST_Constant((Object)symbol712);
method1244 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant3047);
symbol695 = (Object)new_Type_Symbol_cached(L"tmSymbol");
methodclosure1128 = (Object)new_Runtime_MethodClosure(method1244);
store_method((Type_Class)class95, (Type_Symbol)symbol695, (Runtime_MethodClosure)methodclosure1128);

// BridgeTest>>tmSimpleBasicArithmetik
smallint1890 = (Object)new_Type_SmallInt(1);
constant3048 = (Object)new_AST_Constant((Object)smallint1890);
smallint1891 = (Object)new_Type_SmallInt(2);
constant3049 = (Object)new_AST_Constant((Object)smallint1891);
send3476 = (Object)new_AST_Send((Object)constant3048, (Object)SMB__plus, 1, constant3049);
smallint1892 = (Object)new_Type_SmallInt(2);
constant3050 = (Object)new_AST_Constant((Object)smallint1892);
send3477 = (Object)new_AST_Send((Object)send3476, (Object)SMB__plus, 1, constant3050);
smallint1893 = (Object)new_Type_SmallInt(5);
constant3051 = (Object)new_AST_Constant((Object)smallint1893);
send3478 = (Object)new_AST_Send((Object)send3477, (Object)SMB__times, 1, constant3051);
method1245 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3478);
symbol684 = (Object)new_Type_Symbol_cached(L"tmSimpleBasicArithmetik");
methodclosure1129 = (Object)new_Runtime_MethodClosure(method1245);
store_method((Type_Class)class95, (Type_Symbol)symbol684, (Runtime_MethodClosure)methodclosure1129);

// BridgeTest>>tmFibonacci
method1246 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, Self);
symbol676 = (Object)new_Type_Symbol_cached(L"tmFibonacci");
methodclosure1130 = (Object)new_Runtime_MethodClosure(method1246);
store_method((Type_Class)class95, (Type_Symbol)symbol676, (Runtime_MethodClosure)methodclosure1130);

// BridgeTest>>tmNumberAdd
smallint1894 = (Object)new_Type_SmallInt(1);
constant3052 = (Object)new_AST_Constant((Object)smallint1894);
smallint1895 = (Object)new_Type_SmallInt(1);
constant3053 = (Object)new_AST_Constant((Object)smallint1895);
send3479 = (Object)new_AST_Send((Object)constant3052, (Object)SMB__plus, 1, constant3053);
method1247 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3479);
symbol705 = (Object)new_Type_Symbol_cached(L"tmNumberAdd");
methodclosure1131 = (Object)new_Runtime_MethodClosure(method1247);
store_method((Type_Class)class95, (Type_Symbol)symbol705, (Runtime_MethodClosure)methodclosure1131);

// BridgeTest>>tmMethodArguments:with:with:
localvariable634 = (Object)new_AST_Variable_named(L"arg1");
localvariable635 = (Object)new_AST_Variable_named(L"arg2");
localvariable636 = (Object)new_AST_Variable_named(L"arg3");
array638 = (Object)new_Type_Array_with(3, localvariable634, localvariable635, localvariable636);
send3480 = (Object)new_AST_Send((Object)localvariable634, (Object)SMB__concat, 1, localvariable635);
send3481 = (Object)new_AST_Send((Object)send3480, (Object)SMB__concat, 1, localvariable636);
method1248 = (Object)new_AST_Method_with((Type_Array)array638, (Type_Array)empty_Type_Array, 1, send3481);
symbol696 = (Object)new_Type_Symbol_cached(L"tmMethodArguments:with:with:");
methodclosure1132 = (Object)new_Runtime_MethodClosure(method1248);
store_method((Type_Class)class95, (Type_Symbol)symbol696, (Runtime_MethodClosure)methodclosure1132);

// BridgeTest>>assert:
localvariable637 = (Object)new_AST_Variable_named(L"bool");
array639 = (Object)new_Type_Array_with(1, localvariable637);
symbol714 = (Object)new_Type_Symbol_cached(L"fail");
send3482 = (Object)new_AST_Send((Object)Self, (Object)symbol714, 0);
block462 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, 1, send3482);
send3483 = (Object)new_AST_Send((Object)localvariable637, (Object)SMB_ifFalse_, 1, block462);
method1249 = (Object)new_AST_Method_with((Type_Array)array639, (Type_Array)empty_Type_Array, 1, send3483);
methodclosure1133 = (Object)new_Runtime_MethodClosure(method1249);
store_method((Type_Class)class95, (Type_Symbol)symbol685, (Runtime_MethodClosure)methodclosure1133);

// BridgeTest>>tmNumber
smallint1896 = (Object)new_Type_SmallInt(1);
constant3054 = (Object)new_AST_Constant((Object)smallint1896);
method1250 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant3054);
symbol677 = (Object)new_Type_Symbol_cached(L"tmNumber");
methodclosure1134 = (Object)new_Runtime_MethodClosure(method1250);
store_method((Type_Class)class95, (Type_Symbol)symbol677, (Runtime_MethodClosure)methodclosure1134);

// BridgeTest>>tmExtendedReturn
variable60 = (Object)new_AST_Variable_named(L"return");
array640 = (Object)new_Type_Array_with(1, variable60);
smallint1897 = (Object)new_Type_SmallInt(1);
constant3055 = (Object)new_AST_Constant((Object)smallint1897);
smallint1898 = (Object)new_Type_SmallInt(2);
constant3056 = (Object)new_AST_Constant((Object)smallint1898);
send3484 = (Object)new_AST_Send((Object)constant3055, (Object)SMB__gt, 1, constant3056);
smallint1899 = (Object)new_Type_SmallInt(1);
constant3057 = (Object)new_AST_Constant((Object)smallint1899);
send3485 = (Object)new_AST_Send((Object)variable60, (Object)SMB_escape_, 1, constant3057);
block463 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 2, 1, send3485);
smallint1900 = (Object)new_Type_SmallInt(2);
constant3058 = (Object)new_AST_Constant((Object)smallint1900);
send3486 = (Object)new_AST_Send((Object)variable60, (Object)SMB_escape_, 1, constant3058);
block464 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 2, 1, send3486);
send3487 = (Object)new_AST_Send((Object)send3484, (Object)SMB_ifTrue_ifFalse_, 2, block463, block464);
block465 = (Object)new_AST_Block_with((Type_Array)array640, (Type_Array)empty_Type_Array, 1, 2, send3487, Self);
send3488 = (Object)new_AST_Send((Object)AST_Callec_Reference, (Object)SMB_on_, 1, block465);
method1251 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3488);
symbol697 = (Object)new_Type_Symbol_cached(L"tmExtendedReturn");
methodclosure1135 = (Object)new_Runtime_MethodClosure(method1251);
store_method((Type_Class)class95, (Type_Symbol)symbol697, (Runtime_MethodClosure)methodclosure1135);

// BridgeTest>>tmCharacterEquals
character418 = (Object)new_Type_Character(L'C');
constant3059 = (Object)new_AST_Constant((Object)character418);
character419 = (Object)new_Type_Character(L'C');
constant3060 = (Object)new_AST_Constant((Object)character419);
send3489 = (Object)new_AST_Send((Object)constant3059, (Object)SMB__equal, 1, constant3060);
method1252 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3489);
symbol686 = (Object)new_Type_Symbol_cached(L"tmCharacterEquals");
methodclosure1136 = (Object)new_Runtime_MethodClosure(method1252);
store_method((Type_Class)class95, (Type_Symbol)symbol686, (Runtime_MethodClosure)methodclosure1136);

// BridgeTest>>tmBooleanSymbolEquals
symbol715 = (Object)new_Type_Symbol_cached(L"true");
constant3061 = (Object)new_AST_Constant((Object)symbol715);
send3490 = (Object)new_AST_Send((Object)True_Const, (Object)SMB__equal, 1, constant3061);
method1253 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3490);
symbol678 = (Object)new_Type_Symbol_cached(L"tmBooleanSymbolEquals");
methodclosure1137 = (Object)new_Runtime_MethodClosure(method1253);
store_method((Type_Class)class95, (Type_Symbol)symbol678, (Runtime_MethodClosure)methodclosure1137);

// BridgeTest>>tmVariableInstanceCreation
localvariable638 = (Object)new_AST_Variable_named(L"instance");
array641 = (Object)new_Type_Array_with(1, localvariable638);
send3491 = (Object)new_AST_Send((Object)classreference112, (Object)SMB_basicNew, 0);
assign271 = (Object)new_AST_Assign((Object)localvariable638, (Object)send3491);
localvariable639 = (Object)new_AST_Variable_named(L"receiver");
array642 = (Object)new_Type_Array_with(1, localvariable639);
smallint1901 = (Object)new_Type_SmallInt(1);
constant3062 = (Object)new_AST_Constant((Object)smallint1901);
send3492 = (Object)new_AST_Send((Object)localvariable639, (Object)symbol706, 1, constant3062);
smallint1902 = (Object)new_Type_SmallInt(2);
constant3063 = (Object)new_AST_Constant((Object)smallint1902);
send3493 = (Object)new_AST_Send((Object)localvariable639, (Object)symbol708, 1, constant3063);
smallint1903 = (Object)new_Type_SmallInt(3);
constant3064 = (Object)new_AST_Constant((Object)smallint1903);
send3494 = (Object)new_AST_Send((Object)localvariable639, (Object)symbol711, 1, constant3064);
block466 = (Object)new_AST_Block_with((Type_Array)array642, (Type_Array)empty_Type_Array, 1, 3, send3492, send3493, send3494);
send3495 = (Object)new_AST_Send((Object)block466, (Object)SMB_value_, 1, localvariable638);
send3496 = (Object)new_AST_Send((Object)localvariable638, (Object)symbol710, 0);
smallint1904 = (Object)new_Type_SmallInt(1);
constant3065 = (Object)new_AST_Constant((Object)smallint1904);
send3497 = (Object)new_AST_Send((Object)send3496, (Object)SMB__equal, 1, constant3065);
send3498 = (Object)new_AST_Send((Object)Self, (Object)symbol685, 1, send3497);
send3499 = (Object)new_AST_Send((Object)localvariable638, (Object)symbol707, 0);
smallint1905 = (Object)new_Type_SmallInt(2);
constant3066 = (Object)new_AST_Constant((Object)smallint1905);
send3500 = (Object)new_AST_Send((Object)send3499, (Object)SMB__equal, 1, constant3066);
send3501 = (Object)new_AST_Send((Object)Self, (Object)symbol685, 1, send3500);
send3502 = (Object)new_AST_Send((Object)localvariable638, (Object)symbol709, 0);
smallint1906 = (Object)new_Type_SmallInt(3);
constant3067 = (Object)new_AST_Constant((Object)smallint1906);
send3503 = (Object)new_AST_Send((Object)send3502, (Object)SMB__equal, 1, constant3067);
send3504 = (Object)new_AST_Send((Object)Self, (Object)symbol685, 1, send3503);
send3505 = (Object)new_AST_Send((Object)localvariable638, (Object)symbol710, 0);
send3506 = (Object)new_AST_Send((Object)localvariable638, (Object)symbol707, 0);
send3507 = (Object)new_AST_Send((Object)send3505, (Object)SMB__plus, 1, send3506);
send3508 = (Object)new_AST_Send((Object)localvariable638, (Object)symbol709, 0);
send3509 = (Object)new_AST_Send((Object)send3507, (Object)SMB__plus, 1, send3508);
method1254 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array641, 6, assign271, send3495, send3498, send3501, send3504, send3509);
symbol690 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreation");
methodclosure1138 = (Object)new_Runtime_MethodClosure(method1254);
store_method((Type_Class)class95, (Type_Symbol)symbol690, (Runtime_MethodClosure)methodclosure1138);

// BridgeTest>>tmBooleanTrue
method1255 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, True_Const);
symbol698 = (Object)new_Type_Symbol_cached(L"tmBooleanTrue");
methodclosure1139 = (Object)new_Runtime_MethodClosure(method1255);
store_method((Type_Class)class95, (Type_Symbol)symbol698, (Runtime_MethodClosure)methodclosure1139);
classreference114 = (Object)new_Organization_ClassReference((Type_Class)class95);
}


/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanEquals)
/*
tmBooleanEquals
	^ true = true
*/
Object send3510 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol703, 0);
Object result = (Object)Eval((Object)send3510);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanFalse)
/*
tmBooleanFalse
	^ false
*/
Object send3511 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol692, 0);
Object result = (Object)Eval((Object)send3511);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanSymbolEquals)
/*
tmBooleanSymbolEquals
	^ true = #true
*/
Object send3512 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol678, 0);
Object result = (Object)Eval((Object)send3512);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanTrue)
/*
tmBooleanTrue
	^ true
*/
Object send3513 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol698, 0);
Object result = (Object)Eval((Object)send3513);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacter)
/*
tmCharacter
	^ $C
*/
Object send3514 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol681, 0);
Object result = (Object)Eval((Object)send3514);
ASSERT_EMPTY_STACK
assert0(((Type_Character)result)->value == 'C');
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacterEquals)
/*
tmCharacterEquals
	^ $C = $C
*/
Object send3515 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol686, 0);
Object result = (Object)Eval((Object)send3515);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacterStringEquals)
/*
tmCharacterStringEquals
	^ $C = 'C'
*/
Object send3516 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol700, 0);
Object result = (Object)Eval((Object)send3516);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmClassReferenceReturn)
/*
tmClassReferenceReturn
	^ Metaclass name.
*/
Object send3517 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol699, 0);
Object result = (Object)Eval((Object)send3517);
ASSERT_EMPTY_STACK
Object symbol716 = (Object)new_Type_Symbol_cached(L"Metaclass");
result = Eval_Send1(result, SMB__equal, symbol716);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmExtendedReturn)
/*
tmExtendedReturn
	1 > 2 ifTrue: [ ^ 1 ]
		ifFalse: [ ^ 2].
*/
Object send3518 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol697, 0);
Object result = (Object)Eval((Object)send3518);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmLocalVariable)
/*
tmLocalVariable
	|a|
	a := 1.
	^ a
*/
Object send3519 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol691, 0);
Object result = (Object)Eval((Object)send3519);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArgument_)
/*
tmMethodArgument: arg 
	<arg1: 1>
	^ arg + 1
*/
Object smallint1907 = (Object)new_Type_SmallInt(1);
Object constant3068 = (Object)new_AST_Constant((Object)smallint1907);
Object send3520 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol704, 1, constant3068);
Object result = (Object)Eval((Object)send3520);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArguments_with_with_)
/*
tmMethodArguments: arg1 with: arg2 with: arg3 
	<arg1: 'asdf' arg2: 'asdf' arg3: 'df'>
	^ arg1 , arg2 , arg3
*/
Object string650 = (Object)new_Type_String(L"asdf");
Object constant3069 = (Object)new_AST_Constant((Object)string650);
Object string651 = (Object)new_Type_String(L"asdf");
Object constant3070 = (Object)new_AST_Constant((Object)string651);
Object string652 = (Object)new_Type_String(L"df");
Object constant3071 = (Object)new_AST_Constant((Object)string652);
Object send3521 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol696, 3, constant3069, constant3070, constant3071);
Object result = (Object)Eval((Object)send3521);
ASSERT_EMPTY_STACK
Object string653 = (Object)new_Type_String(L"asdfasdfdf");
result = Eval_Send1(result, SMB__equal, string653);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumber)
/*
tmNumber
	^ 1
*/
Object send3522 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol677, 0);
Object result = (Object)Eval((Object)send3522);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberAdd)
/*
tmNumberAdd
	^ 1 + 1
*/
Object send3523 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol705, 0);
Object result = (Object)Eval((Object)send3523);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberDiv)
/*
tmNumberDiv
	^ 4 / 2
*/
Object send3524 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol674, 0);
Object result = (Object)Eval((Object)send3524);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberEquals)
/*
tmNumberEquals
	^ 1 = 1
*/
Object send3525 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol701, 0);
Object result = (Object)Eval((Object)send3525);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberMult)
/*
tmNumberMult
	^ 2 * 3
*/
Object send3526 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol679, 0);
Object result = (Object)Eval((Object)send3526);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberSubtract)
/*
tmNumberSubtract
	^ 2 - 1
*/
Object send3527 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol694, 0);
Object result = (Object)Eval((Object)send3527);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleBasicArithmetik)
/*
tmSimpleBasicArithmetik
	^ (1 + 2) + 2 * 5
*/
Object send3528 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol684, 0);
Object result = (Object)Eval((Object)send3528);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 25);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleReturn)
/*
tmSimpleReturn
	^ 1
*/
Object send3529 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol680, 0);
Object result = (Object)Eval((Object)send3529);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmString)
/*
tmString
	^ 'String'
*/
Object send3530 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol693, 0);
Object result = (Object)Eval((Object)send3530);
ASSERT_EMPTY_STACK
Object string654 = (Object)new_Type_String(L"String");
result = Eval_Send1(result, SMB__equal, string654);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmStringEquals)
/*
tmStringEquals
	^ 'String' = 'String'
*/
Object send3531 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol689, 0);
Object result = (Object)Eval((Object)send3531);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbol)
/*
tmSymbol
	^ #Symbol
*/
Object send3532 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol695, 0);
Object result = (Object)Eval((Object)send3532);
ASSERT_EMPTY_STACK
result = Eval_Send1(result, SMB__equal, symbol712);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbolCharacterEquals)
/*
tmSymbolCharacterEquals
	^ #S = $S
*/
Object send3533 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol675, 0);
Object result = (Object)Eval((Object)send3533);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbolEquals)
/*
tmSymbolEquals
	^ #Symbol = #Symbol
*/
Object send3534 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol702, 0);
Object result = (Object)Eval((Object)send3534);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_assert_)
/*
assert: bool
	<arg: true>
	^ bool ifFalse: [ self fail. ]
	
*/
Object send3535 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol685, 1, True_Const);
Object result = (Object)Eval((Object)send3535);
ASSERT_EMPTY_STACK
assert0(result == Nil);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmFibonacci)
/*
tmFibonacci
	
*/
Object send3536 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol676, 0);
Object result = (Object)Eval((Object)send3536);
ASSERT_EMPTY_STACK
assert0(result == ((AST_Constant)test_Class_Instance)->constant);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleInstanceCreation)
/*
tmSimpleInstanceCreation
	| instance |
	instance := StandardTestClass basicNew.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	^ instance a + instance b  + instance c
	
*/
Object send3537 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol688, 0);
Object result = (Object)Eval((Object)send3537);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmVariableInstanceCreation)
/*
tmVariableInstanceCreation
	| instance |
	instance := StandardVariableTestClass basicNew.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	^ instance a + instance b  + instance c
	
*/
Object send3538 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol690, 0);
Object result = (Object)Eval((Object)send3538);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmVariableInstanceCreationSized)
/*
tmVariableInstanceCreationSized
	| instance |
	instance := StandardVariableTestClass basicNew: 100.
	instance at: 1 put: 1.
	instance at: 99 put: 100.
	self assert: (instance at: 1) = 1.
	"TODO match one based index of Smalltalk with 0 based index of Pinocchio"
	self assert: (instance at: 99) = 100.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	
	^ instance a + instance b + instance c + (instance at: 1) + (instance at: 99)
	
*/
Object send3539 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol683, 0);
Object result = (Object)Eval((Object)send3539);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 107);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

TEST_SUITE(AutoGenTest,
{
    create_ast();
    Test_Class = (Type_Class)class95;
    test_Class_Instance = (Object)new_AST_Constant((Object)instantiate((Type_Class)Test_Class));

    RUN_TEST(AutoGenTest_tmSimpleReturn);
    RUN_TEST(AutoGenTest_tmNumberMult);
    RUN_TEST(AutoGenTest_tmSymbol);
    RUN_TEST(AutoGenTest_tmNumber);
    RUN_TEST(AutoGenTest_tmBooleanFalse);
    RUN_TEST(AutoGenTest_tmString);
    RUN_TEST(AutoGenTest_tmLocalVariable);
    RUN_TEST(AutoGenTest_tmSymbolCharacterEquals);
    RUN_TEST(AutoGenTest_tmMethodArgument_);
    RUN_TEST(AutoGenTest_tmNumberEquals);
    RUN_TEST(AutoGenTest_tmClassReferenceReturn);
    RUN_TEST(AutoGenTest_tmSimpleInstanceCreation);
    RUN_TEST(AutoGenTest_tmCharacterEquals);
    RUN_TEST(AutoGenTest_tmCharacter);
    RUN_TEST(AutoGenTest_tmVariableInstanceCreation);
    RUN_TEST(AutoGenTest_tmBooleanTrue);
    RUN_TEST(AutoGenTest_tmNumberSubtract);
    RUN_TEST(AutoGenTest_tmNumberAdd);
    RUN_TEST(AutoGenTest_tmBooleanEquals);
    RUN_TEST(AutoGenTest_tmCharacterStringEquals);
    RUN_TEST(AutoGenTest_tmMethodArguments_with_with_);
    RUN_TEST(AutoGenTest_tmSimpleBasicArithmetik);
    RUN_TEST(AutoGenTest_tmStringEquals);
    RUN_TEST(AutoGenTest_tmNumberDiv);
    RUN_TEST(AutoGenTest_tmSymbolEquals);
    RUN_TEST(AutoGenTest_assert_);
    RUN_TEST(AutoGenTest_tmFibonacci);
    RUN_TEST(AutoGenTest_tmVariableInstanceCreationSized);
    RUN_TEST(AutoGenTest_tmExtendedReturn);
    RUN_TEST(AutoGenTest_tmBooleanSymbolEquals);
})