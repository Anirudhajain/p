// Auto generated Tests from PinocchioCDumperTest

// Test Object to put test methods in
Type_Class Test_Class;
Object test_Class_Instance;
// Test Method symbol
Type_Symbol SMB_runTestCase;


/* ========================================================================= */

NEW_TEST(AutoGenTest_tmClassReferenceReturn)
/*
tmClassReferenceReturn
	^ Metaclass name.
*/
Object send3439 = (Object)new_AST_Send((Object)Metaclass_Reference, (Object)SMB_name, 0);
Object symbol489 = (Object)new_Type_Symbol_cached(L"tmClassReferenceReturn");

// nil>>tmClassReferenceReturn
Object method981 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3439);
Object methodclosure981 = (Object)new_Runtime_MethodClosure(method981);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol489, (Runtime_MethodClosure)methodclosure981);

Object send3440 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol489, 0);
Object result = (Object)Eval((Object)send3440);
ASSERT_EMPTY_STACK
Object symbol490 = (Object)new_Type_Symbol_cached(L"Metaclass");
result = Eval_Send1(result, SMB__equal,symbol490);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmExtendedReturn)
/*
tmExtendedReturn
	1 > 2 ifTrue: [ ^ 1 ]
		ifFalse: [ ^ 2].
*/
Object variable600 = (Object)new_AST_Variable_named(L"return");
Object array3013 = (Object)new_Type_Array_with(1, variable600);
Object smallint336 = (Object)new_Type_SmallInt(1);
Object constant740 = (Object)new_AST_Constant(smallint336);
Object smallint337 = (Object)new_Type_SmallInt(2);
Object constant741 = (Object)new_AST_Constant(smallint337);
Object send3443 = (Object)new_AST_Send((Object)constant740, (Object)SMB__gt, 1, constant741);
Object smallint338 = (Object)new_Type_SmallInt(1);
Object constant742 = (Object)new_AST_Constant(smallint338);
Object send3444 = (Object)new_AST_Send((Object)variable600, (Object)SMB_escape_, 1, constant742);
Object block951 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, 1, send3444);
Object smallint339 = (Object)new_Type_SmallInt(2);
Object constant743 = (Object)new_AST_Constant(smallint339);
Object send3445 = (Object)new_AST_Send((Object)variable600, (Object)SMB_escape_, 1, constant743);
Object block952 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 2, 1, send3445);
Object send3442 = (Object)new_AST_Send((Object)send3443, (Object)SMB_ifTrue_ifFalse_, 2, block951, block952);
Object block950 = (Object)new_AST_Block_with((Type_Array)array3013, (Type_Array)empty_Type_Array, 0, 2, send3442, Self);
Object send3441 = (Object)new_AST_Send((Object)AST_Callec_Reference, (Object)SMB_on_, 1, block950);
Object symbol491 = (Object)new_Type_Symbol_cached(L"tmExtendedReturn");

// nil>>tmExtendedReturn
Object method982 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3441);
Object methodclosure982 = (Object)new_Runtime_MethodClosure(method982);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol491, (Runtime_MethodClosure)methodclosure982);

Object send3446 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol491, 0);
Object result = (Object)Eval((Object)send3446);
ASSERT_EMPTY_STACK
print_Class(result);
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArgument_)
/*
tmMethodArgument: arg 
	<arg1: 1>
	^ arg + 1
*/
Object localvariable622 = (Object)new_AST_Variable_named(L"arg");
Object smallint340 = (Object)new_Type_SmallInt(1);
Object constant744 = (Object)new_AST_Constant(smallint340);
Object send3447 = (Object)new_AST_Send((Object)localvariable622, (Object)SMB__plus, 1, constant744);
Object symbol492 = (Object)new_Type_Symbol_cached(L"tmMethodArgument:");

// nil>>tmMethodArgument:
Object array3014 = (Object)new_Type_Array_with(1, localvariable622);
Object method983 = (Object)new_AST_Method_with((Type_Array)array3014, (Type_Array)empty_Type_Array, 1, send3447);
Object methodclosure983 = (Object)new_Runtime_MethodClosure(method983);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol492, (Runtime_MethodClosure)methodclosure983);

Object smallint341 = (Object)new_Type_SmallInt(1);
Object constant745 = (Object)new_AST_Constant(smallint341);
Object send3448 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol492, 1, constant745);
Object result = (Object)Eval((Object)send3448);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArguments_with_with_)
/*
tmMethodArguments: arg1 with: arg2 with: arg3 
	<arg1: 'asdf' arg2: 'asdf' arg3: 'df'>
	^ arg1 , arg2 , arg3
*/
Object localvariable623 = (Object)new_AST_Variable_named(L"arg1");
Object localvariable624 = (Object)new_AST_Variable_named(L"arg2");
Object send3450 = (Object)new_AST_Send((Object)localvariable623, (Object)SMB__concat, 1, localvariable624);
Object localvariable625 = (Object)new_AST_Variable_named(L"arg3");
Object send3449 = (Object)new_AST_Send((Object)send3450, (Object)SMB__concat, 1, localvariable625);
Object symbol493 = (Object)new_Type_Symbol_cached(L"tmMethodArguments:with:with:");

// nil>>tmMethodArguments:with:with:
Object array3015 = (Object)new_Type_Array_with(3, localvariable623, localvariable624, localvariable625);
Object method984 = (Object)new_AST_Method_with((Type_Array)array3015, (Type_Array)empty_Type_Array, 1, send3449);
Object methodclosure984 = (Object)new_Runtime_MethodClosure(method984);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol493, (Runtime_MethodClosure)methodclosure984);

Object string351 = (Object)new_Type_String(L"asdf");
Object constant746 = (Object)new_AST_Constant(string351);
Object string352 = (Object)new_Type_String(L"asdf");
Object constant747 = (Object)new_AST_Constant(string352);
Object string353 = (Object)new_Type_String(L"df");
Object constant748 = (Object)new_AST_Constant(string353);
Object send3451 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol493, 3, constant746, constant747, constant748);
Object result = (Object)Eval((Object)send3451);
ASSERT_EMPTY_STACK
Object string354 = (Object)new_Type_String(L"asdfasdfdf");
result = Eval_Send1(result, SMB__equal,string354);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleBasicArithmetik)
/*
tmSimpleBasicArithmetik
	^ (1 + 2) + 2 * 5
*/
Object smallint342 = (Object)new_Type_SmallInt(1);
Object constant749 = (Object)new_AST_Constant(smallint342);
Object smallint343 = (Object)new_Type_SmallInt(2);
Object constant750 = (Object)new_AST_Constant(smallint343);
Object send3454 = (Object)new_AST_Send((Object)constant749, (Object)SMB__plus, 1, constant750);
Object smallint344 = (Object)new_Type_SmallInt(2);
Object constant751 = (Object)new_AST_Constant(smallint344);
Object send3453 = (Object)new_AST_Send((Object)send3454, (Object)SMB__plus, 1, constant751);
Object smallint345 = (Object)new_Type_SmallInt(5);
Object constant752 = (Object)new_AST_Constant(smallint345);
Object send3452 = (Object)new_AST_Send((Object)send3453, (Object)SMB__times, 1, constant752);
Object symbol494 = (Object)new_Type_Symbol_cached(L"tmSimpleBasicArithmetik");

// nil>>tmSimpleBasicArithmetik
Object method985 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3452);
Object methodclosure985 = (Object)new_Runtime_MethodClosure(method985);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol494, (Runtime_MethodClosure)methodclosure985);

Object send3455 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol494, 0);
Object result = (Object)Eval((Object)send3455);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 25);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleReturn)
/*
tmSimpleReturn
	^ 1
*/
Object smallint346 = (Object)new_Type_SmallInt(1);
Object constant753 = (Object)new_AST_Constant(smallint346);
Object symbol495 = (Object)new_Type_Symbol_cached(L"tmSimpleReturn");

// nil>>tmSimpleReturn
Object method986 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant753);
Object methodclosure986 = (Object)new_Runtime_MethodClosure(method986);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol495, (Runtime_MethodClosure)methodclosure986);

Object send3456 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol495, 0);
Object result = (Object)Eval((Object)send3456);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

TEST_SUITE(AutoGenTest,
{
    Test_Class = new_Class_named((Object)Type_Object_Class, L"Test_Object", Type_Object_Class->type);
    test_Class_Instance = (Object)new_AST_Constant((Object)instantiate((Type_Class)Test_Class));

    RUN_TEST(AutoGenTest_tmSimpleBasicArithmetik);
    RUN_TEST(AutoGenTest_tmClassReferenceReturn);
    RUN_TEST(AutoGenTest_tmMethodArguments_with_with_);
    RUN_TEST(AutoGenTest_tmSimpleReturn);
    RUN_TEST(AutoGenTest_tmExtendedReturn);
    RUN_TEST(AutoGenTest_tmMethodArgument_);
})
