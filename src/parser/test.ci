// Auto generated Tests from BridgeTest

// Test Object to put test methods in
Type_Class Test_Class;
Object test_Class_Instance;
// Test Method symbol
Type_Symbol SMB_runTestCase;
Object symbol11;
Object class146;
Object classreference146;
Object symbol9;
Object class147;
Object classreference147;
Object symbol20;
Object arraylayout30;
Object instancevariable175;
Object instancevariable176;
Object instancevariable177;
Object class148;
Object method1115;
Object symbol45;
Object methodclosure1106;
Object localvariable513;
Object array484;
Object assign294;
Object method1116;
Object symbol41;
Object methodclosure1107;
Object localvariable514;
Object array485;
Object assign295;
Object method1117;
Object symbol43;
Object methodclosure1108;
Object method1118;
Object symbol44;
Object methodclosure1109;
Object localvariable515;
Object array486;
Object assign296;
Object method1119;
Object symbol42;
Object methodclosure1110;
Object method1120;
Object symbol46;
Object methodclosure1111;
Object classreference148;
Object symbol27;
Object objectlayout81;
Object instancevariable178;
Object instancevariable179;
Object instancevariable180;
Object class149;
Object method1121;
Object methodclosure1112;
Object localvariable516;
Object array487;
Object assign297;
Object method1122;
Object methodclosure1113;
Object localvariable517;
Object array488;
Object assign298;
Object method1123;
Object methodclosure1114;
Object method1124;
Object methodclosure1115;
Object localvariable518;
Object array489;
Object assign299;
Object method1125;
Object methodclosure1116;
Object method1126;
Object methodclosure1117;
Object classreference149;
Object symbol5;
Object class150;
Object smallint1557;
Object constant1960;
Object smallint1558;
Object constant1961;
Object send3407;
Object method1127;
Object symbol19;
Object methodclosure1118;
Object smallint1559;
Object constant1962;
Object smallint1560;
Object constant1963;
Object send3408;
Object method1128;
Object symbol31;
Object methodclosure1119;
Object send3409;
Object method1129;
Object symbol39;
Object methodclosure1120;
Object localvariable519;
Object array490;
Object send3410;
Object assign300;
Object localvariable520;
Object array491;
Object smallint1561;
Object constant1964;
Object send3411;
Object smallint1562;
Object constant1965;
Object send3412;
Object smallint1563;
Object constant1966;
Object send3413;
Object block205;
Object send3414;
Object symbol49;
Object send3415;
Object smallint1564;
Object constant1967;
Object send3416;
Object send3417;
Object send3418;
Object smallint1565;
Object constant1968;
Object send3419;
Object send3420;
Object send3421;
Object smallint1566;
Object constant1969;
Object send3422;
Object send3423;
Object send3424;
Object send3425;
Object send3426;
Object send3427;
Object send3428;
Object method1130;
Object symbol28;
Object methodclosure1121;
Object smallint1567;
Object constant1970;
Object method1131;
Object symbol40;
Object methodclosure1122;
Object localvariable521;
Object array492;
Object smallint1568;
Object constant1971;
Object send3429;
Object assign301;
Object smallint1569;
Object constant1972;
Object smallint1570;
Object constant1973;
Object send3430;
Object smallint1571;
Object constant1974;
Object smallint1572;
Object constant1975;
Object send3431;
Object smallint1573;
Object constant1976;
Object send3432;
Object smallint1574;
Object constant1977;
Object send3433;
Object send3434;
Object smallint1575;
Object constant1978;
Object send3435;
Object smallint1576;
Object constant1979;
Object send3436;
Object send3437;
Object localvariable522;
Object array493;
Object smallint1577;
Object constant1980;
Object send3438;
Object smallint1578;
Object constant1981;
Object send3439;
Object smallint1579;
Object constant1982;
Object send3440;
Object block206;
Object send3441;
Object send3442;
Object smallint1580;
Object constant1983;
Object send3443;
Object send3444;
Object send3445;
Object smallint1581;
Object constant1984;
Object send3446;
Object send3447;
Object send3448;
Object smallint1582;
Object constant1985;
Object send3449;
Object send3450;
Object send3451;
Object send3452;
Object send3453;
Object smallint1583;
Object constant1986;
Object send3454;
Object send3455;
Object send3456;
Object send3457;
Object smallint1584;
Object constant1987;
Object send3458;
Object send3459;
Object method1132;
Object symbol32;
Object methodclosure1123;
Object localvariable523;
Object array494;
Object send3460;
Object assign302;
Object localvariable524;
Object array495;
Object smallint1585;
Object constant1988;
Object send3461;
Object smallint1586;
Object constant1989;
Object send3462;
Object smallint1587;
Object constant1990;
Object send3463;
Object block207;
Object send3464;
Object send3465;
Object smallint1588;
Object constant1991;
Object send3466;
Object send3467;
Object send3468;
Object smallint1589;
Object constant1992;
Object send3469;
Object send3470;
Object send3471;
Object smallint1590;
Object constant1993;
Object send3472;
Object send3473;
Object send3474;
Object send3475;
Object send3476;
Object send3477;
Object send3478;
Object method1133;
Object symbol21;
Object methodclosure1124;
Object symbol51;
Object constant1994;
Object constant1995;
Object send3479;
Object method1134;
Object symbol13;
Object methodclosure1125;
Object variable33;
Object array496;
Object smallint1591;
Object constant1996;
Object smallint1592;
Object constant1997;
Object send3480;
Object smallint1593;
Object constant1998;
Object send3481;
Object block208;
Object smallint1594;
Object constant1999;
Object send3482;
Object block209;
Object send3483;
Object block210;
Object send3484;
Object method1135;
Object symbol29;
Object methodclosure1126;
Object localvariable525;
Object array497;
Object symbol66;
Object send3485;
Object block211;
Object send3486;
Object method1136;
Object methodclosure1127;
Object smallint1595;
Object constant2000;
Object smallint1596;
Object constant2001;
Object send3487;
Object method1137;
Object symbol33;
Object methodclosure1128;
Object localvariable526;
Object array498;
Object smallint1597;
Object constant2002;
Object assign303;
Object method1138;
Object symbol22;
Object methodclosure1129;
Object method1139;
Object symbol14;
Object methodclosure1130;
Object smallint1598;
Object constant2003;
Object smallint1599;
Object constant2004;
Object send3488;
Object method1140;
Object symbol34;
Object methodclosure1131;
Object send3489;
Object method1141;
Object symbol23;
Object methodclosure1132;
Object character112;
Object constant2005;
Object method1142;
Object symbol15;
Object methodclosure1133;
Object method1143;
Object symbol35;
Object methodclosure1134;
Object string261;
Object constant2006;
Object string262;
Object constant2007;
Object send3490;
Object method1144;
Object symbol24;
Object methodclosure1135;
Object method1145;
Object symbol16;
Object methodclosure1136;
Object localvariable527;
Object localvariable528;
Object localvariable529;
Object array499;
Object send3491;
Object send3492;
Object method1146;
Object symbol36;
Object methodclosure1137;
Object localvariable530;
Object array500;
Object smallint1600;
Object constant2008;
Object send3493;
Object method1147;
Object symbol25;
Object methodclosure1138;
Object smallint1601;
Object constant2009;
Object smallint1602;
Object constant2010;
Object send3494;
Object smallint1603;
Object constant2011;
Object send3495;
Object smallint1604;
Object constant2012;
Object send3496;
Object method1148;
Object symbol17;
Object methodclosure1139;
Object smallint1605;
Object constant2013;
Object method1149;
Object symbol37;
Object methodclosure1140;
Object string263;
Object constant2014;
Object method1150;
Object symbol26;
Object methodclosure1141;
Object character113;
Object constant2015;
Object character114;
Object constant2016;
Object send3497;
Object method1151;
Object symbol18;
Object methodclosure1142;
Object smallint1606;
Object constant2017;
Object smallint1607;
Object constant2018;
Object send3498;
Object method1152;
Object symbol30;
Object methodclosure1143;
Object constant2019;
Object method1153;
Object symbol38;
Object methodclosure1144;
Object classreference150;


void create_ast() {
symbol11 = (Object)new_Type_Symbol_cached(L"ProtoObject");
class146 = (Object)new_Class(Nil, empty_object_layout);
((Type_Class)class146)->name = (Type_Symbol)symbol11;
classreference146 = (Object)new_Organization_ClassReference((Type_Class)class146);
symbol9 = (Object)new_Type_Symbol_cached(L"Object");
class147 = (Object)new_Class(class146, empty_object_layout);
((Type_Class)class147)->name = (Type_Symbol)symbol9;
classreference147 = (Object)new_Organization_ClassReference((Type_Class)class147);
symbol20 = (Object)new_Type_Symbol_cached(L"StandardVariableTestClass");
arraylayout30 = (Object)create_type_with_vars(Type_ArrayLayout, 3);
instancevariable175 = (Object)new_AST_InstVariable(0, L"a");
((Type_Array)arraylayout30)->values[0] = instancevariable175;instancevariable176 = (Object)new_AST_InstVariable(1, L"b");
((Type_Array)arraylayout30)->values[1] = instancevariable176;instancevariable177 = (Object)new_AST_InstVariable(2, L"c");
((Type_Array)arraylayout30)->values[2] = instancevariable177;class148 =
(Object)new_Class(Type_Object_Class, arraylayout30);
((Type_Class)class148)->name = (Type_Symbol)symbol20;

// StandardVariableTestClass>>c
method1115 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable177);
symbol45 = (Object)new_Type_Symbol_cached(L"c");
methodclosure1106 = (Object)new_Runtime_MethodClosure(method1115);
store_method((Type_Class)class148, (Type_Symbol)symbol45, (Runtime_MethodClosure)methodclosure1106);

// StandardVariableTestClass>>c:
localvariable513 = (Object)new_AST_Variable_named(L"anObject");
array484 = (Object)new_Type_Array_with(1, localvariable513);
assign294 = (Object)new_AST_Assign((Object)instancevariable177, (Object)localvariable513);
method1116 = (Object)new_AST_Method_with((Type_Array)array484, (Type_Array)empty_Type_Array, 2, assign294, Self);
symbol41 = (Object)new_Type_Symbol_cached(L"c:");
methodclosure1107 = (Object)new_Runtime_MethodClosure(method1116);
store_method((Type_Class)class148, (Type_Symbol)symbol41, (Runtime_MethodClosure)methodclosure1107);

// StandardVariableTestClass>>a:
localvariable514 = (Object)new_AST_Variable_named(L"anObject");
array485 = (Object)new_Type_Array_with(1, localvariable514);
assign295 = (Object)new_AST_Assign((Object)instancevariable175, (Object)localvariable514);
method1117 = (Object)new_AST_Method_with((Type_Array)array485, (Type_Array)empty_Type_Array, 2, assign295, Self);
symbol43 = (Object)new_Type_Symbol_cached(L"a:");
methodclosure1108 = (Object)new_Runtime_MethodClosure(method1117);
store_method((Type_Class)class148, (Type_Symbol)symbol43, (Runtime_MethodClosure)methodclosure1108);

// StandardVariableTestClass>>b
method1118 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable176);
symbol44 = (Object)new_Type_Symbol_cached(L"b");
methodclosure1109 = (Object)new_Runtime_MethodClosure(method1118);
store_method((Type_Class)class148, (Type_Symbol)symbol44, (Runtime_MethodClosure)methodclosure1109);

// StandardVariableTestClass>>b:
localvariable515 = (Object)new_AST_Variable_named(L"anObject");
array486 = (Object)new_Type_Array_with(1, localvariable515);
assign296 = (Object)new_AST_Assign((Object)instancevariable176, (Object)localvariable515);
method1119 = (Object)new_AST_Method_with((Type_Array)array486, (Type_Array)empty_Type_Array, 2, assign296, Self);
symbol42 = (Object)new_Type_Symbol_cached(L"b:");
methodclosure1110 = (Object)new_Runtime_MethodClosure(method1119);
store_method((Type_Class)class148, (Type_Symbol)symbol42, (Runtime_MethodClosure)methodclosure1110);

// StandardVariableTestClass>>a
method1120 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable175);
symbol46 = (Object)new_Type_Symbol_cached(L"a");
methodclosure1111 = (Object)new_Runtime_MethodClosure(method1120);
store_method((Type_Class)class148, (Type_Symbol)symbol46, (Runtime_MethodClosure)methodclosure1111);
classreference148 = (Object)new_Organization_ClassReference((Type_Class)class148);
symbol27 = (Object)new_Type_Symbol_cached(L"StandardTestClass");
objectlayout81 = (Object)create_type_with_vars(Type_ObjectLayout, 3);
instancevariable178 = (Object)new_AST_InstVariable(0, L"a");
((Type_Array)objectlayout81)->values[0] = instancevariable178;
instancevariable179 = (Object)new_AST_InstVariable(1, L"b");
((Type_Array)objectlayout81)->values[1] = instancevariable179;
instancevariable180 = (Object)new_AST_InstVariable(2, L"c");
((Type_Array)objectlayout81)->values[2] = instancevariable180;
class149 = (Object)new_Class(Type_Object_Class, objectlayout81);
((Type_Class)class149)->name = (Type_Symbol)symbol27;

// StandardTestClass>>c
method1121 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable180);
methodclosure1112 = (Object)new_Runtime_MethodClosure(method1121);
store_method((Type_Class)class149, (Type_Symbol)symbol45, (Runtime_MethodClosure)methodclosure1112);

// StandardTestClass>>c:
localvariable516 = (Object)new_AST_Variable_named(L"anObject");
array487 = (Object)new_Type_Array_with(1, localvariable516);
assign297 = (Object)new_AST_Assign((Object)instancevariable180, (Object)localvariable516);
method1122 = (Object)new_AST_Method_with((Type_Array)array487, (Type_Array)empty_Type_Array, 2, assign297, Self);
methodclosure1113 = (Object)new_Runtime_MethodClosure(method1122);
store_method((Type_Class)class149, (Type_Symbol)symbol41, (Runtime_MethodClosure)methodclosure1113);

// StandardTestClass>>a:
localvariable517 = (Object)new_AST_Variable_named(L"anObject");
array488 = (Object)new_Type_Array_with(1, localvariable517);
assign298 = (Object)new_AST_Assign((Object)instancevariable178, (Object)localvariable517);
method1123 = (Object)new_AST_Method_with((Type_Array)array488, (Type_Array)empty_Type_Array, 2, assign298, Self);
methodclosure1114 = (Object)new_Runtime_MethodClosure(method1123);
store_method((Type_Class)class149, (Type_Symbol)symbol43, (Runtime_MethodClosure)methodclosure1114);

// StandardTestClass>>b
method1124 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable179);
methodclosure1115 = (Object)new_Runtime_MethodClosure(method1124);
store_method((Type_Class)class149, (Type_Symbol)symbol44, (Runtime_MethodClosure)methodclosure1115);

// StandardTestClass>>b:
localvariable518 = (Object)new_AST_Variable_named(L"anObject");
array489 = (Object)new_Type_Array_with(1, localvariable518);
assign299 = (Object)new_AST_Assign((Object)instancevariable179, (Object)localvariable518);
method1125 = (Object)new_AST_Method_with((Type_Array)array489, (Type_Array)empty_Type_Array, 2, assign299, Self);
methodclosure1116 = (Object)new_Runtime_MethodClosure(method1125);
store_method((Type_Class)class149, (Type_Symbol)symbol42, (Runtime_MethodClosure)methodclosure1116);

// StandardTestClass>>a
method1126 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable178);
methodclosure1117 = (Object)new_Runtime_MethodClosure(method1126);
store_method((Type_Class)class149, (Type_Symbol)symbol46, (Runtime_MethodClosure)methodclosure1117);
classreference149 = (Object)new_Organization_ClassReference((Type_Class)class149);
symbol5 = (Object)new_Type_Symbol_cached(L"BridgeTest");
class150 = (Object)new_Class(Type_Object_Class, empty_object_layout);
((Type_Class)class150)->name = (Type_Symbol)symbol5;

// BridgeTest>>tmNumberEquals
smallint1557 = (Object)new_Type_SmallInt(1);
constant1960 = (Object)new_AST_Constant(smallint1557);
smallint1558 = (Object)new_Type_SmallInt(1);
constant1961 = (Object)new_AST_Constant(smallint1558);
send3407 = (Object)new_AST_Send((Object)constant1960, (Object)SMB__equal, 1, constant1961);
method1127 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3407);
symbol19 = (Object)new_Type_Symbol_cached(L"tmNumberEquals");
methodclosure1118 = (Object)new_Runtime_MethodClosure(method1127);
store_method((Type_Class)class150, (Type_Symbol)symbol19, (Runtime_MethodClosure)methodclosure1118);

// BridgeTest>>tmNumberMult
smallint1559 = (Object)new_Type_SmallInt(2);
constant1962 = (Object)new_AST_Constant(smallint1559);
smallint1560 = (Object)new_Type_SmallInt(3);
constant1963 = (Object)new_AST_Constant(smallint1560);
send3408 = (Object)new_AST_Send((Object)constant1962, (Object)SMB__times, 1, constant1963);
method1128 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3408);
symbol31 = (Object)new_Type_Symbol_cached(L"tmNumberMult");
methodclosure1119 = (Object)new_Runtime_MethodClosure(method1128);
store_method((Type_Class)class150, (Type_Symbol)symbol31, (Runtime_MethodClosure)methodclosure1119);

// BridgeTest>>tmClassReferenceReturn
send3409 = (Object)new_AST_Send((Object)Metaclass_Reference, (Object)SMB_name, 0);
method1129 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3409);
symbol39 = (Object)new_Type_Symbol_cached(L"tmClassReferenceReturn");
methodclosure1120 = (Object)new_Runtime_MethodClosure(method1129);
store_method((Type_Class)class150, (Type_Symbol)symbol39, (Runtime_MethodClosure)methodclosure1120);

// BridgeTest>>tmSimpleInstanceCreation
localvariable519 = (Object)new_AST_Variable_named(L"instance");
array490 = (Object)new_Type_Array_with(1, localvariable519);
send3410 = (Object)new_AST_Send((Object)classreference149, (Object)SMB_basicNew, 0);
assign300 = (Object)new_AST_Assign((Object)localvariable519, (Object)send3410);
localvariable520 = (Object)new_AST_Variable_named(L"receiver");
array491 = (Object)new_Type_Array_with(1, localvariable520);
smallint1561 = (Object)new_Type_SmallInt(1);
constant1964 = (Object)new_AST_Constant(smallint1561);
send3411 = (Object)new_AST_Send((Object)localvariable520, (Object)symbol43, 1, constant1964);
smallint1562 = (Object)new_Type_SmallInt(2);
constant1965 = (Object)new_AST_Constant(smallint1562);
send3412 = (Object)new_AST_Send((Object)localvariable520, (Object)symbol42, 1, constant1965);
smallint1563 = (Object)new_Type_SmallInt(3);
constant1966 = (Object)new_AST_Constant(smallint1563);
send3413 = (Object)new_AST_Send((Object)localvariable520, (Object)symbol41, 1, constant1966);
block205 = (Object)new_AST_Block_with((Type_Array)array491, (Type_Array)empty_Type_Array, 1, 3, send3411, send3412, send3413);
send3414 = (Object)new_AST_Send((Object)block205, (Object)SMB_value_, 1, localvariable519);
symbol49 = (Object)new_Type_Symbol_cached(L"assert:");
send3415 = (Object)new_AST_Send((Object)localvariable519, (Object)symbol46, 0);
smallint1564 = (Object)new_Type_SmallInt(1);
constant1967 = (Object)new_AST_Constant(smallint1564);
send3416 = (Object)new_AST_Send((Object)send3415, (Object)SMB__equal, 1, constant1967);
send3417 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send3416);
send3418 = (Object)new_AST_Send((Object)localvariable519, (Object)symbol44, 0);
smallint1565 = (Object)new_Type_SmallInt(2);
constant1968 = (Object)new_AST_Constant(smallint1565);
send3419 = (Object)new_AST_Send((Object)send3418, (Object)SMB__equal, 1, constant1968);
send3420 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send3419);
send3421 = (Object)new_AST_Send((Object)localvariable519, (Object)symbol45, 0);
smallint1566 = (Object)new_Type_SmallInt(3);
constant1969 = (Object)new_AST_Constant(smallint1566);
send3422 = (Object)new_AST_Send((Object)send3421, (Object)SMB__equal, 1, constant1969);
send3423 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send3422);
send3424 = (Object)new_AST_Send((Object)localvariable519, (Object)symbol46, 0);
send3425 = (Object)new_AST_Send((Object)localvariable519, (Object)symbol44, 0);
send3426 = (Object)new_AST_Send((Object)send3424, (Object)SMB__plus, 1, send3425);
send3427 = (Object)new_AST_Send((Object)localvariable519, (Object)symbol45, 0);
send3428 = (Object)new_AST_Send((Object)send3426, (Object)SMB__plus, 1, send3427);
method1130 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array490, 6, assign300, send3414, send3417, send3420, send3423, send3428);
symbol28 = (Object)new_Type_Symbol_cached(L"tmSimpleInstanceCreation");
methodclosure1121 = (Object)new_Runtime_MethodClosure(method1130);
store_method((Type_Class)class150, (Type_Symbol)symbol28, (Runtime_MethodClosure)methodclosure1121);

// BridgeTest>>tmNumber
smallint1567 = (Object)new_Type_SmallInt(1);
constant1970 = (Object)new_AST_Constant(smallint1567);
method1131 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant1970);
symbol40 = (Object)new_Type_Symbol_cached(L"tmNumber");
methodclosure1122 = (Object)new_Runtime_MethodClosure(method1131);
store_method((Type_Class)class150, (Type_Symbol)symbol40, (Runtime_MethodClosure)methodclosure1122);

// BridgeTest>>tmVariableInstanceCreationSized
localvariable521 = (Object)new_AST_Variable_named(L"instance");
array492 = (Object)new_Type_Array_with(1, localvariable521);
smallint1568 = (Object)new_Type_SmallInt(100);
constant1971 = (Object)new_AST_Constant(smallint1568);
send3429 = (Object)new_AST_Send((Object)classreference148, (Object)SMB_basicNew_, 1, constant1971);
assign301 = (Object)new_AST_Assign((Object)localvariable521, (Object)send3429);
smallint1569 = (Object)new_Type_SmallInt(1);
constant1972 = (Object)new_AST_Constant(smallint1569);
smallint1570 = (Object)new_Type_SmallInt(1);
constant1973 = (Object)new_AST_Constant(smallint1570);
send3430 = (Object)new_AST_Send((Object)localvariable521, (Object)SMB_at_put_, 2, constant1972, constant1973);
smallint1571 = (Object)new_Type_SmallInt(100);
constant1974 = (Object)new_AST_Constant(smallint1571);
smallint1572 = (Object)new_Type_SmallInt(100);
constant1975 = (Object)new_AST_Constant(smallint1572);
send3431 = (Object)new_AST_Send((Object)localvariable521, (Object)SMB_at_put_, 2, constant1974, constant1975);
smallint1573 = (Object)new_Type_SmallInt(1);
constant1976 = (Object)new_AST_Constant(smallint1573);
send3432 = (Object)new_AST_Send((Object)localvariable521, (Object)SMB_at_, 1, constant1976);
smallint1574 = (Object)new_Type_SmallInt(1);
constant1977 = (Object)new_AST_Constant(smallint1574);
send3433 = (Object)new_AST_Send((Object)send3432, (Object)SMB__equal, 1, constant1977);
send3434 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send3433);
smallint1575 = (Object)new_Type_SmallInt(100);
constant1978 = (Object)new_AST_Constant(smallint1575);
send3435 = (Object)new_AST_Send((Object)localvariable521, (Object)SMB_at_, 1, constant1978);
smallint1576 = (Object)new_Type_SmallInt(100);
constant1979 = (Object)new_AST_Constant(smallint1576);
send3436 = (Object)new_AST_Send((Object)send3435, (Object)SMB__equal, 1, constant1979);
send3437 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send3436);
localvariable522 = (Object)new_AST_Variable_named(L"receiver");
array493 = (Object)new_Type_Array_with(1, localvariable522);
smallint1577 = (Object)new_Type_SmallInt(1);
constant1980 = (Object)new_AST_Constant(smallint1577);
send3438 = (Object)new_AST_Send((Object)localvariable522, (Object)symbol43, 1, constant1980);
smallint1578 = (Object)new_Type_SmallInt(2);
constant1981 = (Object)new_AST_Constant(smallint1578);
send3439 = (Object)new_AST_Send((Object)localvariable522, (Object)symbol42, 1, constant1981);
smallint1579 = (Object)new_Type_SmallInt(3);
constant1982 = (Object)new_AST_Constant(smallint1579);
send3440 = (Object)new_AST_Send((Object)localvariable522, (Object)symbol41, 1, constant1982);
block206 = (Object)new_AST_Block_with((Type_Array)array493, (Type_Array)empty_Type_Array, 1, 3, send3438, send3439, send3440);
send3441 = (Object)new_AST_Send((Object)block206, (Object)SMB_value_, 1, localvariable521);
send3442 = (Object)new_AST_Send((Object)localvariable521, (Object)symbol46, 0);
smallint1580 = (Object)new_Type_SmallInt(1);
constant1983 = (Object)new_AST_Constant(smallint1580);
send3443 = (Object)new_AST_Send((Object)send3442, (Object)SMB__equal, 1, constant1983);
send3444 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send3443);
send3445 = (Object)new_AST_Send((Object)localvariable521, (Object)symbol44, 0);
smallint1581 = (Object)new_Type_SmallInt(2);
constant1984 = (Object)new_AST_Constant(smallint1581);
send3446 = (Object)new_AST_Send((Object)send3445, (Object)SMB__equal, 1, constant1984);
send3447 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send3446);
send3448 = (Object)new_AST_Send((Object)localvariable521, (Object)symbol45, 0);
smallint1582 = (Object)new_Type_SmallInt(3);
constant1985 = (Object)new_AST_Constant(smallint1582);
send3449 = (Object)new_AST_Send((Object)send3448, (Object)SMB__equal, 1, constant1985);
send3450 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send3449);
send3451 = (Object)new_AST_Send((Object)localvariable521, (Object)symbol46, 0);
send3452 = (Object)new_AST_Send((Object)localvariable521, (Object)symbol44, 0);
send3453 = (Object)new_AST_Send((Object)localvariable521, (Object)symbol45, 0);
smallint1583 = (Object)new_Type_SmallInt(1);
constant1986 = (Object)new_AST_Constant(smallint1583);
send3454 = (Object)new_AST_Send((Object)localvariable521, (Object)SMB_at_, 1, constant1986);
send3455 = (Object)new_AST_Send((Object)send3453, (Object)SMB__plus, 1, send3454);
send3456 = (Object)new_AST_Send((Object)send3452, (Object)SMB__plus, 1, send3455);
send3457 = (Object)new_AST_Send((Object)send3451, (Object)SMB__plus, 1, send3456);
smallint1584 = (Object)new_Type_SmallInt(100);
constant1987 = (Object)new_AST_Constant(smallint1584);
send3458 = (Object)new_AST_Send((Object)localvariable521, (Object)SMB_at_, 1, constant1987);
send3459 = (Object)new_AST_Send((Object)send3457, (Object)SMB__plus, 1, send3458);
method1132 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array492, 10, assign301, send3430, send3431, send3434, send3437, send3441, send3444, send3447, send3450, send3459);
symbol32 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreationSized");
methodclosure1123 = (Object)new_Runtime_MethodClosure(method1132);
store_method((Type_Class)class150, (Type_Symbol)symbol32, (Runtime_MethodClosure)methodclosure1123);

// BridgeTest>>tmVariableInstanceCreation
localvariable523 = (Object)new_AST_Variable_named(L"instance");
array494 = (Object)new_Type_Array_with(1, localvariable523);
send3460 = (Object)new_AST_Send((Object)classreference148, (Object)SMB_basicNew, 0);
assign302 = (Object)new_AST_Assign((Object)localvariable523, (Object)send3460);
localvariable524 = (Object)new_AST_Variable_named(L"receiver");
array495 = (Object)new_Type_Array_with(1, localvariable524);
smallint1585 = (Object)new_Type_SmallInt(1);
constant1988 = (Object)new_AST_Constant(smallint1585);
send3461 = (Object)new_AST_Send((Object)localvariable524, (Object)symbol43, 1, constant1988);
smallint1586 = (Object)new_Type_SmallInt(2);
constant1989 = (Object)new_AST_Constant(smallint1586);
send3462 = (Object)new_AST_Send((Object)localvariable524, (Object)symbol42, 1, constant1989);
smallint1587 = (Object)new_Type_SmallInt(3);
constant1990 = (Object)new_AST_Constant(smallint1587);
send3463 = (Object)new_AST_Send((Object)localvariable524, (Object)symbol41, 1, constant1990);
block207 = (Object)new_AST_Block_with((Type_Array)array495, (Type_Array)empty_Type_Array, 1, 3, send3461, send3462, send3463);
send3464 = (Object)new_AST_Send((Object)block207, (Object)SMB_value_, 1, localvariable523);
send3465 = (Object)new_AST_Send((Object)localvariable523, (Object)symbol46, 0);
smallint1588 = (Object)new_Type_SmallInt(1);
constant1991 = (Object)new_AST_Constant(smallint1588);
send3466 = (Object)new_AST_Send((Object)send3465, (Object)SMB__equal, 1, constant1991);
send3467 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send3466);
send3468 = (Object)new_AST_Send((Object)localvariable523, (Object)symbol44, 0);
smallint1589 = (Object)new_Type_SmallInt(2);
constant1992 = (Object)new_AST_Constant(smallint1589);
send3469 = (Object)new_AST_Send((Object)send3468, (Object)SMB__equal, 1, constant1992);
send3470 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send3469);
send3471 = (Object)new_AST_Send((Object)localvariable523, (Object)symbol45, 0);
smallint1590 = (Object)new_Type_SmallInt(3);
constant1993 = (Object)new_AST_Constant(smallint1590);
send3472 = (Object)new_AST_Send((Object)send3471, (Object)SMB__equal, 1, constant1993);
send3473 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send3472);
send3474 = (Object)new_AST_Send((Object)localvariable523, (Object)symbol46, 0);
send3475 = (Object)new_AST_Send((Object)localvariable523, (Object)symbol44, 0);
send3476 = (Object)new_AST_Send((Object)send3474, (Object)SMB__plus, 1, send3475);
send3477 = (Object)new_AST_Send((Object)localvariable523, (Object)symbol45, 0);
send3478 = (Object)new_AST_Send((Object)send3476, (Object)SMB__plus, 1, send3477);
method1133 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array494, 6, assign302, send3464, send3467, send3470, send3473, send3478);
symbol21 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreation");
methodclosure1124 = (Object)new_Runtime_MethodClosure(method1133);
store_method((Type_Class)class150, (Type_Symbol)symbol21, (Runtime_MethodClosure)methodclosure1124);

// BridgeTest>>tmSymbolEquals
symbol51 = (Object)new_Type_Symbol_cached(L"Symbol");
constant1994 = (Object)new_AST_Constant(symbol51);
constant1995 = (Object)new_AST_Constant(symbol51);
send3479 = (Object)new_AST_Send((Object)constant1994, (Object)SMB__equal, 1, constant1995);
method1134 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3479);
symbol13 = (Object)new_Type_Symbol_cached(L"tmSymbolEquals");
methodclosure1125 = (Object)new_Runtime_MethodClosure(method1134);
store_method((Type_Class)class150, (Type_Symbol)symbol13, (Runtime_MethodClosure)methodclosure1125);

// BridgeTest>>tmExtendedReturn
variable33 = (Object)new_AST_Variable_named(L"return");
array496 = (Object)new_Type_Array_with(1, variable33);
smallint1591 = (Object)new_Type_SmallInt(1);
constant1996 = (Object)new_AST_Constant(smallint1591);
smallint1592 = (Object)new_Type_SmallInt(2);
constant1997 = (Object)new_AST_Constant(smallint1592);
send3480 = (Object)new_AST_Send((Object)constant1996, (Object)SMB__gt, 1, constant1997);
smallint1593 = (Object)new_Type_SmallInt(1);
constant1998 = (Object)new_AST_Constant(smallint1593);
send3481 = (Object)new_AST_Send((Object)variable33, (Object)SMB_escape_, 1, constant1998);
block208 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 2, 1, send3481);
smallint1594 = (Object)new_Type_SmallInt(2);
constant1999 = (Object)new_AST_Constant(smallint1594);
send3482 = (Object)new_AST_Send((Object)variable33, (Object)SMB_escape_, 1, constant1999);
block209 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 2, 1, send3482);
send3483 = (Object)new_AST_Send((Object)send3480, (Object)SMB_ifTrue_ifFalse_, 2, block208, block209);
block210 = (Object)new_AST_Block_with((Type_Array)array496, (Type_Array)empty_Type_Array, 1, 2, send3483, Self);
send3484 = (Object)new_AST_Send((Object)AST_Callec_Reference, (Object)SMB_on_, 1, block210);
method1135 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3484);
symbol29 = (Object)new_Type_Symbol_cached(L"tmExtendedReturn");
methodclosure1126 = (Object)new_Runtime_MethodClosure(method1135);
store_method((Type_Class)class150, (Type_Symbol)symbol29, (Runtime_MethodClosure)methodclosure1126);

// BridgeTest>>assert:
localvariable525 = (Object)new_AST_Variable_named(L"bool");
array497 = (Object)new_Type_Array_with(1, localvariable525);
symbol66 = (Object)new_Type_Symbol_cached(L"fail");
send3485 = (Object)new_AST_Send((Object)Self, (Object)symbol66, 0);
block211 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, 1, send3485);
send3486 = (Object)new_AST_Send((Object)localvariable525, (Object)SMB_ifFalse_, 1, block211);
method1136 = (Object)new_AST_Method_with((Type_Array)array497, (Type_Array)empty_Type_Array, 1, send3486);
methodclosure1127 = (Object)new_Runtime_MethodClosure(method1136);
store_method((Type_Class)class150, (Type_Symbol)symbol49, (Runtime_MethodClosure)methodclosure1127);

// BridgeTest>>tmNumberAdd
smallint1595 = (Object)new_Type_SmallInt(1);
constant2000 = (Object)new_AST_Constant(smallint1595);
smallint1596 = (Object)new_Type_SmallInt(1);
constant2001 = (Object)new_AST_Constant(smallint1596);
send3487 = (Object)new_AST_Send((Object)constant2000, (Object)SMB__plus, 1, constant2001);
method1137 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3487);
symbol33 = (Object)new_Type_Symbol_cached(L"tmNumberAdd");
methodclosure1128 = (Object)new_Runtime_MethodClosure(method1137);
store_method((Type_Class)class150, (Type_Symbol)symbol33, (Runtime_MethodClosure)methodclosure1128);

// BridgeTest>>tmLocalVariable
localvariable526 = (Object)new_AST_Variable_named(L"a");
array498 = (Object)new_Type_Array_with(1, localvariable526);
smallint1597 = (Object)new_Type_SmallInt(1);
constant2002 = (Object)new_AST_Constant(smallint1597);
assign303 = (Object)new_AST_Assign((Object)localvariable526, (Object)constant2002);
method1138 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array498, 2, assign303, localvariable526);
symbol22 = (Object)new_Type_Symbol_cached(L"tmLocalVariable");
methodclosure1129 = (Object)new_Runtime_MethodClosure(method1138);
store_method((Type_Class)class150, (Type_Symbol)symbol22, (Runtime_MethodClosure)methodclosure1129);

// BridgeTest>>tmBooleanFalse
method1139 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, False_Const);
symbol14 = (Object)new_Type_Symbol_cached(L"tmBooleanFalse");
methodclosure1130 = (Object)new_Runtime_MethodClosure(method1139);
store_method((Type_Class)class150, (Type_Symbol)symbol14, (Runtime_MethodClosure)methodclosure1130);

// BridgeTest>>tmNumberSubtract
smallint1598 = (Object)new_Type_SmallInt(2);
constant2003 = (Object)new_AST_Constant(smallint1598);
smallint1599 = (Object)new_Type_SmallInt(1);
constant2004 = (Object)new_AST_Constant(smallint1599);
send3488 = (Object)new_AST_Send((Object)constant2003, (Object)SMB__minus, 1, constant2004);
method1140 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3488);
symbol34 = (Object)new_Type_Symbol_cached(L"tmNumberSubtract");
methodclosure1131 = (Object)new_Runtime_MethodClosure(method1140);
store_method((Type_Class)class150, (Type_Symbol)symbol34, (Runtime_MethodClosure)methodclosure1131);

// BridgeTest>>tmBooleanEquals
send3489 = (Object)new_AST_Send((Object)True_Const, (Object)SMB__equal, 1, True_Const);
method1141 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3489);
symbol23 = (Object)new_Type_Symbol_cached(L"tmBooleanEquals");
methodclosure1132 = (Object)new_Runtime_MethodClosure(method1141);
store_method((Type_Class)class150, (Type_Symbol)symbol23, (Runtime_MethodClosure)methodclosure1132);

// BridgeTest>>tmCharacter
character112 = (Object)new_Type_Character(L'C');
constant2005 = (Object)new_AST_Constant(character112);
method1142 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant2005);
symbol15 = (Object)new_Type_Symbol_cached(L"tmCharacter");
methodclosure1133 = (Object)new_Runtime_MethodClosure(method1142);
store_method((Type_Class)class150, (Type_Symbol)symbol15, (Runtime_MethodClosure)methodclosure1133);

// BridgeTest>>tmBooleanTrue
method1143 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, True_Const);
symbol35 = (Object)new_Type_Symbol_cached(L"tmBooleanTrue");
methodclosure1134 = (Object)new_Runtime_MethodClosure(method1143);
store_method((Type_Class)class150, (Type_Symbol)symbol35, (Runtime_MethodClosure)methodclosure1134);

// BridgeTest>>tmStringEquals
string261 = (Object)new_Type_String(L"String");
constant2006 = (Object)new_AST_Constant(string261);
string262 = (Object)new_Type_String(L"String");
constant2007 = (Object)new_AST_Constant(string262);
send3490 = (Object)new_AST_Send((Object)constant2006, (Object)SMB__equal, 1, constant2007);
method1144 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3490);
symbol24 = (Object)new_Type_Symbol_cached(L"tmStringEquals");
methodclosure1135 = (Object)new_Runtime_MethodClosure(method1144);
store_method((Type_Class)class150, (Type_Symbol)symbol24, (Runtime_MethodClosure)methodclosure1135);

// BridgeTest>>tmFibonacci
method1145 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, Self);
symbol16 = (Object)new_Type_Symbol_cached(L"tmFibonacci");
methodclosure1136 = (Object)new_Runtime_MethodClosure(method1145);
store_method((Type_Class)class150, (Type_Symbol)symbol16, (Runtime_MethodClosure)methodclosure1136);

// BridgeTest>>tmMethodArguments:with:with:
localvariable527 = (Object)new_AST_Variable_named(L"arg1");
localvariable528 = (Object)new_AST_Variable_named(L"arg2");
localvariable529 = (Object)new_AST_Variable_named(L"arg3");
array499 = (Object)new_Type_Array_with(3, localvariable527, localvariable528, localvariable529);
send3491 = (Object)new_AST_Send((Object)localvariable527, (Object)SMB__concat, 1, localvariable528);
send3492 = (Object)new_AST_Send((Object)send3491, (Object)SMB__concat, 1, localvariable529);
method1146 = (Object)new_AST_Method_with((Type_Array)array499, (Type_Array)empty_Type_Array, 1, send3492);
symbol36 = (Object)new_Type_Symbol_cached(L"tmMethodArguments:with:with:");
methodclosure1137 = (Object)new_Runtime_MethodClosure(method1146);
store_method((Type_Class)class150, (Type_Symbol)symbol36, (Runtime_MethodClosure)methodclosure1137);

// BridgeTest>>tmMethodArgument:
localvariable530 = (Object)new_AST_Variable_named(L"arg");
array500 = (Object)new_Type_Array_with(1, localvariable530);
smallint1600 = (Object)new_Type_SmallInt(1);
constant2008 = (Object)new_AST_Constant(smallint1600);
send3493 = (Object)new_AST_Send((Object)localvariable530, (Object)SMB__plus, 1, constant2008);
method1147 = (Object)new_AST_Method_with((Type_Array)array500, (Type_Array)empty_Type_Array, 1, send3493);
symbol25 = (Object)new_Type_Symbol_cached(L"tmMethodArgument:");
methodclosure1138 = (Object)new_Runtime_MethodClosure(method1147);
store_method((Type_Class)class150, (Type_Symbol)symbol25, (Runtime_MethodClosure)methodclosure1138);

// BridgeTest>>tmSimpleBasicArithmetik
smallint1601 = (Object)new_Type_SmallInt(1);
constant2009 = (Object)new_AST_Constant(smallint1601);
smallint1602 = (Object)new_Type_SmallInt(2);
constant2010 = (Object)new_AST_Constant(smallint1602);
send3494 = (Object)new_AST_Send((Object)constant2009, (Object)SMB__plus, 1, constant2010);
smallint1603 = (Object)new_Type_SmallInt(2);
constant2011 = (Object)new_AST_Constant(smallint1603);
send3495 = (Object)new_AST_Send((Object)send3494, (Object)SMB__plus, 1, constant2011);
smallint1604 = (Object)new_Type_SmallInt(5);
constant2012 = (Object)new_AST_Constant(smallint1604);
send3496 = (Object)new_AST_Send((Object)send3495, (Object)SMB__times, 1, constant2012);
method1148 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3496);
symbol17 = (Object)new_Type_Symbol_cached(L"tmSimpleBasicArithmetik");
methodclosure1139 = (Object)new_Runtime_MethodClosure(method1148);
store_method((Type_Class)class150, (Type_Symbol)symbol17, (Runtime_MethodClosure)methodclosure1139);

// BridgeTest>>tmSimpleReturn
smallint1605 = (Object)new_Type_SmallInt(1);
constant2013 = (Object)new_AST_Constant(smallint1605);
method1149 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant2013);
symbol37 = (Object)new_Type_Symbol_cached(L"tmSimpleReturn");
methodclosure1140 = (Object)new_Runtime_MethodClosure(method1149);
store_method((Type_Class)class150, (Type_Symbol)symbol37, (Runtime_MethodClosure)methodclosure1140);

// BridgeTest>>tmString
string263 = (Object)new_Type_String(L"String");
constant2014 = (Object)new_AST_Constant(string263);
method1150 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant2014);
symbol26 = (Object)new_Type_Symbol_cached(L"tmString");
methodclosure1141 = (Object)new_Runtime_MethodClosure(method1150);
store_method((Type_Class)class150, (Type_Symbol)symbol26, (Runtime_MethodClosure)methodclosure1141);

// BridgeTest>>tmCharacterEquals
character113 = (Object)new_Type_Character(L'C');
constant2015 = (Object)new_AST_Constant(character113);
character114 = (Object)new_Type_Character(L'C');
constant2016 = (Object)new_AST_Constant(character114);
send3497 = (Object)new_AST_Send((Object)constant2015, (Object)SMB__equal, 1, constant2016);
method1151 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3497);
symbol18 = (Object)new_Type_Symbol_cached(L"tmCharacterEquals");
methodclosure1142 = (Object)new_Runtime_MethodClosure(method1151);
store_method((Type_Class)class150, (Type_Symbol)symbol18, (Runtime_MethodClosure)methodclosure1142);

// BridgeTest>>tmNumberDiv
smallint1606 = (Object)new_Type_SmallInt(4);
constant2017 = (Object)new_AST_Constant(smallint1606);
smallint1607 = (Object)new_Type_SmallInt(2);
constant2018 = (Object)new_AST_Constant(smallint1607);
send3498 = (Object)new_AST_Send((Object)constant2017, (Object)SMB__divide, 1, constant2018);
method1152 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send3498);
symbol30 = (Object)new_Type_Symbol_cached(L"tmNumberDiv");
methodclosure1143 = (Object)new_Runtime_MethodClosure(method1152);
store_method((Type_Class)class150, (Type_Symbol)symbol30, (Runtime_MethodClosure)methodclosure1143);

// BridgeTest>>tmSymbol
constant2019 = (Object)new_AST_Constant(symbol51);
method1153 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant2019);
symbol38 = (Object)new_Type_Symbol_cached(L"tmSymbol");
methodclosure1144 = (Object)new_Runtime_MethodClosure(method1153);
store_method((Type_Class)class150, (Type_Symbol)symbol38, (Runtime_MethodClosure)methodclosure1144);
classreference150 = (Object)new_Organization_ClassReference((Type_Class)class150);
}


/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanEquals)
/*
tmBooleanEquals
	^ true = true
*/
Object symbol23 = (Object)new_Type_Symbol_cached(L"tmBooleanEquals");
Object send3499 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol23, 0);
Object result = (Object)Eval((Object)send3499);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanFalse)
/*
tmBooleanFalse
	^ false
*/
Object symbol14 = (Object)new_Type_Symbol_cached(L"tmBooleanFalse");
Object send3500 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol14, 0);
Object result = (Object)Eval((Object)send3500);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanTrue)
/*
tmBooleanTrue
	^ true
*/
Object symbol35 = (Object)new_Type_Symbol_cached(L"tmBooleanTrue");
Object send3501 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol35, 0);
Object result = (Object)Eval((Object)send3501);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacter)
/*
tmCharacter
	^ $C
*/
Object symbol15 = (Object)new_Type_Symbol_cached(L"tmCharacter");
Object send3502 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol15, 0);
Object result = (Object)Eval((Object)send3502);
ASSERT_EMPTY_STACK
assert0(((Type_Character)result)->value == 'C');
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacterEquals)
/*
tmCharacterEquals
	^ $C = $C
*/
Object symbol18 = (Object)new_Type_Symbol_cached(L"tmCharacterEquals");
Object send3503 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol18, 0);
Object result = (Object)Eval((Object)send3503);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmClassReferenceReturn)
/*
tmClassReferenceReturn
	^ Metaclass name.
*/
Object symbol39 = (Object)new_Type_Symbol_cached(L"tmClassReferenceReturn");
Object send3504 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol39, 0);
Object result = (Object)Eval((Object)send3504);
ASSERT_EMPTY_STACK
Object symbol52 = (Object)new_Type_Symbol_cached(L"Metaclass");
result = Eval_Send1(result, SMB__equal, symbol52);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmExtendedReturn)
/*
tmExtendedReturn
	1 > 2 ifTrue: [ ^ 1 ]
		ifFalse: [ ^ 2].
*/
Object symbol29 = (Object)new_Type_Symbol_cached(L"tmExtendedReturn");
Object send3505 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol29, 0);
Object result = (Object)Eval((Object)send3505);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmLocalVariable)
/*
tmLocalVariable
	|a|
	a := 1.
	^ a
*/
Object symbol22 = (Object)new_Type_Symbol_cached(L"tmLocalVariable");
Object send3506 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol22, 0);
Object result = (Object)Eval((Object)send3506);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArgument_)
/*
tmMethodArgument: arg 
	<arg1: 1>
	^ arg + 1
*/
Object symbol25 = (Object)new_Type_Symbol_cached(L"tmMethodArgument:");
Object smallint1608 = (Object)new_Type_SmallInt(1);
Object constant2020 = (Object)new_AST_Constant(smallint1608);
Object send3507 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol25, 1, constant2020);
Object result = (Object)Eval((Object)send3507);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArguments_with_with_)
/*
tmMethodArguments: arg1 with: arg2 with: arg3 
	<arg1: 'asdf' arg2: 'asdf' arg3: 'df'>
	^ arg1 , arg2 , arg3
*/
Object symbol36 = (Object)new_Type_Symbol_cached(L"tmMethodArguments:with:with:");
Object string264 = (Object)new_Type_String(L"asdf");
Object constant2021 = (Object)new_AST_Constant(string264);
Object string265 = (Object)new_Type_String(L"asdf");
Object constant2022 = (Object)new_AST_Constant(string265);
Object string266 = (Object)new_Type_String(L"df");
Object constant2023 = (Object)new_AST_Constant(string266);
Object send3508 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol36, 3, constant2021, constant2022, constant2023);
Object result = (Object)Eval((Object)send3508);
ASSERT_EMPTY_STACK
Object string267 = (Object)new_Type_String(L"asdfasdfdf");
result = Eval_Send1(result, SMB__equal, string267);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumber)
/*
tmNumber
	^ 1
*/
Object symbol40 = (Object)new_Type_Symbol_cached(L"tmNumber");
Object send3509 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol40, 0);
Object result = (Object)Eval((Object)send3509);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberAdd)
/*
tmNumberAdd
	^ 1 + 1
*/
Object symbol33 = (Object)new_Type_Symbol_cached(L"tmNumberAdd");
Object send3510 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol33, 0);
Object result = (Object)Eval((Object)send3510);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberDiv)
/*
tmNumberDiv
	^ 4 / 2
*/
Object symbol30 = (Object)new_Type_Symbol_cached(L"tmNumberDiv");
Object send3511 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol30, 0);
Object result = (Object)Eval((Object)send3511);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberEquals)
/*
tmNumberEquals
	^ 1 = 1
*/
Object symbol19 = (Object)new_Type_Symbol_cached(L"tmNumberEquals");
Object send3512 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol19, 0);
Object result = (Object)Eval((Object)send3512);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberMult)
/*
tmNumberMult
	^ 2 * 3
*/
Object symbol31 = (Object)new_Type_Symbol_cached(L"tmNumberMult");
Object send3513 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol31, 0);
Object result = (Object)Eval((Object)send3513);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberSubtract)
/*
tmNumberSubtract
	^ 2 - 1
*/
Object symbol34 = (Object)new_Type_Symbol_cached(L"tmNumberSubtract");
Object send3514 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol34, 0);
Object result = (Object)Eval((Object)send3514);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleBasicArithmetik)
/*
tmSimpleBasicArithmetik
	^ (1 + 2) + 2 * 5
*/
Object symbol17 = (Object)new_Type_Symbol_cached(L"tmSimpleBasicArithmetik");
Object send3515 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol17, 0);
Object result = (Object)Eval((Object)send3515);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 25);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleReturn)
/*
tmSimpleReturn
	^ 1
*/
Object symbol37 = (Object)new_Type_Symbol_cached(L"tmSimpleReturn");
Object send3516 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol37, 0);
Object result = (Object)Eval((Object)send3516);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmString)
/*
tmString
	^ 'String'
*/
Object symbol26 = (Object)new_Type_Symbol_cached(L"tmString");
Object send3517 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol26, 0);
Object result = (Object)Eval((Object)send3517);
ASSERT_EMPTY_STACK
Object string268 = (Object)new_Type_String(L"String");
result = Eval_Send1(result, SMB__equal, string268);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmStringEquals)
/*
tmStringEquals
	^ 'String' = 'String'
*/
Object symbol24 = (Object)new_Type_Symbol_cached(L"tmStringEquals");
Object send3518 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol24, 0);
Object result = (Object)Eval((Object)send3518);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbol)
/*
tmSymbol
	^ #Symbol
*/
Object symbol38 = (Object)new_Type_Symbol_cached(L"tmSymbol");
Object send3519 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol38, 0);
Object result = (Object)Eval((Object)send3519);
ASSERT_EMPTY_STACK
Object symbol51 = (Object)new_Type_Symbol_cached(L"Symbol");
result = Eval_Send1(result, SMB__equal, symbol51);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbolEquals)
/*
tmSymbolEquals
	^ #Symbol = #Symbol
*/
Object symbol13 = (Object)new_Type_Symbol_cached(L"tmSymbolEquals");
Object send3520 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol13, 0);
Object result = (Object)Eval((Object)send3520);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_assert_)
/*
assert: bool
	<arg: true>
	^ bool ifFalse: [ self fail. ]
	
*/
Object symbol49 = (Object)new_Type_Symbol_cached(L"assert:");
Object constant2024 = (Object)new_AST_Constant(True_Const);
Object send3521 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol49, 1, constant2024);
Object result = (Object)Eval((Object)send3521);
ASSERT_EMPTY_STACK
assert0(result == Nil);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmFibonacci)
/*
tmFibonacci
	
*/
Object symbol16 = (Object)new_Type_Symbol_cached(L"tmFibonacci");
Object send3522 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol16, 0);
Object result = (Object)Eval((Object)send3522);
ASSERT_EMPTY_STACK
assert0(result == test_Class_Instance);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleInstanceCreation)
/*
tmSimpleInstanceCreation
	| instance |
	instance := StandardTestClass basicNew.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	^ instance a + instance b  + instance c
	
*/
Object symbol28 = (Object)new_Type_Symbol_cached(L"tmSimpleInstanceCreation");
Object send3523 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol28, 0);
Object result = (Object)Eval((Object)send3523);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmVariableInstanceCreation)
/*
tmVariableInstanceCreation
	| instance |
	instance := StandardVariableTestClass basicNew.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	^ instance a + instance b  + instance c
	
*/
Object symbol21 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreation");
Object send3524 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol21, 0);
Object result = (Object)Eval((Object)send3524);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmVariableInstanceCreationSized)
/*
tmVariableInstanceCreationSized
	| instance |
	instance := StandardVariableTestClass basicNew: 100.
	instance at: 1 put: 1.
	instance at: 100 put: 100.
	self assert: (instance at: 1) = 1.
	
	self assert: (instance at: 100) = 100.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	
	^ instance a + instance b + instance c + (instance at: 1) + (instance at: 100)
	
*/
Object symbol32 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreationSized");
Object send3525 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol32, 0);
Object result = (Object)Eval((Object)send3525);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 107);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

TEST_SUITE(AutoGenTest,
{
    create_ast();
    Test_Class = (Type_Class)class150;
    test_Class_Instance = (Object)new_AST_Constant((Object)instantiate((Type_Class)Test_Class));

    RUN_TEST(AutoGenTest_tmSimpleReturn);
    RUN_TEST(AutoGenTest_tmNumberMult);
    RUN_TEST(AutoGenTest_tmSymbol);
    RUN_TEST(AutoGenTest_tmNumber);
    RUN_TEST(AutoGenTest_tmBooleanFalse);
    RUN_TEST(AutoGenTest_tmString);
    RUN_TEST(AutoGenTest_tmLocalVariable);
    RUN_TEST(AutoGenTest_tmSimpleInstanceCreation);
    RUN_TEST(AutoGenTest_tmMethodArgument_);
    RUN_TEST(AutoGenTest_tmNumberEquals);
    RUN_TEST(AutoGenTest_tmClassReferenceReturn);
    RUN_TEST(AutoGenTest_tmCharacterEquals);
    RUN_TEST(AutoGenTest_tmCharacter);
    RUN_TEST(AutoGenTest_tmVariableInstanceCreation);
    RUN_TEST(AutoGenTest_tmBooleanTrue);
    RUN_TEST(AutoGenTest_tmNumberSubtract);
    RUN_TEST(AutoGenTest_tmNumberAdd);
    RUN_TEST(AutoGenTest_tmBooleanEquals);
    RUN_TEST(AutoGenTest_tmMethodArguments_with_with_);
    RUN_TEST(AutoGenTest_tmSimpleBasicArithmetik);
    RUN_TEST(AutoGenTest_tmStringEquals);
    RUN_TEST(AutoGenTest_tmSymbolEquals);
    RUN_TEST(AutoGenTest_tmNumberDiv);
    RUN_TEST(AutoGenTest_assert_);
    RUN_TEST(AutoGenTest_tmFibonacci);
    RUN_TEST(AutoGenTest_tmVariableInstanceCreationSized);
    RUN_TEST(AutoGenTest_tmExtendedReturn);
})
