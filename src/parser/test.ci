// Auto generated Tests from BridgeTest

// Test Object to put test methods in
Type_Class Test_Class;
Object test_Class_Instance;
// Test Method symbol
Type_Symbol SMB_runTestCase;
Object symbol11;
Object class86;
Object classreference86;
Object symbol9;
Object class87;
Object classreference87;
Object symbol20;
Object arraylayout18;
Object instancevariable103;
Object instancevariable104;
Object instancevariable105;
Object class88;
Object method647;
Object symbol45;
Object methodclosure647;
Object localvariable290;
Object array273;
Object assign171;
Object method648;
Object symbol41;
Object methodclosure648;
Object localvariable291;
Object array274;
Object assign172;
Object method649;
Object symbol43;
Object methodclosure649;
Object method650;
Object symbol44;
Object methodclosure650;
Object localvariable292;
Object array275;
Object assign173;
Object method651;
Object symbol42;
Object methodclosure651;
Object method652;
Object symbol46;
Object methodclosure652;
Object classreference88;
Object symbol27;
Object objectlayout69;
Object instancevariable106;
Object instancevariable107;
Object instancevariable108;
Object class89;
Object method653;
Object methodclosure653;
Object localvariable293;
Object array276;
Object assign174;
Object method654;
Object methodclosure654;
Object localvariable294;
Object array277;
Object assign175;
Object method655;
Object methodclosure655;
Object method656;
Object methodclosure656;
Object localvariable295;
Object array278;
Object assign176;
Object method657;
Object methodclosure657;
Object method658;
Object methodclosure658;
Object classreference89;
Object symbol5;
Object class90;
Object smallint887;
Object constant1089;
Object smallint888;
Object constant1090;
Object send1973;
Object method659;
Object symbol19;
Object methodclosure659;
Object smallint889;
Object constant1091;
Object smallint890;
Object constant1092;
Object send1974;
Object method660;
Object symbol31;
Object methodclosure660;
Object send1975;
Object method661;
Object symbol39;
Object methodclosure661;
Object localvariable296;
Object array279;
Object send1976;
Object assign177;
Object localvariable297;
Object array280;
Object smallint891;
Object constant1093;
Object send1977;
Object smallint892;
Object constant1094;
Object send1978;
Object block103;
Object symbol48;
Object smallint893;
Object constant1095;
Object send1979;
Object send1980;
Object symbol49;
Object send1981;
Object smallint894;
Object constant1096;
Object send1982;
Object send1983;
Object send1984;
Object smallint895;
Object constant1097;
Object send1985;
Object send1986;
Object send1987;
Object smallint896;
Object constant1098;
Object send1988;
Object send1989;
Object send1990;
Object send1991;
Object send1992;
Object send1993;
Object send1994;
Object method662;
Object symbol28;
Object methodclosure662;
Object smallint897;
Object constant1099;
Object method663;
Object symbol40;
Object methodclosure663;
Object localvariable298;
Object array281;
Object smallint898;
Object constant1100;
Object send1995;
Object assign178;
Object smallint899;
Object constant1101;
Object smallint900;
Object constant1102;
Object send1996;
Object smallint901;
Object constant1103;
Object smallint902;
Object constant1104;
Object send1997;
Object smallint903;
Object constant1105;
Object send1998;
Object smallint904;
Object constant1106;
Object send1999;
Object send2000;
Object smallint905;
Object constant1107;
Object send2001;
Object smallint906;
Object constant1108;
Object send2002;
Object send2003;
Object localvariable299;
Object array282;
Object smallint907;
Object constant1109;
Object send2004;
Object smallint908;
Object constant1110;
Object send2005;
Object block104;
Object smallint909;
Object constant1111;
Object send2006;
Object send2007;
Object send2008;
Object smallint910;
Object constant1112;
Object send2009;
Object send2010;
Object send2011;
Object smallint911;
Object constant1113;
Object send2012;
Object send2013;
Object send2014;
Object smallint912;
Object constant1114;
Object send2015;
Object send2016;
Object send2017;
Object send2018;
Object send2019;
Object smallint913;
Object constant1115;
Object send2020;
Object send2021;
Object send2022;
Object send2023;
Object smallint914;
Object constant1116;
Object send2024;
Object send2025;
Object method664;
Object symbol32;
Object methodclosure664;
Object localvariable300;
Object array283;
Object send2026;
Object assign179;
Object localvariable301;
Object array284;
Object smallint915;
Object constant1117;
Object send2027;
Object smallint916;
Object constant1118;
Object send2028;
Object block105;
Object smallint917;
Object constant1119;
Object send2029;
Object send2030;
Object send2031;
Object smallint918;
Object constant1120;
Object send2032;
Object send2033;
Object send2034;
Object smallint919;
Object constant1121;
Object send2035;
Object send2036;
Object send2037;
Object smallint920;
Object constant1122;
Object send2038;
Object send2039;
Object send2040;
Object send2041;
Object send2042;
Object send2043;
Object send2044;
Object method665;
Object symbol21;
Object methodclosure665;
Object symbol51;
Object constant1123;
Object constant1124;
Object send2045;
Object method666;
Object symbol13;
Object methodclosure666;
Object variable18;
Object array285;
Object smallint921;
Object constant1125;
Object smallint922;
Object constant1126;
Object send2046;
Object smallint923;
Object constant1127;
Object send2047;
Object block106;
Object smallint924;
Object constant1128;
Object send2048;
Object block107;
Object send2049;
Object block108;
Object send2050;
Object method667;
Object symbol29;
Object methodclosure667;
Object smallint925;
Object constant1129;
Object smallint926;
Object constant1130;
Object send2051;
Object method668;
Object symbol33;
Object methodclosure668;
Object localvariable302;
Object array286;
Object smallint927;
Object constant1131;
Object assign180;
Object method669;
Object symbol22;
Object methodclosure669;
Object method670;
Object symbol14;
Object methodclosure670;
Object smallint928;
Object constant1132;
Object smallint929;
Object constant1133;
Object send2052;
Object method671;
Object symbol34;
Object methodclosure671;
Object send2053;
Object method672;
Object symbol23;
Object methodclosure672;
Object character52;
Object constant1134;
Object method673;
Object symbol15;
Object methodclosure673;
Object method674;
Object symbol35;
Object methodclosure674;
Object string137;
Object constant1135;
Object string138;
Object constant1136;
Object send2054;
Object method675;
Object symbol24;
Object methodclosure675;
Object method676;
Object symbol16;
Object methodclosure676;
Object localvariable303;
Object localvariable304;
Object localvariable305;
Object array287;
Object send2055;
Object send2056;
Object method677;
Object symbol36;
Object methodclosure677;
Object localvariable306;
Object array288;
Object smallint930;
Object constant1137;
Object send2057;
Object method678;
Object symbol25;
Object methodclosure678;
Object smallint931;
Object constant1138;
Object smallint932;
Object constant1139;
Object send2058;
Object smallint933;
Object constant1140;
Object send2059;
Object smallint934;
Object constant1141;
Object send2060;
Object method679;
Object symbol17;
Object methodclosure679;
Object smallint935;
Object constant1142;
Object method680;
Object symbol37;
Object methodclosure680;
Object string139;
Object constant1143;
Object method681;
Object symbol26;
Object methodclosure681;
Object character53;
Object constant1144;
Object character54;
Object constant1145;
Object send2061;
Object method682;
Object symbol18;
Object methodclosure682;
Object smallint936;
Object constant1146;
Object smallint937;
Object constant1147;
Object send2062;
Object method683;
Object symbol30;
Object methodclosure683;
Object constant1148;
Object method684;
Object symbol38;
Object methodclosure684;
Object classreference90;


void create_ast() {
symbol11 = (Object)new_Type_Symbol_cached(L"ProtoObject");
class86 = (Object)new_Class(Nil, empty_object_layout);
((Type_Class)class86)->name = (Type_Symbol)symbol11;
classreference86 = (Object)new_Organization_ClassReference((Type_Class)class86);
symbol9 = (Object)new_Type_Symbol_cached(L"Object");
class87 = (Object)new_Class(class86, empty_object_layout);
((Type_Class)class87)->name = (Type_Symbol)symbol9;
classreference87 = (Object)new_Organization_ClassReference((Type_Class)class87);
symbol20 = (Object)new_Type_Symbol_cached(L"StandardVariableTestClass");
arraylayout18 = (Object)create_type_with_vars(Type_ArrayLayout, 3);
instancevariable103 = (Object)new_AST_InstVariable(0, L"a");
((Type_Array)arraylayout18)->values[0] = instancevariable103;instancevariable104 = (Object)new_AST_InstVariable(1, L"b");
((Type_Array)arraylayout18)->values[1] = instancevariable104;instancevariable105 = (Object)new_AST_InstVariable(2, L"c");
((Type_Array)arraylayout18)->values[2] = instancevariable105;class88 =
(Object)new_Class(Type_Object_Class, arraylayout18);
((Type_Class)class88)->name = (Type_Symbol)symbol20;

// StandardVariableTestClass>>c
method647 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable105);
symbol45 = (Object)new_Type_Symbol_cached(L"c");
methodclosure647 = (Object)new_Runtime_MethodClosure(method647);
store_method((Type_Class)class88, (Type_Symbol)symbol45, (Runtime_MethodClosure)methodclosure647);

// StandardVariableTestClass>>c:
localvariable290 = (Object)new_AST_Variable_named(L"anObject");
array273 = (Object)new_Type_Array_with(1, localvariable290);
assign171 = (Object)new_AST_Assign((Object)instancevariable105, (Object)localvariable290);
method648 = (Object)new_AST_Method_with((Type_Array)array273, (Type_Array)empty_Type_Array, 2, assign171, Self);
symbol41 = (Object)new_Type_Symbol_cached(L"c:");
methodclosure648 = (Object)new_Runtime_MethodClosure(method648);
store_method((Type_Class)class88, (Type_Symbol)symbol41, (Runtime_MethodClosure)methodclosure648);

// StandardVariableTestClass>>a:
localvariable291 = (Object)new_AST_Variable_named(L"anObject");
array274 = (Object)new_Type_Array_with(1, localvariable291);
assign172 = (Object)new_AST_Assign((Object)instancevariable103, (Object)localvariable291);
method649 = (Object)new_AST_Method_with((Type_Array)array274, (Type_Array)empty_Type_Array, 2, assign172, Self);
symbol43 = (Object)new_Type_Symbol_cached(L"a:");
methodclosure649 = (Object)new_Runtime_MethodClosure(method649);
store_method((Type_Class)class88, (Type_Symbol)symbol43, (Runtime_MethodClosure)methodclosure649);

// StandardVariableTestClass>>b
method650 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable104);
symbol44 = (Object)new_Type_Symbol_cached(L"b");
methodclosure650 = (Object)new_Runtime_MethodClosure(method650);
store_method((Type_Class)class88, (Type_Symbol)symbol44, (Runtime_MethodClosure)methodclosure650);

// StandardVariableTestClass>>b:
localvariable292 = (Object)new_AST_Variable_named(L"anObject");
array275 = (Object)new_Type_Array_with(1, localvariable292);
assign173 = (Object)new_AST_Assign((Object)instancevariable104, (Object)localvariable292);
method651 = (Object)new_AST_Method_with((Type_Array)array275, (Type_Array)empty_Type_Array, 2, assign173, Self);
symbol42 = (Object)new_Type_Symbol_cached(L"b:");
methodclosure651 = (Object)new_Runtime_MethodClosure(method651);
store_method((Type_Class)class88, (Type_Symbol)symbol42, (Runtime_MethodClosure)methodclosure651);

// StandardVariableTestClass>>a
method652 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable103);
symbol46 = (Object)new_Type_Symbol_cached(L"a");
methodclosure652 = (Object)new_Runtime_MethodClosure(method652);
store_method((Type_Class)class88, (Type_Symbol)symbol46, (Runtime_MethodClosure)methodclosure652);
classreference88 = (Object)new_Organization_ClassReference((Type_Class)class88);
symbol27 = (Object)new_Type_Symbol_cached(L"StandardTestClass");
objectlayout69 = (Object)create_type_with_vars(Type_ObjectLayout, 3);
instancevariable106 = (Object)new_AST_InstVariable(0, L"a");
((Type_Array)objectlayout69)->values[0] = instancevariable106;
instancevariable107 = (Object)new_AST_InstVariable(1, L"b");
((Type_Array)objectlayout69)->values[1] = instancevariable107;
instancevariable108 = (Object)new_AST_InstVariable(2, L"c");
((Type_Array)objectlayout69)->values[2] = instancevariable108;
class89 = (Object)new_Class(Type_Object_Class, objectlayout69);
((Type_Class)class89)->name = (Type_Symbol)symbol27;

// StandardTestClass>>c
method653 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable108);
methodclosure653 = (Object)new_Runtime_MethodClosure(method653);
store_method((Type_Class)class89, (Type_Symbol)symbol45, (Runtime_MethodClosure)methodclosure653);

// StandardTestClass>>c:
localvariable293 = (Object)new_AST_Variable_named(L"anObject");
array276 = (Object)new_Type_Array_with(1, localvariable293);
assign174 = (Object)new_AST_Assign((Object)instancevariable108, (Object)localvariable293);
method654 = (Object)new_AST_Method_with((Type_Array)array276, (Type_Array)empty_Type_Array, 2, assign174, Self);
methodclosure654 = (Object)new_Runtime_MethodClosure(method654);
store_method((Type_Class)class89, (Type_Symbol)symbol41, (Runtime_MethodClosure)methodclosure654);

// StandardTestClass>>a:
localvariable294 = (Object)new_AST_Variable_named(L"anObject");
array277 = (Object)new_Type_Array_with(1, localvariable294);
assign175 = (Object)new_AST_Assign((Object)instancevariable106, (Object)localvariable294);
method655 = (Object)new_AST_Method_with((Type_Array)array277, (Type_Array)empty_Type_Array, 2, assign175, Self);
methodclosure655 = (Object)new_Runtime_MethodClosure(method655);
store_method((Type_Class)class89, (Type_Symbol)symbol43, (Runtime_MethodClosure)methodclosure655);

// StandardTestClass>>b
method656 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable107);
methodclosure656 = (Object)new_Runtime_MethodClosure(method656);
store_method((Type_Class)class89, (Type_Symbol)symbol44, (Runtime_MethodClosure)methodclosure656);

// StandardTestClass>>b:
localvariable295 = (Object)new_AST_Variable_named(L"anObject");
array278 = (Object)new_Type_Array_with(1, localvariable295);
assign176 = (Object)new_AST_Assign((Object)instancevariable107, (Object)localvariable295);
method657 = (Object)new_AST_Method_with((Type_Array)array278, (Type_Array)empty_Type_Array, 2, assign176, Self);
methodclosure657 = (Object)new_Runtime_MethodClosure(method657);
store_method((Type_Class)class89, (Type_Symbol)symbol42, (Runtime_MethodClosure)methodclosure657);

// StandardTestClass>>a
method658 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, instancevariable106);
methodclosure658 = (Object)new_Runtime_MethodClosure(method658);
store_method((Type_Class)class89, (Type_Symbol)symbol46, (Runtime_MethodClosure)methodclosure658);
classreference89 = (Object)new_Organization_ClassReference((Type_Class)class89);
symbol5 = (Object)new_Type_Symbol_cached(L"BridgeTest");
class90 = (Object)new_Class(Type_Object_Class, empty_object_layout);
((Type_Class)class90)->name = (Type_Symbol)symbol5;

// BridgeTest>>tmNumberEquals
smallint887 = (Object)new_Type_SmallInt(1);
constant1089 = (Object)new_AST_Constant(smallint887);
smallint888 = (Object)new_Type_SmallInt(1);
constant1090 = (Object)new_AST_Constant(smallint888);
send1973 = (Object)new_AST_Send((Object)constant1089, (Object)SMB__equal, 1, constant1090);
method659 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send1973);
symbol19 = (Object)new_Type_Symbol_cached(L"tmNumberEquals");
methodclosure659 = (Object)new_Runtime_MethodClosure(method659);
store_method((Type_Class)class90, (Type_Symbol)symbol19, (Runtime_MethodClosure)methodclosure659);

// BridgeTest>>tmNumberMult
smallint889 = (Object)new_Type_SmallInt(2);
constant1091 = (Object)new_AST_Constant(smallint889);
smallint890 = (Object)new_Type_SmallInt(3);
constant1092 = (Object)new_AST_Constant(smallint890);
send1974 = (Object)new_AST_Send((Object)constant1091, (Object)SMB__times, 1, constant1092);
method660 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send1974);
symbol31 = (Object)new_Type_Symbol_cached(L"tmNumberMult");
methodclosure660 = (Object)new_Runtime_MethodClosure(method660);
store_method((Type_Class)class90, (Type_Symbol)symbol31, (Runtime_MethodClosure)methodclosure660);

// BridgeTest>>tmClassReferenceReturn
send1975 = (Object)new_AST_Send((Object)Metaclass_Reference, (Object)SMB_name, 0);
method661 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send1975);
symbol39 = (Object)new_Type_Symbol_cached(L"tmClassReferenceReturn");
methodclosure661 = (Object)new_Runtime_MethodClosure(method661);
store_method((Type_Class)class90, (Type_Symbol)symbol39, (Runtime_MethodClosure)methodclosure661);

// BridgeTest>>tmSimpleInstanceCreation
localvariable296 = (Object)new_AST_Variable_named(L"instance");
array279 = (Object)new_Type_Array_with(1, localvariable296);
send1976 = (Object)new_AST_Send((Object)classreference89, (Object)SMB_basicNew, 0);
assign177 = (Object)new_AST_Assign((Object)localvariable296, (Object)send1976);
localvariable297 = (Object)new_AST_Variable_named(L"receiver");
array280 = (Object)new_Type_Array_with(1, localvariable297);
smallint891 = (Object)new_Type_SmallInt(2);
constant1093 = (Object)new_AST_Constant(smallint891);
send1977 = (Object)new_AST_Send((Object)localvariable297, (Object)symbol42, 1, constant1093);
smallint892 = (Object)new_Type_SmallInt(3);
constant1094 = (Object)new_AST_Constant(smallint892);
send1978 = (Object)new_AST_Send((Object)localvariable297, (Object)symbol41, 1, constant1094);
block103 = (Object)new_AST_Block_with((Type_Array)array280, (Type_Array)empty_Type_Array, 2, 2, send1977, send1978);
symbol48 = (Object)new_Type_Symbol_cached(L"nil");
smallint893 = (Object)new_Type_SmallInt(1);
constant1095 = (Object)new_AST_Constant(smallint893);
send1979 = (Object)new_AST_Send((Object)localvariable296, (Object)symbol43, 1, constant1095);
send1980 = (Object)new_AST_Send((Object)block103, (Object)symbol48, 1, send1979);
symbol49 = (Object)new_Type_Symbol_cached(L"assert:");
send1981 = (Object)new_AST_Send((Object)localvariable296, (Object)symbol46, 0);
smallint894 = (Object)new_Type_SmallInt(1);
constant1096 = (Object)new_AST_Constant(smallint894);
send1982 = (Object)new_AST_Send((Object)send1981, (Object)SMB__equal, 1, constant1096);
send1983 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send1982);
send1984 = (Object)new_AST_Send((Object)localvariable296, (Object)symbol44, 0);
smallint895 = (Object)new_Type_SmallInt(2);
constant1097 = (Object)new_AST_Constant(smallint895);
send1985 = (Object)new_AST_Send((Object)send1984, (Object)SMB__equal, 1, constant1097);
send1986 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send1985);
send1987 = (Object)new_AST_Send((Object)localvariable296, (Object)symbol45, 0);
smallint896 = (Object)new_Type_SmallInt(3);
constant1098 = (Object)new_AST_Constant(smallint896);
send1988 = (Object)new_AST_Send((Object)send1987, (Object)SMB__equal, 1, constant1098);
send1989 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send1988);
send1990 = (Object)new_AST_Send((Object)localvariable296, (Object)symbol46, 0);
send1991 = (Object)new_AST_Send((Object)localvariable296, (Object)symbol44, 0);
send1992 = (Object)new_AST_Send((Object)send1990, (Object)SMB__plus, 1, send1991);
send1993 = (Object)new_AST_Send((Object)localvariable296, (Object)symbol45, 0);
send1994 = (Object)new_AST_Send((Object)send1992, (Object)SMB__plus, 1, send1993);
method662 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array279, 6, assign177, send1980, send1983, send1986, send1989, send1994);
symbol28 = (Object)new_Type_Symbol_cached(L"tmSimpleInstanceCreation");
methodclosure662 = (Object)new_Runtime_MethodClosure(method662);
store_method((Type_Class)class90, (Type_Symbol)symbol28, (Runtime_MethodClosure)methodclosure662);

// BridgeTest>>tmNumber
smallint897 = (Object)new_Type_SmallInt(1);
constant1099 = (Object)new_AST_Constant(smallint897);
method663 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant1099);
symbol40 = (Object)new_Type_Symbol_cached(L"tmNumber");
methodclosure663 = (Object)new_Runtime_MethodClosure(method663);
store_method((Type_Class)class90, (Type_Symbol)symbol40, (Runtime_MethodClosure)methodclosure663);

// BridgeTest>>tmVariableInstanceCreationSized
localvariable298 = (Object)new_AST_Variable_named(L"instance");
array281 = (Object)new_Type_Array_with(1, localvariable298);
smallint898 = (Object)new_Type_SmallInt(100);
constant1100 = (Object)new_AST_Constant(smallint898);
send1995 = (Object)new_AST_Send((Object)classreference88, (Object)SMB_basicNew_, 1, constant1100);
assign178 = (Object)new_AST_Assign((Object)localvariable298, (Object)send1995);
smallint899 = (Object)new_Type_SmallInt(1);
constant1101 = (Object)new_AST_Constant(smallint899);
smallint900 = (Object)new_Type_SmallInt(1);
constant1102 = (Object)new_AST_Constant(smallint900);
send1996 = (Object)new_AST_Send((Object)localvariable298, (Object)SMB_at_put_, 2, constant1101, constant1102);
smallint901 = (Object)new_Type_SmallInt(100);
constant1103 = (Object)new_AST_Constant(smallint901);
smallint902 = (Object)new_Type_SmallInt(100);
constant1104 = (Object)new_AST_Constant(smallint902);
send1997 = (Object)new_AST_Send((Object)localvariable298, (Object)SMB_at_put_, 2, constant1103, constant1104);
smallint903 = (Object)new_Type_SmallInt(1);
constant1105 = (Object)new_AST_Constant(smallint903);
send1998 = (Object)new_AST_Send((Object)localvariable298, (Object)SMB_at_, 1, constant1105);
smallint904 = (Object)new_Type_SmallInt(1);
constant1106 = (Object)new_AST_Constant(smallint904);
send1999 = (Object)new_AST_Send((Object)send1998, (Object)SMB__equal, 1, constant1106);
send2000 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send1999);
smallint905 = (Object)new_Type_SmallInt(100);
constant1107 = (Object)new_AST_Constant(smallint905);
send2001 = (Object)new_AST_Send((Object)localvariable298, (Object)SMB_at_, 1, constant1107);
smallint906 = (Object)new_Type_SmallInt(100);
constant1108 = (Object)new_AST_Constant(smallint906);
send2002 = (Object)new_AST_Send((Object)send2001, (Object)SMB__equal, 1, constant1108);
send2003 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send2002);
localvariable299 = (Object)new_AST_Variable_named(L"receiver");
array282 = (Object)new_Type_Array_with(1, localvariable299);
smallint907 = (Object)new_Type_SmallInt(2);
constant1109 = (Object)new_AST_Constant(smallint907);
send2004 = (Object)new_AST_Send((Object)localvariable299, (Object)symbol42, 1, constant1109);
smallint908 = (Object)new_Type_SmallInt(3);
constant1110 = (Object)new_AST_Constant(smallint908);
send2005 = (Object)new_AST_Send((Object)localvariable299, (Object)symbol41, 1, constant1110);
block104 = (Object)new_AST_Block_with((Type_Array)array282, (Type_Array)empty_Type_Array, 2, 2, send2004, send2005);
smallint909 = (Object)new_Type_SmallInt(1);
constant1111 = (Object)new_AST_Constant(smallint909);
send2006 = (Object)new_AST_Send((Object)localvariable298, (Object)symbol43, 1, constant1111);
send2007 = (Object)new_AST_Send((Object)block104, (Object)symbol48, 1, send2006);
send2008 = (Object)new_AST_Send((Object)localvariable298, (Object)symbol46, 0);
smallint910 = (Object)new_Type_SmallInt(1);
constant1112 = (Object)new_AST_Constant(smallint910);
send2009 = (Object)new_AST_Send((Object)send2008, (Object)SMB__equal, 1, constant1112);
send2010 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send2009);
send2011 = (Object)new_AST_Send((Object)localvariable298, (Object)symbol44, 0);
smallint911 = (Object)new_Type_SmallInt(2);
constant1113 = (Object)new_AST_Constant(smallint911);
send2012 = (Object)new_AST_Send((Object)send2011, (Object)SMB__equal, 1, constant1113);
send2013 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send2012);
send2014 = (Object)new_AST_Send((Object)localvariable298, (Object)symbol45, 0);
smallint912 = (Object)new_Type_SmallInt(3);
constant1114 = (Object)new_AST_Constant(smallint912);
send2015 = (Object)new_AST_Send((Object)send2014, (Object)SMB__equal, 1, constant1114);
send2016 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send2015);
send2017 = (Object)new_AST_Send((Object)localvariable298, (Object)symbol46, 0);
send2018 = (Object)new_AST_Send((Object)localvariable298, (Object)symbol44, 0);
send2019 = (Object)new_AST_Send((Object)localvariable298, (Object)symbol45, 0);
smallint913 = (Object)new_Type_SmallInt(1);
constant1115 = (Object)new_AST_Constant(smallint913);
send2020 = (Object)new_AST_Send((Object)localvariable298, (Object)SMB_at_, 1, constant1115);
send2021 = (Object)new_AST_Send((Object)send2019, (Object)SMB__plus, 1, send2020);
send2022 = (Object)new_AST_Send((Object)send2018, (Object)SMB__plus, 1, send2021);
send2023 = (Object)new_AST_Send((Object)send2017, (Object)SMB__plus, 1, send2022);
smallint914 = (Object)new_Type_SmallInt(100);
constant1116 = (Object)new_AST_Constant(smallint914);
send2024 = (Object)new_AST_Send((Object)localvariable298, (Object)SMB_at_, 1, constant1116);
send2025 = (Object)new_AST_Send((Object)send2023, (Object)SMB__plus, 1, send2024);
method664 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array281, 10, assign178, send1996, send1997, send2000, send2003, send2007, send2010, send2013, send2016, send2025);
symbol32 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreationSized");
methodclosure664 = (Object)new_Runtime_MethodClosure(method664);
store_method((Type_Class)class90, (Type_Symbol)symbol32, (Runtime_MethodClosure)methodclosure664);

// BridgeTest>>tmVariableInstanceCreation
localvariable300 = (Object)new_AST_Variable_named(L"instance");
array283 = (Object)new_Type_Array_with(1, localvariable300);
send2026 = (Object)new_AST_Send((Object)classreference88, (Object)SMB_basicNew, 0);
assign179 = (Object)new_AST_Assign((Object)localvariable300, (Object)send2026);
localvariable301 = (Object)new_AST_Variable_named(L"receiver");
array284 = (Object)new_Type_Array_with(1, localvariable301);
smallint915 = (Object)new_Type_SmallInt(2);
constant1117 = (Object)new_AST_Constant(smallint915);
send2027 = (Object)new_AST_Send((Object)localvariable301, (Object)symbol42, 1, constant1117);
smallint916 = (Object)new_Type_SmallInt(3);
constant1118 = (Object)new_AST_Constant(smallint916);
send2028 = (Object)new_AST_Send((Object)localvariable301, (Object)symbol41, 1, constant1118);
block105 = (Object)new_AST_Block_with((Type_Array)array284, (Type_Array)empty_Type_Array, 2, 2, send2027, send2028);
smallint917 = (Object)new_Type_SmallInt(1);
constant1119 = (Object)new_AST_Constant(smallint917);
send2029 = (Object)new_AST_Send((Object)localvariable300, (Object)symbol43, 1, constant1119);
send2030 = (Object)new_AST_Send((Object)block105, (Object)symbol48, 1, send2029);
send2031 = (Object)new_AST_Send((Object)localvariable300, (Object)symbol46, 0);
smallint918 = (Object)new_Type_SmallInt(1);
constant1120 = (Object)new_AST_Constant(smallint918);
send2032 = (Object)new_AST_Send((Object)send2031, (Object)SMB__equal, 1, constant1120);
send2033 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send2032);
send2034 = (Object)new_AST_Send((Object)localvariable300, (Object)symbol44, 0);
smallint919 = (Object)new_Type_SmallInt(2);
constant1121 = (Object)new_AST_Constant(smallint919);
send2035 = (Object)new_AST_Send((Object)send2034, (Object)SMB__equal, 1, constant1121);
send2036 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send2035);
send2037 = (Object)new_AST_Send((Object)localvariable300, (Object)symbol45, 0);
smallint920 = (Object)new_Type_SmallInt(3);
constant1122 = (Object)new_AST_Constant(smallint920);
send2038 = (Object)new_AST_Send((Object)send2037, (Object)SMB__equal, 1, constant1122);
send2039 = (Object)new_AST_Send((Object)Self, (Object)symbol49, 1, send2038);
send2040 = (Object)new_AST_Send((Object)localvariable300, (Object)symbol46, 0);
send2041 = (Object)new_AST_Send((Object)localvariable300, (Object)symbol44, 0);
send2042 = (Object)new_AST_Send((Object)send2040, (Object)SMB__plus, 1, send2041);
send2043 = (Object)new_AST_Send((Object)localvariable300, (Object)symbol45, 0);
send2044 = (Object)new_AST_Send((Object)send2042, (Object)SMB__plus, 1, send2043);
method665 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array283, 6, assign179, send2030, send2033, send2036, send2039, send2044);
symbol21 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreation");
methodclosure665 = (Object)new_Runtime_MethodClosure(method665);
store_method((Type_Class)class90, (Type_Symbol)symbol21, (Runtime_MethodClosure)methodclosure665);

// BridgeTest>>tmSymbolEquals
symbol51 = (Object)new_Type_Symbol_cached(L"Symbol");
constant1123 = (Object)new_AST_Constant(symbol51);
constant1124 = (Object)new_AST_Constant(symbol51);
send2045 = (Object)new_AST_Send((Object)constant1123, (Object)SMB__equal, 1, constant1124);
method666 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send2045);
symbol13 = (Object)new_Type_Symbol_cached(L"tmSymbolEquals");
methodclosure666 = (Object)new_Runtime_MethodClosure(method666);
store_method((Type_Class)class90, (Type_Symbol)symbol13, (Runtime_MethodClosure)methodclosure666);

// BridgeTest>>tmExtendedReturn
variable18 = (Object)new_AST_Variable_named(L"return");
array285 = (Object)new_Type_Array_with(1, variable18);
smallint921 = (Object)new_Type_SmallInt(1);
constant1125 = (Object)new_AST_Constant(smallint921);
smallint922 = (Object)new_Type_SmallInt(2);
constant1126 = (Object)new_AST_Constant(smallint922);
send2046 = (Object)new_AST_Send((Object)constant1125, (Object)SMB__gt, 1, constant1126);
smallint923 = (Object)new_Type_SmallInt(1);
constant1127 = (Object)new_AST_Constant(smallint923);
send2047 = (Object)new_AST_Send((Object)variable18, (Object)SMB_escape_, 1, constant1127);
block106 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 3, 1, send2047);
smallint924 = (Object)new_Type_SmallInt(2);
constant1128 = (Object)new_AST_Constant(smallint924);
send2048 = (Object)new_AST_Send((Object)variable18, (Object)SMB_escape_, 1, constant1128);
block107 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 3, 1, send2048);
send2049 = (Object)new_AST_Send((Object)send2046, (Object)SMB_ifTrue_ifFalse_, 2, block106, block107);
block108 = (Object)new_AST_Block_with((Type_Array)array285, (Type_Array)empty_Type_Array, 2, 2, send2049, Self);
send2050 = (Object)new_AST_Send((Object)AST_Callec_Reference, (Object)SMB_on_, 1, block108);
method667 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send2050);
symbol29 = (Object)new_Type_Symbol_cached(L"tmExtendedReturn");
methodclosure667 = (Object)new_Runtime_MethodClosure(method667);
store_method((Type_Class)class90, (Type_Symbol)symbol29, (Runtime_MethodClosure)methodclosure667);

// BridgeTest>>tmNumberAdd
smallint925 = (Object)new_Type_SmallInt(1);
constant1129 = (Object)new_AST_Constant(smallint925);
smallint926 = (Object)new_Type_SmallInt(1);
constant1130 = (Object)new_AST_Constant(smallint926);
send2051 = (Object)new_AST_Send((Object)constant1129, (Object)SMB__plus, 1, constant1130);
method668 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send2051);
symbol33 = (Object)new_Type_Symbol_cached(L"tmNumberAdd");
methodclosure668 = (Object)new_Runtime_MethodClosure(method668);
store_method((Type_Class)class90, (Type_Symbol)symbol33, (Runtime_MethodClosure)methodclosure668);

// BridgeTest>>tmLocalVariable
localvariable302 = (Object)new_AST_Variable_named(L"a");
array286 = (Object)new_Type_Array_with(1, localvariable302);
smallint927 = (Object)new_Type_SmallInt(1);
constant1131 = (Object)new_AST_Constant(smallint927);
assign180 = (Object)new_AST_Assign((Object)localvariable302, (Object)constant1131);
method669 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)array286, 2, assign180, localvariable302);
symbol22 = (Object)new_Type_Symbol_cached(L"tmLocalVariable");
methodclosure669 = (Object)new_Runtime_MethodClosure(method669);
store_method((Type_Class)class90, (Type_Symbol)symbol22, (Runtime_MethodClosure)methodclosure669);

// BridgeTest>>tmBooleanFalse
method670 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, False_Const);
symbol14 = (Object)new_Type_Symbol_cached(L"tmBooleanFalse");
methodclosure670 = (Object)new_Runtime_MethodClosure(method670);
store_method((Type_Class)class90, (Type_Symbol)symbol14, (Runtime_MethodClosure)methodclosure670);

// BridgeTest>>tmNumberSubtract
smallint928 = (Object)new_Type_SmallInt(2);
constant1132 = (Object)new_AST_Constant(smallint928);
smallint929 = (Object)new_Type_SmallInt(1);
constant1133 = (Object)new_AST_Constant(smallint929);
send2052 = (Object)new_AST_Send((Object)constant1132, (Object)SMB__minus, 1, constant1133);
method671 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send2052);
symbol34 = (Object)new_Type_Symbol_cached(L"tmNumberSubtract");
methodclosure671 = (Object)new_Runtime_MethodClosure(method671);
store_method((Type_Class)class90, (Type_Symbol)symbol34, (Runtime_MethodClosure)methodclosure671);

// BridgeTest>>tmBooleanEquals
send2053 = (Object)new_AST_Send((Object)True_Const, (Object)SMB__equal, 1, True_Const);
method672 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send2053);
symbol23 = (Object)new_Type_Symbol_cached(L"tmBooleanEquals");
methodclosure672 = (Object)new_Runtime_MethodClosure(method672);
store_method((Type_Class)class90, (Type_Symbol)symbol23, (Runtime_MethodClosure)methodclosure672);

// BridgeTest>>tmCharacter
character52 = (Object)new_Type_Character(L'C');
constant1134 = (Object)new_AST_Constant(character52);
method673 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant1134);
symbol15 = (Object)new_Type_Symbol_cached(L"tmCharacter");
methodclosure673 = (Object)new_Runtime_MethodClosure(method673);
store_method((Type_Class)class90, (Type_Symbol)symbol15, (Runtime_MethodClosure)methodclosure673);

// BridgeTest>>tmBooleanTrue
method674 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, True_Const);
symbol35 = (Object)new_Type_Symbol_cached(L"tmBooleanTrue");
methodclosure674 = (Object)new_Runtime_MethodClosure(method674);
store_method((Type_Class)class90, (Type_Symbol)symbol35, (Runtime_MethodClosure)methodclosure674);

// BridgeTest>>tmStringEquals
string137 = (Object)new_Type_String(L"String");
constant1135 = (Object)new_AST_Constant(string137);
string138 = (Object)new_Type_String(L"String");
constant1136 = (Object)new_AST_Constant(string138);
send2054 = (Object)new_AST_Send((Object)constant1135, (Object)SMB__equal, 1, constant1136);
method675 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send2054);
symbol24 = (Object)new_Type_Symbol_cached(L"tmStringEquals");
methodclosure675 = (Object)new_Runtime_MethodClosure(method675);
store_method((Type_Class)class90, (Type_Symbol)symbol24, (Runtime_MethodClosure)methodclosure675);

// BridgeTest>>tmFibonacci
method676 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, Self);
symbol16 = (Object)new_Type_Symbol_cached(L"tmFibonacci");
methodclosure676 = (Object)new_Runtime_MethodClosure(method676);
store_method((Type_Class)class90, (Type_Symbol)symbol16, (Runtime_MethodClosure)methodclosure676);

// BridgeTest>>tmMethodArguments:with:with:
localvariable303 = (Object)new_AST_Variable_named(L"arg1");
localvariable304 = (Object)new_AST_Variable_named(L"arg2");
localvariable305 = (Object)new_AST_Variable_named(L"arg3");
array287 = (Object)new_Type_Array_with(3, localvariable303, localvariable304, localvariable305);
send2055 = (Object)new_AST_Send((Object)localvariable303, (Object)SMB__concat, 1, localvariable304);
send2056 = (Object)new_AST_Send((Object)send2055, (Object)SMB__concat, 1, localvariable305);
method677 = (Object)new_AST_Method_with((Type_Array)array287, (Type_Array)empty_Type_Array, 1, send2056);
symbol36 = (Object)new_Type_Symbol_cached(L"tmMethodArguments:with:with:");
methodclosure677 = (Object)new_Runtime_MethodClosure(method677);
store_method((Type_Class)class90, (Type_Symbol)symbol36, (Runtime_MethodClosure)methodclosure677);

// BridgeTest>>tmMethodArgument:
localvariable306 = (Object)new_AST_Variable_named(L"arg");
array288 = (Object)new_Type_Array_with(1, localvariable306);
smallint930 = (Object)new_Type_SmallInt(1);
constant1137 = (Object)new_AST_Constant(smallint930);
send2057 = (Object)new_AST_Send((Object)localvariable306, (Object)SMB__plus, 1, constant1137);
method678 = (Object)new_AST_Method_with((Type_Array)array288, (Type_Array)empty_Type_Array, 1, send2057);
symbol25 = (Object)new_Type_Symbol_cached(L"tmMethodArgument:");
methodclosure678 = (Object)new_Runtime_MethodClosure(method678);
store_method((Type_Class)class90, (Type_Symbol)symbol25, (Runtime_MethodClosure)methodclosure678);

// BridgeTest>>tmSimpleBasicArithmetik
smallint931 = (Object)new_Type_SmallInt(1);
constant1138 = (Object)new_AST_Constant(smallint931);
smallint932 = (Object)new_Type_SmallInt(2);
constant1139 = (Object)new_AST_Constant(smallint932);
send2058 = (Object)new_AST_Send((Object)constant1138, (Object)SMB__plus, 1, constant1139);
smallint933 = (Object)new_Type_SmallInt(2);
constant1140 = (Object)new_AST_Constant(smallint933);
send2059 = (Object)new_AST_Send((Object)send2058, (Object)SMB__plus, 1, constant1140);
smallint934 = (Object)new_Type_SmallInt(5);
constant1141 = (Object)new_AST_Constant(smallint934);
send2060 = (Object)new_AST_Send((Object)send2059, (Object)SMB__times, 1, constant1141);
method679 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send2060);
symbol17 = (Object)new_Type_Symbol_cached(L"tmSimpleBasicArithmetik");
methodclosure679 = (Object)new_Runtime_MethodClosure(method679);
store_method((Type_Class)class90, (Type_Symbol)symbol17, (Runtime_MethodClosure)methodclosure679);

// BridgeTest>>tmSimpleReturn
smallint935 = (Object)new_Type_SmallInt(1);
constant1142 = (Object)new_AST_Constant(smallint935);
method680 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant1142);
symbol37 = (Object)new_Type_Symbol_cached(L"tmSimpleReturn");
methodclosure680 = (Object)new_Runtime_MethodClosure(method680);
store_method((Type_Class)class90, (Type_Symbol)symbol37, (Runtime_MethodClosure)methodclosure680);

// BridgeTest>>tmString
string139 = (Object)new_Type_String(L"String");
constant1143 = (Object)new_AST_Constant(string139);
method681 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant1143);
symbol26 = (Object)new_Type_Symbol_cached(L"tmString");
methodclosure681 = (Object)new_Runtime_MethodClosure(method681);
store_method((Type_Class)class90, (Type_Symbol)symbol26, (Runtime_MethodClosure)methodclosure681);

// BridgeTest>>tmCharacterEquals
character53 = (Object)new_Type_Character(L'C');
constant1144 = (Object)new_AST_Constant(character53);
character54 = (Object)new_Type_Character(L'C');
constant1145 = (Object)new_AST_Constant(character54);
send2061 = (Object)new_AST_Send((Object)constant1144, (Object)SMB__equal, 1, constant1145);
method682 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send2061);
symbol18 = (Object)new_Type_Symbol_cached(L"tmCharacterEquals");
methodclosure682 = (Object)new_Runtime_MethodClosure(method682);
store_method((Type_Class)class90, (Type_Symbol)symbol18, (Runtime_MethodClosure)methodclosure682);

// BridgeTest>>tmNumberDiv
smallint936 = (Object)new_Type_SmallInt(4);
constant1146 = (Object)new_AST_Constant(smallint936);
smallint937 = (Object)new_Type_SmallInt(2);
constant1147 = (Object)new_AST_Constant(smallint937);
send2062 = (Object)new_AST_Send((Object)constant1146, (Object)SMB__divide, 1, constant1147);
method683 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send2062);
symbol30 = (Object)new_Type_Symbol_cached(L"tmNumberDiv");
methodclosure683 = (Object)new_Runtime_MethodClosure(method683);
store_method((Type_Class)class90, (Type_Symbol)symbol30, (Runtime_MethodClosure)methodclosure683);

// BridgeTest>>tmSymbol
constant1148 = (Object)new_AST_Constant(symbol51);
method684 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant1148);
symbol38 = (Object)new_Type_Symbol_cached(L"tmSymbol");
methodclosure684 = (Object)new_Runtime_MethodClosure(method684);
store_method((Type_Class)class90, (Type_Symbol)symbol38, (Runtime_MethodClosure)methodclosure684);
classreference90 = (Object)new_Organization_ClassReference((Type_Class)class90);
}


/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanEquals)
/*
tmBooleanEquals
	^ true = true
*/
Object symbol23 = (Object)new_Type_Symbol_cached(L"tmBooleanEquals");
Object send2063 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol23, 0);
Object result = (Object)Eval((Object)send2063);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanFalse)
/*
tmBooleanFalse
	^ false
*/
Object symbol14 = (Object)new_Type_Symbol_cached(L"tmBooleanFalse");
Object send2064 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol14, 0);
Object result = (Object)Eval((Object)send2064);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanTrue)
/*
tmBooleanTrue
	^ true
*/
Object symbol35 = (Object)new_Type_Symbol_cached(L"tmBooleanTrue");
Object send2065 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol35, 0);
Object result = (Object)Eval((Object)send2065);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacter)
/*
tmCharacter
	^ $C
*/
Object symbol15 = (Object)new_Type_Symbol_cached(L"tmCharacter");
Object send2066 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol15, 0);
Object result = (Object)Eval((Object)send2066);
ASSERT_EMPTY_STACK
assert0(((Type_Character)result)->value == 'C');
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacterEquals)
/*
tmCharacterEquals
	^ $C = $C
*/
Object symbol18 = (Object)new_Type_Symbol_cached(L"tmCharacterEquals");
Object send2067 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol18, 0);
Object result = (Object)Eval((Object)send2067);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmClassReferenceReturn)
/*
tmClassReferenceReturn
	^ Metaclass name.
*/
Object symbol39 = (Object)new_Type_Symbol_cached(L"tmClassReferenceReturn");
Object send2068 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol39, 0);
Object result = (Object)Eval((Object)send2068);
ASSERT_EMPTY_STACK
Object symbol52 = (Object)new_Type_Symbol_cached(L"Metaclass");
result = Eval_Send1(result, SMB__equal, symbol52);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmExtendedReturn)
/*
tmExtendedReturn
	1 > 2 ifTrue: [ ^ 1 ]
		ifFalse: [ ^ 2].
*/
Object symbol29 = (Object)new_Type_Symbol_cached(L"tmExtendedReturn");
Object send2069 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol29, 0);
Object result = (Object)Eval((Object)send2069);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmLocalVariable)
/*
tmLocalVariable
	|a|
	a := 1.
	^ a
*/
Object symbol22 = (Object)new_Type_Symbol_cached(L"tmLocalVariable");
Object send2070 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol22, 0);
Object result = (Object)Eval((Object)send2070);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArgument_)
/*
tmMethodArgument: arg 
	<arg1: 1>
	^ arg + 1
*/
Object symbol25 = (Object)new_Type_Symbol_cached(L"tmMethodArgument:");
Object smallint938 = (Object)new_Type_SmallInt(1);
Object constant1149 = (Object)new_AST_Constant(smallint938);
Object send2071 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol25, 1, constant1149);
Object result = (Object)Eval((Object)send2071);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArguments_with_with_)
/*
tmMethodArguments: arg1 with: arg2 with: arg3 
	<arg1: 'asdf' arg2: 'asdf' arg3: 'df'>
	^ arg1 , arg2 , arg3
*/
Object symbol36 = (Object)new_Type_Symbol_cached(L"tmMethodArguments:with:with:");
Object string140 = (Object)new_Type_String(L"asdf");
Object constant1150 = (Object)new_AST_Constant(string140);
Object string141 = (Object)new_Type_String(L"asdf");
Object constant1151 = (Object)new_AST_Constant(string141);
Object string142 = (Object)new_Type_String(L"df");
Object constant1152 = (Object)new_AST_Constant(string142);
Object send2072 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol36, 3, constant1150, constant1151, constant1152);
Object result = (Object)Eval((Object)send2072);
ASSERT_EMPTY_STACK
Object string143 = (Object)new_Type_String(L"asdfasdfdf");
result = Eval_Send1(result, SMB__equal, string143);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumber)
/*
tmNumber
	^ 1
*/
Object symbol40 = (Object)new_Type_Symbol_cached(L"tmNumber");
Object send2073 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol40, 0);
Object result = (Object)Eval((Object)send2073);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberAdd)
/*
tmNumberAdd
	^ 1 + 1
*/
Object symbol33 = (Object)new_Type_Symbol_cached(L"tmNumberAdd");
Object send2074 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol33, 0);
Object result = (Object)Eval((Object)send2074);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberDiv)
/*
tmNumberDiv
	^ 4 / 2
*/
Object symbol30 = (Object)new_Type_Symbol_cached(L"tmNumberDiv");
Object send2075 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol30, 0);
Object result = (Object)Eval((Object)send2075);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberEquals)
/*
tmNumberEquals
	^ 1 = 1
*/
Object symbol19 = (Object)new_Type_Symbol_cached(L"tmNumberEquals");
Object send2076 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol19, 0);
Object result = (Object)Eval((Object)send2076);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberMult)
/*
tmNumberMult
	^ 2 * 3
*/
Object symbol31 = (Object)new_Type_Symbol_cached(L"tmNumberMult");
Object send2077 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol31, 0);
Object result = (Object)Eval((Object)send2077);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberSubtract)
/*
tmNumberSubtract
	^ 2 - 1
*/
Object symbol34 = (Object)new_Type_Symbol_cached(L"tmNumberSubtract");
Object send2078 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol34, 0);
Object result = (Object)Eval((Object)send2078);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleBasicArithmetik)
/*
tmSimpleBasicArithmetik
	^ (1 + 2) + 2 * 5
*/
Object symbol17 = (Object)new_Type_Symbol_cached(L"tmSimpleBasicArithmetik");
Object send2079 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol17, 0);
Object result = (Object)Eval((Object)send2079);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 25);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleReturn)
/*
tmSimpleReturn
	^ 1
*/
Object symbol37 = (Object)new_Type_Symbol_cached(L"tmSimpleReturn");
Object send2080 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol37, 0);
Object result = (Object)Eval((Object)send2080);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmString)
/*
tmString
	^ 'String'
*/
Object symbol26 = (Object)new_Type_Symbol_cached(L"tmString");
Object send2081 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol26, 0);
Object result = (Object)Eval((Object)send2081);
ASSERT_EMPTY_STACK
Object string144 = (Object)new_Type_String(L"String");
result = Eval_Send1(result, SMB__equal, string144);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmStringEquals)
/*
tmStringEquals
	^ 'String' = 'String'
*/
Object symbol24 = (Object)new_Type_Symbol_cached(L"tmStringEquals");
Object send2082 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol24, 0);
Object result = (Object)Eval((Object)send2082);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbol)
/*
tmSymbol
	^ #Symbol
*/
Object symbol38 = (Object)new_Type_Symbol_cached(L"tmSymbol");
Object send2083 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol38, 0);
Object result = (Object)Eval((Object)send2083);
ASSERT_EMPTY_STACK
Object symbol51 = (Object)new_Type_Symbol_cached(L"Symbol");
result = Eval_Send1(result, SMB__equal, symbol51);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbolEquals)
/*
tmSymbolEquals
	^ #Symbol = #Symbol
*/
Object symbol13 = (Object)new_Type_Symbol_cached(L"tmSymbolEquals");
Object send2084 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol13, 0);
Object result = (Object)Eval((Object)send2084);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmFibonacci)
/*
tmFibonacci
	
*/
Object symbol16 = (Object)new_Type_Symbol_cached(L"tmFibonacci");
Object send2085 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol16, 0);
Object result = (Object)Eval((Object)send2085);
ASSERT_EMPTY_STACK
assert0(result == test_Class_Instance);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleInstanceCreation)
/*
tmSimpleInstanceCreation
	| instance |
	instance := StandardTestClass basicNew.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	^ instance a + instance b  + instance c
	
*/
Object symbol28 = (Object)new_Type_Symbol_cached(L"tmSimpleInstanceCreation");
Object send2086 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol28, 0);
Object result = (Object)Eval((Object)send2086);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmVariableInstanceCreation)
/*
tmVariableInstanceCreation
	| instance |
	instance := StandardVariableTestClass basicNew.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	^ instance a + instance b  + instance c
	
*/
Object symbol21 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreation");
Object send2087 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol21, 0);
Object result = (Object)Eval((Object)send2087);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmVariableInstanceCreationSized)
/*
tmVariableInstanceCreationSized
	| instance |
	instance := StandardVariableTestClass basicNew: 100.
	instance at: 1 put: 1.
	instance at: 100 put: 100.
	self assert: (instance at: 1) = 1.
	
	self assert: (instance at: 100) = 100.
	instance a: 1; b: 2; c: 3.
	self assert: instance a = 1.
	self assert: instance b = 2.
	self assert: instance c = 3.
	
	^ instance a + instance b + instance c + (instance at: 1) + (instance at: 100)
	
*/
Object symbol32 = (Object)new_Type_Symbol_cached(L"tmVariableInstanceCreationSized");
Object send2088 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol32, 0);
Object result = (Object)Eval((Object)send2088);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 107);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

TEST_SUITE(AutoGenTest,
{
    create_ast();
    Test_Class = (Type_Class)class90;
    test_Class_Instance = (Object)new_AST_Constant((Object)instantiate((Type_Class)Test_Class));

    RUN_TEST(AutoGenTest_tmSimpleReturn);
    RUN_TEST(AutoGenTest_tmNumberMult);
    RUN_TEST(AutoGenTest_tmSymbol);
    RUN_TEST(AutoGenTest_tmNumber);
    RUN_TEST(AutoGenTest_tmBooleanFalse);
    RUN_TEST(AutoGenTest_tmString);
    RUN_TEST(AutoGenTest_tmLocalVariable);
    RUN_TEST(AutoGenTest_tmSimpleInstanceCreation);
    RUN_TEST(AutoGenTest_tmMethodArgument_);
    RUN_TEST(AutoGenTest_tmNumberEquals);
    RUN_TEST(AutoGenTest_tmClassReferenceReturn);
    RUN_TEST(AutoGenTest_tmCharacterEquals);
    RUN_TEST(AutoGenTest_tmCharacter);
    RUN_TEST(AutoGenTest_tmVariableInstanceCreation);
    RUN_TEST(AutoGenTest_tmBooleanTrue);
    RUN_TEST(AutoGenTest_tmNumberSubtract);
    RUN_TEST(AutoGenTest_tmNumberAdd);
    RUN_TEST(AutoGenTest_tmBooleanEquals);
    RUN_TEST(AutoGenTest_tmMethodArguments_with_with_);
    RUN_TEST(AutoGenTest_tmSimpleBasicArithmetik);
    RUN_TEST(AutoGenTest_tmStringEquals);
    RUN_TEST(AutoGenTest_tmSymbolEquals);
    RUN_TEST(AutoGenTest_tmNumberDiv);
    RUN_TEST(AutoGenTest_tmFibonacci);
    RUN_TEST(AutoGenTest_tmVariableInstanceCreationSized);
    RUN_TEST(AutoGenTest_tmExtendedReturn);
})
