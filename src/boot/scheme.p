
(letrec ((car (lambda (cons) (cons 'car)))
         (set-car! (lambda (cons value) (cons 'car: value)))
         (cdr (lambda (cons) (cons 'cdr)))
         (set-cdr! (lambda (cons value) (cons 'cdr: value)))
         (Cons (newclass Cons Object (car cdr) ()
                ((car (s) ((getself s) 'objectAt: 0))
                 (car: (s new) ((getself s) 'objectAt:put: 0 new))
                 (cdr (s) ((getself s) 'objectAt: 1))
                 (cdr: (s new) ((getself s) 'objectAt:put: 1 new)))
                ()))
         (cons (lambda (l r)
            (let ((result (Cons 'new)))
                (result 'car: l)
                (result 'cdr: r)
                result)))
         (reverse (lambda (l)
            (let loop ((input l)
                       (result null))
                (if (eq? input null)
                    result
                    (loop (cdr input)
                          (cons (car input) result))))))
         (length (lambda (l)
            (let loop ((input l)
                       (result 0))
                (if (eq? input null)
                    result
                    (loop (cdr input) (+ result 1))))))
         (append (lambda (l r)
            (if (eq? l null)
                r
                (if (eq? (cdr l) null)
                    (set-cdr! l r)
                    (append (cdr l) r)))))
        (list->string (lambda (list)
            (let ((result (String 'basicNew: (length list))))
                (let loop ((todo list)
                           (idx 0))
                    (if (eq? todo null)
                        result
                        (begin
                            (result 'objectAt:put: idx (car todo))
                            (loop (cdr todo) (+ idx 1)))))))))
    (load "boot/peg.p")  
)
