#include <signal.h>
#include <setjmp.h>

#define SIGFAIL SIGABRT
extern jmp_buf Assert_Fail;

#define NYI assert1(NULL, "NYI");

#define ERROR_HANDLER handle_error

#ifdef __linux
    #include <stdio_ext.h>
    #define FLUSH_STDOUT __fpurge(stdout);
#endif
#ifdef __APPLE__
    #define FLUSH_STDOUT fpurge(stdout);
#endif


#define assert(test, message) \
if (!(test)) {\
    printf ("%s:%u: failed assertion `%s'\n", __FILE__, __LINE__, #test); \
    message; \
    FLUSH_STDOUT; \
    ERROR_HANDLER("Assertion failed: "#test);\
}

#define assert0(test)\
if (!(test)) {\
    printf ("%s:%u: failed assertion `%s'\n", __FILE__, __LINE__, #test); \
    FLUSH_STDOUT; \
    ERROR_HANDLER("Assertion failed: "#test);\
}

#define assert1(test, message)  \
if (!(test)) { \
    printf ("%s:%u: failed assertion `%s'\n", __FILE__, __LINE__, #test); \
    printf(message); \
    FLUSH_STDOUT; \
    ERROR_HANDLER(message);\
}

/* ========================================================================== */

extern void store_method(Type_Class class, Type_Symbol symbol, Runtime_MethodClosure method);
extern bool isInstance(Object object, Object class);
