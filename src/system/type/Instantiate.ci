Object instantiate_Array(Class class, Array ivars, uns_int extra)
{
    uns_int base = ivars->size;
    Array result = NEW_ARRAYED(struct Array_t, Object[base+extra]);
    result->size = extra;
    uns_int i;

    for (i = base; i < base+extra; i++) {
        result->values[i] = nil;
    }

    for (i = 0; i < base; i++) {
        result->values[i] = nil;
    }

    HEADER(result) = class;
    assert0(HEADER(result) != (Class)nil);
    return (Object)result;
}

Object instantiate_Bytes(Class class, Array ivars, uns_int extra)
{
    assert1(NULL, "Bytes are not supported yet.\n");
    return NULL;
}

Object instantiate_Words(Class class, Array ivars, uns_int extra)
{
    Symbol result = NEW_ARRAYED(struct Symbol_t, wchar_t[extra]);
    HEADER(result) = class;
    assert0(HEADER(result) != (Class)nil);
    return (Object)result;
}

Object basic_instantiate_Object(Class class, uns_int size)
{
    Type_Object result = NEW_ARRAYED(struct Type_Object_t, Object[size]);
    uns_int i;
    for (i = 0; i < size; i++) {
        result->ivals[i] = nil;
    }
    HEADER(result) = class;
    assert0(HEADER(result) != (Class)nil);
    return (Object)result;
}

static Object instantiate_Object(Class class, Array ivars)
{
    uns_int size = ivars->size;
    Type_Object result = NEW_ARRAYED(struct Type_Object_t, Object[size]);
    uns_int i;
    for (i = 0; i < size; i++) {
        result->ivals[i] = nil;
    }
    HEADER(result) = class;
    assert0(HEADER(result) != (Class)nil);
    return (Object)result;
}

/* ========================================================================= */

#define INSTANTIATE(layout)\
    if (HEADER(tag) == layout##Layout##_Class) {\
        return instantiate##_##layout(class, (Array)tag);\
    }

#define INSTANTIATE_SIZED(layout)\
    if (HEADER(tag) == layout##Layout##_Class) {\
        return instantiate##_##layout(class, (Array)tag, size);\
    }

/* ========================================================================= */


Object instantiate(Class class)
{
    Object tag = class->layout;

    INSTANTIATE(Object);
    uns_int size = 0;
    INSTANTIATE_SIZED(Array);

    assert(NULL, printf("Not a fixed-sized object layout: %p\n", tag));
    return NULL;
}

Object instantiate_sized(Class class, uns_int size)
{
    Object tag = class->layout;

    INSTANTIATE_SIZED(Array);
    INSTANTIATE_SIZED(Bytes);
    // TODO add to String and Symbols
    INSTANTIATE_SIZED(Words);

    assert(NULL, printf("Not a arrayed object layout: %p\n", tag));
    return NULL;
}
