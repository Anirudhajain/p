// SMB__concat                    = new_Type_Symbol_cached(L"concat:");
SMB__and                       = new_Type_Symbol_cached(L"&");
SMB__concat                    = new_Type_Symbol_cached(L",");
SMB__divide                    = new_Type_Symbol_cached(L"//");
SMB__equal                     = new_Type_Symbol_cached(L"=");
SMB__gt                        = new_Type_Symbol_cached(L">");
SMB__lt                        = new_Type_Symbol_cached(L"<");
SMB__minus                     = new_Type_Symbol_cached(L"-");
SMB__modulo                    = new_Type_Symbol_cached(L"\\\\");
SMB__notEqual                  = new_Type_Symbol_cached(L"!=");
SMB__or                        = new_Type_Symbol_cached(L"|");
SMB__pequal                    = new_Type_Symbol_cached(L"==");
SMB__plus                      = new_Type_Symbol_cached(L"+");
SMB__shiftLeft                 = new_Type_Symbol_cached(L"<<");
SMB__shiftRight                = new_Type_Symbol_cached(L">>");
SMB__times                     = new_Type_Symbol_cached(L"*");
SMB_apply                      = new_Type_Symbol_cached(L"apply");
SMB_apply_                     = new_Type_Symbol_cached(L"apply:");
SMB_asArray                    = new_Type_Symbol_cached(L"asArray");
SMB_asBoolean                  = new_Type_Symbol_cached(L"asBoolean");
SMB_asCharacter                = new_Type_Symbol_cached(L"asCharacter");
SMB_asNumber                   = new_Type_Symbol_cached(L"asNumber");
SMB_asSmallInt                 = new_Type_Symbol_cached(L"asSmallInt");
SMB_asString                   = new_Type_Symbol_cached(L"asString");
SMB_asSymbol                   = new_Type_Symbol_cached(L"asSymbol");
SMB_atEnd                      = new_Type_Symbol_cached(L"atEnd");
SMB_at_                        = new_Type_Symbol_cached(L"at:");
SMB_at_ifAbsent_               = new_Type_Symbol_cached(L"at:ifAbsent:");
SMB_at_in_                     = new_Type_Symbol_cached(L"at:in:");
SMB_at_put_                    = new_Type_Symbol_cached(L"at:put:");
SMB_basicNew                   = new_Type_Symbol_cached(L"basicNew");
SMB_basicNew_                  = new_Type_Symbol_cached(L"basicNew:");
SMB_class                      = new_Type_Symbol_cached(L"class");
SMB_close                      = new_Type_Symbol_cached(L"close");
SMB_cr                         = new_Type_Symbol_cached(L"cr");
SMB_delete_                    = new_Type_Symbol_cached(L"delete:");
SMB_doesNotUnderstand_         = new_Type_Symbol_cached(L"doesNotUnderstand:");
SMB_ensureClassReferenceFor_   = new_Type_Symbol_cached(L"ensureClassReferenceFor:");
SMB_ensurePackageNamed_        = new_Type_Symbol_cached(L"ensurePackageNamed:");
SMB_escape_                    = new_Type_Symbol_cached(L"escape:");
SMB_eval                       = new_Type_Symbol_cached(L"eval");
SMB_eval_                      = new_Type_Symbol_cached(L"eval:");
SMB_get_                       = new_Type_Symbol_cached(L"get:");
SMB_hash                       = new_Type_Symbol_cached(L"hash");
SMB_ifFalse_                   = new_Type_Symbol_cached(L"ifFalse:");
SMB_ifFalse_else_              = new_Type_Symbol_cached(L"ifFalse:else:");
SMB_ifNil_                     = new_Type_Symbol_cached(L"ifNil:");
SMB_ifTrue_                    = new_Type_Symbol_cached(L"ifTrue:");
SMB_ifTrue_else_               = new_Type_Symbol_cached(L"ifTrue:else:");
SMB_ifTrue_ifFalse_            = new_Type_Symbol_cached(L"ifTrue:ifFalse:");
SMB_initialize                 = new_Type_Symbol_cached(L"initialize");
SMB_instVarAt_                 = new_Type_Symbol_cached(L"instVarAt:");
SMB_instVarAt_put_             = new_Type_Symbol_cached(L"instVarAt:put:");
SMB_isNil                      = new_Type_Symbol_cached(L"isNil");
SMB_isNotNil                   = new_Type_Symbol_cached(L"isNotNil");
SMB_lf                         = new_Type_Symbol_cached(L"lf");
SMB_lookup_                    = new_Type_Symbol_cached(L"lookup:");
SMB_main_                      = new_Type_Symbol_cached(L"main:");
SMB_name                       = new_Type_Symbol_cached(L"name");
SMB_named_in_                  = new_Type_Symbol_cached(L"named:in:");
SMB_new                        = new_Type_Symbol_cached(L"new");
SMB_not                        = new_Type_Symbol_cached(L"not");
SMB_numArgs                    = new_Type_Symbol_cached(L"numArgs");
SMB_on_                        = new_Type_Symbol_cached(L"on:");
SMB_open_                      = new_Type_Symbol_cached(L"open:");
SMB_package_                   = new_Type_Symbol_cached(L"package:");
SMB_perform_                   = new_Type_Symbol_cached(L"perform:");
SMB_perform_withArguments_     = new_Type_Symbol_cached(L"perform:withArguments:");
SMB_pinocchioPrimitive_module_ = new_Type_Symbol_cached(L"pinocchioPrimitive:module:");
SMB_read                       = new_Type_Symbol_cached(L"read");
SMB_readAll                    = new_Type_Symbol_cached(L"readAll");
SMB_readLine                   = new_Type_Symbol_cached(L"readLine");
SMB_remove_                    = new_Type_Symbol_cached(L"remove:");
SMB_rewind                     = new_Type_Symbol_cached(L"rewind");
SMB_set                        = new_Type_Symbol_cached(L"set");
SMB_size                       = new_Type_Symbol_cached(L"size");
SMB_stderr                     = new_Type_Symbol_cached(L"stderr");
SMB_stdin                      = new_Type_Symbol_cached(L"stdin");
SMB_stdout                     = new_Type_Symbol_cached(L"stdout");
SMB_update                     = new_Type_Symbol_cached(L"update");
SMB_value                      = new_Type_Symbol_cached(L"value");
SMB_valueWithArguments_        = new_Type_Symbol_cached(L"valueWithArguments:");
SMB_value_                     = new_Type_Symbol_cached(L"value:");
SMB_value_value_               = new_Type_Symbol_cached(L"value:value:");
SMB_value_value_value_         = new_Type_Symbol_cached(L"value:value:value:");
SMB_value_value_value_value_   = new_Type_Symbol_cached(L"value:value:value:value:");
SMB_whileFalse_                = new_Type_Symbol_cached(L"whileFalse:");
SMB_whileNil_                  = new_Type_Symbol_cached(L"whileNil:");
SMB_whileTrue_                 = new_Type_Symbol_cached(L"whileTrue:");
SMB_writeAll_                  = new_Type_Symbol_cached(L"writeAll:");
SMB_write_                     = new_Type_Symbol_cached(L"write:");
