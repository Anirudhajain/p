// SMB__concat                                 = new_Symbol_cached(L"concat:");
SMB_Reflection_Reflection                   = new_Symbol_cached(L"Reflection.Reflection");
SMB__and                                    = new_Symbol_cached(L"&");
SMB__concat                                 = new_Symbol_cached(L",");
SMB__divide                                 = new_Symbol_cached(L"//");
SMB__equal                                  = new_Symbol_cached(L"=");
SMB__gt                                     = new_Symbol_cached(L">");
SMB__lt                                     = new_Symbol_cached(L"<");
SMB__minus                                  = new_Symbol_cached(L"-");
SMB__modulo                                 = new_Symbol_cached(L"\\\\");
SMB__notEqual                               = new_Symbol_cached(L"~=");
SMB__or                                     = new_Symbol_cached(L"|");
SMB__pequal                                 = new_Symbol_cached(L"==");
SMB__plus                                   = new_Symbol_cached(L"+");
SMB__shiftLeft                              = new_Symbol_cached(L"<<");
SMB__shiftRight                             = new_Symbol_cached(L">>");
SMB__times                                  = new_Symbol_cached(L"*");
SMB_accept_                                 = new_Symbol_cached(L"accept:");
SMB_apply                                   = new_Symbol_cached(L"apply");
SMB_applyBlock_to_                          = new_Symbol_cached(L"applyBlock:to:");
SMB_apply_                                  = new_Symbol_cached(L"apply:");
SMB_asArray                                 = new_Symbol_cached(L"asArray");
SMB_asBoolean                               = new_Symbol_cached(L"asBoolean");
SMB_asCharacter                             = new_Symbol_cached(L"asCharacter");
SMB_asNumber                                = new_Symbol_cached(L"asNumber");
SMB_asSmallInt                              = new_Symbol_cached(L"asSmallInt");
SMB_asString                                = new_Symbol_cached(L"asString");
SMB_asSymbol                                = new_Symbol_cached(L"asSymbol");
SMB_assignFor_to_                           = new_Symbol_cached(L"assignFor:to:");
SMB_assign_on_                              = new_Symbol_cached(L"assign:on:");
SMB_atEnd                                   = new_Symbol_cached(L"atEnd");
SMB_at_                                     = new_Symbol_cached(L"at:");
SMB_at_ifAbsent_                            = new_Symbol_cached(L"at:ifAbsent:");
SMB_at_in_                                  = new_Symbol_cached(L"at:in:");
SMB_at_put_                                 = new_Symbol_cached(L"at:put:");
SMB_basicNew                                = new_Symbol_cached(L"basicNew");
SMB_basicNew_                               = new_Symbol_cached(L"basicNew:");
SMB_blockclosureValueWithArguments_message_ = new_Symbol_cached(L"blockclosureValueWithArguments:message:");
SMB_blockclosureValue_message_              = new_Symbol_cached(L"blockclosureValue:message:");
SMB_cache_at_                               = new_Symbol_cached(L"cache:at:");
SMB_checkCached_                            = new_Symbol_cached(L"checkCached:");
SMB_class                                   = new_Symbol_cached(L"class");
SMB_close                                   = new_Symbol_cached(L"close");
SMB_continuationContinue_message_           = new_Symbol_cached(L"continuationContinue:message:");
SMB_continuationOn_message_                 = new_Symbol_cached(L"continuationOn:message:");
SMB_continueEscape_message_                 = new_Symbol_cached(L"continueEscape:message:");
SMB_continueOn_                             = new_Symbol_cached(L"continueOn:");
SMB_continueOn_message_                     = new_Symbol_cached(L"continueOn:message:");
SMB_continue_escape_                        = new_Symbol_cached(L"continue:escape:");
SMB_cr                                      = new_Symbol_cached(L"cr");
SMB_delete_                                 = new_Symbol_cached(L"delete:");
SMB_doesNotUnderstand_                      = new_Symbol_cached(L"doesNotUnderstand:");
SMB_ensureClassReferenceFor_                = new_Symbol_cached(L"ensureClassReferenceFor:");
SMB_ensurePackageNamed_                     = new_Symbol_cached(L"ensurePackageNamed:");
SMB_errorHandler                            = new_Symbol_cached(L"errorHandler");
SMB_errorHandler_                           = new_Symbol_cached(L"errorHandler:");
SMB_escape_                                 = new_Symbol_cached(L"escape:");
SMB_flush                                   = new_Symbol_cached(L"flush");
SMB_get_                                    = new_Symbol_cached(L"get:");
SMB_grow                                    = new_Symbol_cached(L"grow");
SMB_hasPlugin_                              = new_Symbol_cached(L"hasPlugin:");
SMB_hash                                    = new_Symbol_cached(L"hash");
SMB_ifFalse_                                = new_Symbol_cached(L"ifFalse:");
SMB_ifFalse_else_                           = new_Symbol_cached(L"ifFalse:else:");
SMB_ifNil_                                  = new_Symbol_cached(L"ifNil:");
SMB_ifTrue_                                 = new_Symbol_cached(L"ifTrue:");
SMB_ifTrue_else_                            = new_Symbol_cached(L"ifTrue:else:");
SMB_ifTrue_ifFalse_                         = new_Symbol_cached(L"ifTrue:ifFalse:");
SMB_immediate                               = new_Symbol_cached(L"immediate");
SMB_initialize                              = new_Symbol_cached(L"initialize");
SMB_instVarAt_                              = new_Symbol_cached(L"instVarAt:");
SMB_instVarAt_from_                         = new_Symbol_cached(L"instVarAt:from:");
SMB_instVarAt_put_                          = new_Symbol_cached(L"instVarAt:put:");
SMB_instVarAt_put_on_                       = new_Symbol_cached(L"instVarAt:put:on:");
SMB_invokeNativeMethod_on_message_          = new_Symbol_cached(L"invokeNativeMethod:on:message:");
SMB_isNil                                   = new_Symbol_cached(L"isNil");
SMB_isNotNil                                = new_Symbol_cached(L"isNotNil");
SMB_lf                                      = new_Symbol_cached(L"lf");
SMB_load_                                   = new_Symbol_cached(L"load:");
SMB_lookup_                                 = new_Symbol_cached(L"lookup:");
SMB_main_                                   = new_Symbol_cached(L"main:");
SMB_name                                    = new_Symbol_cached(L"name");
SMB_named_in_                               = new_Symbol_cached(L"named:in:");
SMB_new                                     = new_Symbol_cached(L"new");
SMB_not                                     = new_Symbol_cached(L"not");
SMB_numArgs                                 = new_Symbol_cached(L"numArgs");
SMB_on_                                     = new_Symbol_cached(L"on:");
SMB_open_                                   = new_Symbol_cached(L"open:");
SMB_pPrimitive_plugin_                      = new_Symbol_cached(L"pPrimitive:plugin:");
SMB_package_                                = new_Symbol_cached(L"package:");
SMB_perform_                                = new_Symbol_cached(L"perform:");
SMB_perform_withArguments_                  = new_Symbol_cached(L"perform:withArguments:");
SMB_pinocchioPrimitive_module_              = new_Symbol_cached(L"pinocchioPrimitive:module:");
SMB_pinocchioReflective_                    = new_Symbol_cached(L"pinocchioReflective:");
SMB_read                                    = new_Symbol_cached(L"read");
SMB_readAll                                 = new_Symbol_cached(L"readAll");
SMB_readFrom_                               = new_Symbol_cached(L"readFrom:");
SMB_readLine                                = new_Symbol_cached(L"readLine");
SMB_readOpen_                               = new_Symbol_cached(L"readOpen:");
SMB_remove_                                 = new_Symbol_cached(L"remove:");
SMB_rewind                                  = new_Symbol_cached(L"rewind");
SMB_send_to_                                = new_Symbol_cached(L"send:to:");
SMB_send_to_class_inInterpreterChain_       = new_Symbol_cached(L"send:to:class:inInterpreterChain:");
SMB_send_to_inInterpreterChain_             = new_Symbol_cached(L"send:to:inInterpreterChain:");
SMB_set                                     = new_Symbol_cached(L"set");
SMB_size                                    = new_Symbol_cached(L"size");
SMB_stderr                                  = new_Symbol_cached(L"stderr");
SMB_stdin                                   = new_Symbol_cached(L"stdin");
SMB_stdout                                  = new_Symbol_cached(L"stdout");
SMB_unload                                  = new_Symbol_cached(L"unload");
SMB_unloadPlugin_                           = new_Symbol_cached(L"unloadPlugin:");
SMB_unload_                                 = new_Symbol_cached(L"unload:");
SMB_update                                  = new_Symbol_cached(L"update");
SMB_value                                   = new_Symbol_cached(L"value");
SMB_valueWithArguments_                     = new_Symbol_cached(L"valueWithArguments:");
SMB_value_                                  = new_Symbol_cached(L"value:");
SMB_value_value_                            = new_Symbol_cached(L"value:value:");
SMB_value_value_value_                      = new_Symbol_cached(L"value:value:value:");
SMB_value_value_value_value_                = new_Symbol_cached(L"value:value:value:value:");
SMB_whileFalse_                             = new_Symbol_cached(L"whileFalse:");
SMB_whileNil_                               = new_Symbol_cached(L"whileNil:");
SMB_whileTrue_                              = new_Symbol_cached(L"whileTrue:");
SMB_writeAll_                               = new_Symbol_cached(L"writeAll:");
SMB_writeOpen_                              = new_Symbol_cached(L"writeOpen:");
SMB_write_                                  = new_Symbol_cached(L"write:");
SMB_yield                                   = new_Symbol_cached(L"yield");
