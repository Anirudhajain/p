
NEW_TEST(Type_Class_instanceOf)
    Number_SmallInt int1 = new_Number_SmallInt(1);
    assert0(isInstance((Object)int1, (Object)Number_SmallInt_Class));
    
    assert0(isInstance((Object)False, (Object)False_Class));
    assert0(isInstance((Object)False, (Object)Type_Boolean_Class));
}

NEW_TEST(Class_Hierarchy)

    assert0(HEADER(HEADER(Metaclass)) == Metaclass);
    assert0(HEADER(HEADER(Type_Object_Class)) == Metaclass);
    assert0(Behavior->super == Type_Object_Class);
    assert0(HEADER(Behavior)->super == HEADER(Type_Object_Class));
    assert0(Class->super == Behavior);
    assert0(HEADER(Class)->super == HEADER(Behavior));
    assert0(Metaclass->super == Behavior);
    assert0(HEADER(Metaclass)->super == HEADER(Behavior));
    assert0(HEADER(Type_Object_Class)->super == Class);
    assert0(HEADER(HEADER(Behavior)) == Metaclass);
    assert0(HEADER(HEADER(Class)) == Metaclass);
    
    assert0(Type_Symbol_Class->super == Type_Object_Class);
    assert0(HEADER(Type_Symbol_Class)->super == HEADER(Type_Object_Class));
}

/*
NEW_TEST(Class_dnu)
    Number_SmallInt int1 = new_Number_SmallInt(1);
    store_method(
    Type_Class_direct_dispatch(int1, HEADER(int1), SMB_bla, 0);
}
*/


/* ========================================================================= */

TEST_SUITE(Type_Class,
{
    RUN_TEST(Type_Class_instanceOf)
    RUN_TEST(Class_Hierarchy)
})
