
NEW_TEST(Type_Class_instanceOf)
    Type_SmallInt int1 = new_Type_SmallInt(1);
    assert0(isInstance((Object)int1, (Object)Type_SmallInt_Class));
    
    assert0(isInstance((Object)False, (Object)False_Class));
    assert0(isInstance((Object)False, (Object)Type_Boolean_Class));
}

NEW_TEST(Class_Hierarchy)

    assert0(HEADER(HEADER(Metaclass)) == (Object)Metaclass);
    assert0(HEADER(HEADER(Type_Object_Class)) == (Object)Metaclass);
    assert0(((Type_Class)Behavior)->super ==(Object) Type_Object_Class);
    assert0(((Type_Class)HEADER(Behavior))->super == HEADER(Type_Object_Class));
    assert0(((Type_Class)Class)->super == (Object)Behavior);
    assert0(((Type_Class)HEADER(Class))->super == HEADER(Behavior));
    assert0(((Type_Class)Metaclass)->super == (Object)Behavior);
    assert0(((Type_Class)HEADER(Metaclass))->super == HEADER(Behavior));
    assert0(((Type_Class)HEADER(Type_Object_Class))->super == (Object)Class);
    assert0(HEADER(HEADER(Behavior)) == (Object)Metaclass);
    assert0(HEADER(HEADER(Class)) == (Object)Metaclass);
    
    assert0(((Type_Class)Type_Symbol_Class)->super == (Object)Type_Object_Class);
    assert0(((Type_Class)HEADER(Type_Symbol_Class))->super == HEADER(Type_Object_Class));
}

/*
NEW_TEST(Class_dnu)
    Type_SmallInt int1 = new_Type_SmallInt(1);
    store_method(
    Type_Class_direct_dispatch(int1, HEADER(int1), SMB_bla, 0);
}
*/


/* ========================================================================= */

TEST_SUITE(Type_Class,
{
    RUN_TEST(Type_Class_instanceOf)
    RUN_TEST(Class_Hierarchy)
})
