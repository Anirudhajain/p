
#define RUNTIME_METHODCLOSURE_TEST_SETUP \
    Runtime_MethodClosure methodclosure = new_Runtime_MethodClosure(); \
    Object result;

/* ========================================================================= */

METHOD(Runtime_MethodClosure_MACRO_method,0,0,1)
    ADD_STATEMENT(Self);
    return method;
}

NEW_TEST(Runtime_MethodClosure_MACRO)
    Runtime_MethodClosure closure = Runtime_MethodClosure_MACRO_method();
    assert0(closure->code->size == 1);
    assert0(closure->code->body[0] == Self);
    printf("%ls", closure->info->name->value);
    assert(wcscmp(closure->info->name->value, L"Runtime_MethodClosure_MACRO_method")==0, 
        printf("%ls", closure->info->name->value));
}

NEW_TEST(Runtime_MethodClosure_invocation_with_arguments)
    Runtime_MethodClosure closure =
new_Runtime_MethodClosure(new_AST_Method(1, 0, 1), (Type_Class)Nil);
    closure->code->body[0] = (Object)BLOCK_PARAM(closure->code, 0);
    
    Type_Symbol test           = new_Type_Symbol(L"test");
    Number_SmallInt integer      = new_Number_SmallInt(120);
    store_method(Number_SmallInt_Class, test, closure);
    Object result     = Eval_Send1((Object)integer, test, (Object)integer);
    assert0(result == (Object)integer);
    ASSERT_EMPTY_STACK;
}


NEW_TEST(Runtime_MethodClosure_invocation)
    Runtime_MethodClosure closure =
new_Runtime_MethodClosure(new_AST_Method(0, 0, 0), (Type_Class)Nil);
    Type_Symbol test        = new_Type_Symbol(L"test");
    Number_SmallInt integer   = new_Number_SmallInt(120);
    store_method(Number_SmallInt_Class, test, closure);
    Object result           = Eval_Send0((Object)integer, test);
    assert0(result == (Object)integer);
    ASSERT_EMPTY_STACK;

    // with 1 body element
    Number_SmallInt integer5      = new_Number_SmallInt(5);
    AST_Constant integer5_const = new_AST_Constant((Object)integer5);
    closure                     =
new_Runtime_MethodClosure(new_AST_Method_withAll(0, 0, 1, integer5_const),
(Type_Class)Nil);
    store_method(Number_SmallInt_Class, test, closure);
    result                      = Eval_Send0((Object)integer, test);
    assert0(result == (Object)integer5);
    ASSERT_EMPTY_STACK;
    
    // with 2 body element
    Number_SmallInt integer6      = new_Number_SmallInt(6);
    AST_Constant integer6_const = new_AST_Constant((Object)integer6);
    closure                     =
new_Runtime_MethodClosure(new_AST_Method_withAll(0, 0, 2, integer5_const,
integer6_const), (Type_Class)Nil);
    store_method(Number_SmallInt_Class, test, closure);
    result                      = Eval_Send0((Object)integer, test);
    assert0(result == (Object)integer6);
    ASSERT_EMPTY_STACK;
    
    // with 3 body element
    Number_SmallInt integer7      = new_Number_SmallInt(7);
    AST_Constant integer7_const = new_AST_Constant((Object)integer7);
    closure                     =
new_Runtime_MethodClosure(new_AST_Method_withAll(0, 0, 3, integer5_const,
integer6_const, integer7_const), (Type_Class)Nil);
    store_method(Number_SmallInt_Class, test, closure);
    result                      = Eval_Send0((Object)integer, test);
    assert0(result == (Object)integer7);
    ASSERT_EMPTY_STACK;
}


/* ========================================================================= */

TEST_SUITE(Runtime_MethodClosure,
{
    RUN_TEST(Runtime_MethodClosure_MACRO);
    RUN_TEST(Runtime_MethodClosure_invocation_with_arguments);
    RUN_TEST(Runtime_MethodClosure_invocation);
})

