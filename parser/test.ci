// Auto generated Tests from PinocchioCDumperTest

// Test Object to put test methods in
Type_Class Test_Class;
Object test_Class_Instance;
// Test Method symbol
Type_Symbol SMB_runTestCase;


/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanEquals)
/*
tmBooleanEquals
	^ true = true
*/
Object send362 = (Object)new_AST_Send((Object)True_Const, (Object)SMB__equal, 1, True_Const);
Object symbol17 = (Object)new_Type_Symbol_cached(L"tmBooleanEquals");

// nil>>tmBooleanEquals
Object method156 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send362);
Object methodclosure76 = (Object)new_Runtime_MethodClosure(method156);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol17, (Runtime_MethodClosure)methodclosure76);

Object send363 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol17, 0);
Object result = (Object)Eval((Object)send363);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanFalse)
/*
tmBooleanFalse
	^ false
*/
Object symbol18 = (Object)new_Type_Symbol_cached(L"tmBooleanFalse");

// nil>>tmBooleanFalse
Object method157 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, False_Const);
Object methodclosure77 = (Object)new_Runtime_MethodClosure(method157);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol18, (Runtime_MethodClosure)methodclosure77);

Object send364 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol18, 0);
Object result = (Object)Eval((Object)send364);
ASSERT_EMPTY_STACK
assert0(result == (Object)False);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmBooleanTrue)
/*
tmBooleanTrue
	^ true
*/
Object symbol19 = (Object)new_Type_Symbol_cached(L"tmBooleanTrue");

// nil>>tmBooleanTrue
Object method158 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, True_Const);
Object methodclosure78 = (Object)new_Runtime_MethodClosure(method158);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol19, (Runtime_MethodClosure)methodclosure78);

Object send365 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol19, 0);
Object result = (Object)Eval((Object)send365);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacter)
/*
tmCharacter
	^ $C
*/
Object character238 = (Object)new_Type_Character(L'C');
Object constant922 = (Object)new_AST_Constant(character238);
Object symbol20 = (Object)new_Type_Symbol_cached(L"tmCharacter");

// nil>>tmCharacter
Object method159 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant922);
Object methodclosure79 = (Object)new_Runtime_MethodClosure(method159);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol20, (Runtime_MethodClosure)methodclosure79);

Object send366 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol20, 0);
Object result = (Object)Eval((Object)send366);
ASSERT_EMPTY_STACK
assert0(((Type_Character)result)->value == 'C');
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmCharacterEquals)
/*
tmCharacterEquals
	^ $C = $C
*/
Object character239 = (Object)new_Type_Character(L'C');
Object constant923 = (Object)new_AST_Constant(character239);
Object character240 = (Object)new_Type_Character(L'C');
Object constant924 = (Object)new_AST_Constant(character240);
Object send367 = (Object)new_AST_Send((Object)constant923, (Object)SMB__equal, 1, constant924);
Object symbol21 = (Object)new_Type_Symbol_cached(L"tmCharacterEquals");

// nil>>tmCharacterEquals
Object method160 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send367);
Object methodclosure80 = (Object)new_Runtime_MethodClosure(method160);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol21, (Runtime_MethodClosure)methodclosure80);

Object send368 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol21, 0);
Object result = (Object)Eval((Object)send368);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumber)
/*
tmNumber
	^ 1
*/
Object smallint359 = (Object)new_Type_SmallInt(1);
Object constant925 = (Object)new_AST_Constant(smallint359);
Object symbol22 = (Object)new_Type_Symbol_cached(L"tmNumber");

// nil>>tmNumber
Object method161 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant925);
Object methodclosure81 = (Object)new_Runtime_MethodClosure(method161);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol22, (Runtime_MethodClosure)methodclosure81);

Object send369 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol22, 0);
Object result = (Object)Eval((Object)send369);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberAdd)
/*
tmNumberAdd
	^ 1 + 1
*/
Object smallint360 = (Object)new_Type_SmallInt(1);
Object constant926 = (Object)new_AST_Constant(smallint360);
Object smallint361 = (Object)new_Type_SmallInt(1);
Object constant927 = (Object)new_AST_Constant(smallint361);
Object send370 = (Object)new_AST_Send((Object)constant926, (Object)SMB__plus, 1, constant927);
Object symbol23 = (Object)new_Type_Symbol_cached(L"tmNumberAdd");

// nil>>tmNumberAdd
Object method162 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send370);
Object methodclosure82 = (Object)new_Runtime_MethodClosure(method162);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol23, (Runtime_MethodClosure)methodclosure82);

Object send371 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol23, 0);
Object result = (Object)Eval((Object)send371);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberDiv)
/*
tmNumberDiv
	^ 4 / 2
*/
Object smallint362 = (Object)new_Type_SmallInt(4);
Object constant928 = (Object)new_AST_Constant(smallint362);
Object smallint363 = (Object)new_Type_SmallInt(2);
Object constant929 = (Object)new_AST_Constant(smallint363);
Object send372 = (Object)new_AST_Send((Object)constant928, (Object)SMB__divide, 1, constant929);
Object symbol24 = (Object)new_Type_Symbol_cached(L"tmNumberDiv");

// nil>>tmNumberDiv
Object method163 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send372);
Object methodclosure83 = (Object)new_Runtime_MethodClosure(method163);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol24, (Runtime_MethodClosure)methodclosure83);

Object send373 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol24, 0);
Object result = (Object)Eval((Object)send373);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberEquals)
/*
tmNumberEquals
	^ 1 = 1
*/
Object smallint364 = (Object)new_Type_SmallInt(1);
Object constant930 = (Object)new_AST_Constant(smallint364);
Object smallint365 = (Object)new_Type_SmallInt(1);
Object constant931 = (Object)new_AST_Constant(smallint365);
Object send374 = (Object)new_AST_Send((Object)constant930, (Object)SMB__equal, 1, constant931);
Object symbol25 = (Object)new_Type_Symbol_cached(L"tmNumberEquals");

// nil>>tmNumberEquals
Object method164 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send374);
Object methodclosure84 = (Object)new_Runtime_MethodClosure(method164);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol25, (Runtime_MethodClosure)methodclosure84);

Object send375 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol25, 0);
Object result = (Object)Eval((Object)send375);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberMult)
/*
tmNumberMult
	^ 2 * 3
*/
Object smallint366 = (Object)new_Type_SmallInt(2);
Object constant932 = (Object)new_AST_Constant(smallint366);
Object smallint367 = (Object)new_Type_SmallInt(3);
Object constant933 = (Object)new_AST_Constant(smallint367);
Object send376 = (Object)new_AST_Send((Object)constant932, (Object)SMB__times, 1, constant933);
Object symbol26 = (Object)new_Type_Symbol_cached(L"tmNumberMult");

// nil>>tmNumberMult
Object method165 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send376);
Object methodclosure85 = (Object)new_Runtime_MethodClosure(method165);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol26, (Runtime_MethodClosure)methodclosure85);

Object send377 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol26, 0);
Object result = (Object)Eval((Object)send377);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 6);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmNumberSubtract)
/*
tmNumberSubtract
	^ 2 - 1
*/
Object smallint368 = (Object)new_Type_SmallInt(2);
Object constant934 = (Object)new_AST_Constant(smallint368);
Object smallint369 = (Object)new_Type_SmallInt(1);
Object constant935 = (Object)new_AST_Constant(smallint369);
Object send378 = (Object)new_AST_Send((Object)constant934, (Object)SMB__minus, 1, constant935);
Object symbol27 = (Object)new_Type_Symbol_cached(L"tmNumberSubtract");

// nil>>tmNumberSubtract
Object method166 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send378);
Object methodclosure86 = (Object)new_Runtime_MethodClosure(method166);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol27, (Runtime_MethodClosure)methodclosure86);

Object send379 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol27, 0);
Object result = (Object)Eval((Object)send379);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmString)
/*
tmString
	^ 'String'
*/
Object string280 = (Object)new_Type_String(L"String");
Object constant936 = (Object)new_AST_Constant(string280);
Object symbol28 = (Object)new_Type_Symbol_cached(L"tmString");

// nil>>tmString
Object method167 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant936);
Object methodclosure87 = (Object)new_Runtime_MethodClosure(method167);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol28, (Runtime_MethodClosure)methodclosure87);

Object send380 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol28, 0);
Object result = (Object)Eval((Object)send380);
ASSERT_EMPTY_STACK
Object string281 = (Object)new_Type_String(L"String");
result = Eval_Send1(result, SMB__equal,string281);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmStringEquals)
/*
tmStringEquals
	^ 'String' = 'String'
*/
Object string282 = (Object)new_Type_String(L"String");
Object constant937 = (Object)new_AST_Constant(string282);
Object string283 = (Object)new_Type_String(L"String");
Object constant938 = (Object)new_AST_Constant(string283);
Object send381 = (Object)new_AST_Send((Object)constant937, (Object)SMB__equal, 1, constant938);
Object symbol29 = (Object)new_Type_Symbol_cached(L"tmStringEquals");

// nil>>tmStringEquals
Object method168 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send381);
Object methodclosure88 = (Object)new_Runtime_MethodClosure(method168);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol29, (Runtime_MethodClosure)methodclosure88);

Object send382 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol29, 0);
Object result = (Object)Eval((Object)send382);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbol)
/*
tmSymbol
	^ #Symbol
*/
Object symbol30 = (Object)new_Type_Symbol_cached(L"Symbol");
Object constant939 = (Object)new_AST_Constant(symbol30);
Object symbol31 = (Object)new_Type_Symbol_cached(L"tmSymbol");

// nil>>tmSymbol
Object method169 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, constant939);
Object methodclosure89 = (Object)new_Runtime_MethodClosure(method169);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol31, (Runtime_MethodClosure)methodclosure89);

Object send383 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol31, 0);
Object result = (Object)Eval((Object)send383);
ASSERT_EMPTY_STACK
result = Eval_Send1(result, SMB__equal,symbol30);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSymbolEquals)
/*
tmSymbolEquals
	^ #Symbol = #Symbol
*/
Object symbol30 = (Object)new_Type_Symbol_cached(L"Symbol");
Object constant940 = (Object)new_AST_Constant(symbol30);
Object constant941 = (Object)new_AST_Constant(symbol30);
Object send384 = (Object)new_AST_Send((Object)constant940, (Object)SMB__equal, 1, constant941);
Object symbol32 = (Object)new_Type_Symbol_cached(L"tmSymbolEquals");

// nil>>tmSymbolEquals
Object method170 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, send384);
Object methodclosure90 = (Object)new_Runtime_MethodClosure(method170);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol32, (Runtime_MethodClosure)methodclosure90);

Object send385 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol32, 0);
Object result = (Object)Eval((Object)send385);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

TEST_SUITE(AutoGenTest,
{
    Test_Class = new_Class_named((Object)Type_Object_Class, L"Test_Object", Type_Object_Class->type);
    test_Class_Instance = (Object)new_AST_Constant((Object)instantiate((Type_Class)Test_Class));

    RUN_TEST(AutoGenTest_tmNumberAdd);
    RUN_TEST(AutoGenTest_tmBooleanEquals);
    RUN_TEST(AutoGenTest_tmNumberMult);
    RUN_TEST(AutoGenTest_tmNumber);
    RUN_TEST(AutoGenTest_tmStringEquals);
    RUN_TEST(AutoGenTest_tmBooleanFalse);
    RUN_TEST(AutoGenTest_tmNumberDiv);
    RUN_TEST(AutoGenTest_tmString);
    RUN_TEST(AutoGenTest_tmSymbol);
    RUN_TEST(AutoGenTest_tmSymbolEquals);
    RUN_TEST(AutoGenTest_tmNumberEquals);
    RUN_TEST(AutoGenTest_tmCharacterEquals);
    RUN_TEST(AutoGenTest_tmCharacter);
    RUN_TEST(AutoGenTest_tmBooleanTrue);
    RUN_TEST(AutoGenTest_tmNumberSubtract);
})