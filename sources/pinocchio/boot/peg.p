(letrec ((StringScanner (newclass StringScanner Object 
                        (string position) ()
                ((pos        (s) ((getself s) 'objectAt: 1))
                 (pos:       (s new) ((getself s) 'objectAt:put: 1 new))
                 (string     (s) ((getself s) 'objectAt: 0))
                 (string:    (s new) ((getself s) 'objectAt:put: 0 new))
                 (next       (s)  
                      (let* ((self (getself s))
                             (str  (self 'objectAt: 0))
                             (pos  (self 'objectAt: 1))
                             (res  (str 'objectAt: pos)))
                          (self 'objectAt:put: 1 (+ pos 1))
                          res))
                 (initialize (s) ((getself s) 'pos: 0) (getself s))
                 (atEnd      (s) (let ((self (getself s)))
                              (= (self 'pos) 
                                 ((self 'string) 'size)))))
                ((on:        (s str) (let ((result ((getself s) 'new)))
                                  (result 'string: str)
                                  result)))))
       (Expression (newclass Expression Object (name omit) ()
            ((printString (s)
                (let ((self (getself s)))
                    (display (self 'name))
                    (display " (")
                    (display ((self 'class) 'name))
                    (display ")\n")))
             (match:in: (s input scope)
                (let ((self (getself s))
                    (self 'performMatch:in: input scope))))
             (performMatch:in: (s input scope)
                (let* ((self (getself s))
                       (save (input 'pos))
                       (match (self 'privateMatch:in: input scope)))
                    (if (eq? match null)
                        (input 'pos: save)
                        (begin))
                    match))
             (privateMatch:in: (s input scope)
                ((getself s) 'subclassResponsibility))
             (asExpression (s) (getself s))
             (omit (s) ((getself s) 'objectAt: 1))
             (name (s) ((getself s) 'objectAt: 0))
             (plus (s) (OneOrMore 'for: (getself s)))
             (times (s) (ZeroOrMore 'for: (getself s)))
             (and (s) (AndPredicate 'for: (getself s)))
             (not (s) (NotPredicate 'for: (getself s)))
             (minus (s) (let ((result (NotPredicate 'for: (getself s))))
                            (result 'consume: #f)))
             (& (s other) (Sequence 'with:with: (getself s) other))
             (\| (s other) (OrderedChoice 'with:with: (getself s) other))
             (strongAnd: (s other)
                (let ((result ((getself s) '& other)))
                    (result 'skipWhitespace: #f)
                    result))
             (? (s) (ZeroOrOne 'for: (getself s)))
             (* (s) ((getself s) 'times))
             (strongTimes (s) (let ((result ((getself s) '*)))
                                (result 'skipWhitespace: #f)
                                result))
             (+ (s) ((getself s) 'plus))
             (strongPlus (s) (let ((result ((getself s) '+)))
                                (result 'skipWhitespace: #f)
                                result)))
            ()))
       (Sequence
            (newclass Sequence Expression (children skipWhitespace) ()
                ( 
                )
                ()
            ))
       (OrderedChoice
            (newclass OrderedChoice Expression (children) ()
                ()
                ()
            ))
       (Repetition
            (newclass Repetition Expression (child skipWhitespace) ()
                ()
                ()
            ))
       (OneOrMore
            (newclass OneOrMore Repetition () ()
                ()
                ()
            ))
       (ZeroOrMore
            (newclass ZeroOrMore Repetition () ()
                ()
                ()
            ))
       (ZeroOrOne
            (newclass ZeroOrOne Repetition () ()
                ()
                ()
            ))
       (AndPredicate
            (newclass AndPredicate Repetition () ()
                ()
                ()
            ))
       (NotPredicate
            (newclass NotPredicate Repetition (consume) ()
                ()
                ()
            ))
       (Terminal
            (newclass Terminal Expression (regexp) ()
                ()
                ()
            ))
        )

       (load "boot/test/test-peg.p")

       ;(Object 'bla)
)
