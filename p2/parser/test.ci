// Auto generated Tests from PinocchioCDumperTest

// Test Object to put test methods in
Type_Class Test_Class;
Object test_Class_Instance;
// Test Method symbol
Type_Symbol SMB_runTestCase;


/* ========================================================================= */

NEW_TEST(AutoGenTest_tmClassReferenceReturn)
/*
tmClassReferenceReturn
	^ Metaclass name
*/
Object send31341 = (Object)new_AST_Send((Object)Metaclass_Reference, (Object)SMB_name, 0);
Object symbol1470 = (Object)new_Type_Symbol_cached(L"tmClassReferenceReturn");

// nil>>tmClassReferenceReturn
Object array39583 = (Object)new_Type_Array_with(1, send31341);
Object method10646 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, (Type_Array)array39583);
Object methodclosure7887 = (Object)new_Runtime_MethodClosure(method10646);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol1470, (Runtime_MethodClosure)methodclosure7887);

Object send31342 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol1470, 0);
Object result = (Object)Eval((Object)send31342);
ASSERT_EMPTY_STACK
Object symbol1471 = (Object)new_Type_Symbol_cached(L"Metaclass");
result = Eval_Send1(result, SMB__equal, symbol1471);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmExtendedReturn)
/*
tmExtendedReturn
	1 > 2
		ifTrue: [^ 1].
	^ 2
*/
Object variable110 = (Object)new_AST_Variable_named(L"return");
Object array39584 = (Object)new_Type_Array_with(1, variable110);
Object smallint3523 = (Object)new_Type_SmallInt(1);
Object constant9302 = (Object)new_AST_Constant(smallint3523);
Object smallint3524 = (Object)new_Type_SmallInt(2);
Object constant9303 = (Object)new_AST_Constant(smallint3524);
Object send31345 = (Object)new_AST_Send((Object)constant9302, (Object)SMB__gt, 1, constant9303);
Object smallint3525 = (Object)new_Type_SmallInt(1);
Object constant9304 = (Object)new_AST_Constant(smallint3525);
Object send31346 = (Object)new_AST_Send((Object)variable110, (Object)SMB_escape_, 1, constant9304);
Object array39586 = (Object)new_Type_Array_with(1, send31346);
Object block5420 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 1, (Type_Array)array39586);
Object send31344 = (Object)new_AST_Send((Object)send31345, (Object)SMB_ifTrue_, 1, block5420);
Object smallint3526 = (Object)new_Type_SmallInt(2);
Object constant9305 = (Object)new_AST_Constant(smallint3526);
Object array39585 = (Object)new_Type_Array_with(2, send31344, constant9305);
Object block5419 = (Object)new_AST_Block_with((Type_Array)array39584, (Type_Array)empty_Type_Array, 0, (Type_Array)array39585);
Object send31343 = (Object)new_AST_Send((Object)AST_Callec_Reference, (Object)SMB_on_, 1, block5419);
Object symbol1472 = (Object)new_Type_Symbol_cached(L"tmExtendedReturn");

// nil>>tmExtendedReturn
Object array39587 = (Object)new_Type_Array_with(1, send31343);
Object method10647 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, (Type_Array)array39587);
Object methodclosure7888 = (Object)new_Runtime_MethodClosure(method10647);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol1472, (Runtime_MethodClosure)methodclosure7888);

Object send31347 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol1472, 0);
Object result = (Object)Eval((Object)send31347);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmExtendedReturn_)
/*
tmExtendedReturn: arg1
	<arg1: 1>
	arg1 > 2
		ifTrue: [^ 6].
	^ arg1
*/
Object variable111 = (Object)new_AST_Variable_named(L"return");
Object array39588 = (Object)new_Type_Array_with(1, variable111);
Object localvariable8449 = (Object)new_AST_Variable_named(L"arg1");
Object smallint3527 = (Object)new_Type_SmallInt(2);
Object constant9306 = (Object)new_AST_Constant(smallint3527);
Object send31350 = (Object)new_AST_Send((Object)localvariable8449, (Object)SMB__gt, 1, constant9306);
Object smallint3528 = (Object)new_Type_SmallInt(6);
Object constant9307 = (Object)new_AST_Constant(smallint3528);
Object send31351 = (Object)new_AST_Send((Object)variable111, (Object)SMB_escape_, 1, constant9307);
Object array39590 = (Object)new_Type_Array_with(1, send31351);
Object block5422 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 3, (Type_Array)array39590);
Object send31349 = (Object)new_AST_Send((Object)send31350, (Object)SMB_ifTrue_, 1, block5422);
Object array39589 = (Object)new_Type_Array_with(2, send31349, localvariable8449);
Object block5421 = (Object)new_AST_Block_with((Type_Array)array39588, (Type_Array)empty_Type_Array, 2, (Type_Array)array39589);
Object send31348 = (Object)new_AST_Send((Object)AST_Callec_Reference, (Object)SMB_on_, 1, block5421);
Object symbol1481 = (Object)new_Type_Symbol_cached(L"tmExtendedReturn:");

// nil>>tmExtendedReturn:
Object array39591 = (Object)new_Type_Array_with(1, localvariable8449);
Object array39592 = (Object)new_Type_Array_with(1, send31348);
Object method10648 = (Object)new_AST_Method_with((Type_Array)array39591, (Type_Array)empty_Type_Array, (Type_Array)array39592);
Object methodclosure7889 = (Object)new_Runtime_MethodClosure(method10648);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol1481, (Runtime_MethodClosure)methodclosure7889);

Object smallint3529 = (Object)new_Type_SmallInt(1);
Object constant9308 = (Object)new_AST_Constant(smallint3529);
Object send31352 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol1481, 1, constant9308);
Object result = (Object)Eval((Object)send31352);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmExtendedReturn_and_)
/*
tmExtendedReturn: arg1 and: arg2
	<arg1: 1 arg2: 2>
	arg1 > arg2
		ifTrue: [^ arg2].
	^ arg1
*/
Object variable112 = (Object)new_AST_Variable_named(L"return");
Object array39593 = (Object)new_Type_Array_with(1, variable112);
Object localvariable8450 = (Object)new_AST_Variable_named(L"arg1");
Object localvariable8451 = (Object)new_AST_Variable_named(L"arg2");
Object send31355 = (Object)new_AST_Send((Object)localvariable8450, (Object)SMB__gt, 1, localvariable8451);
Object send31356 = (Object)new_AST_Send((Object)variable112, (Object)SMB_escape_, 1, localvariable8451);
Object array39595 = (Object)new_Type_Array_with(1, send31356);
Object block5424 = (Object)new_AST_Block_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, 5, (Type_Array)array39595);
Object send31354 = (Object)new_AST_Send((Object)send31355, (Object)SMB_ifTrue_, 1, block5424);
Object array39594 = (Object)new_Type_Array_with(2, send31354, localvariable8450);
Object block5423 = (Object)new_AST_Block_with((Type_Array)array39593, (Type_Array)empty_Type_Array, 4, (Type_Array)array39594);
Object send31353 = (Object)new_AST_Send((Object)AST_Callec_Reference, (Object)SMB_on_, 1, block5423);
Object symbol1482 = (Object)new_Type_Symbol_cached(L"tmExtendedReturn:and:");

// nil>>tmExtendedReturn:and:
Object array39596 = (Object)new_Type_Array_with(2, localvariable8450, localvariable8451);
Object array39597 = (Object)new_Type_Array_with(1, send31353);
Object method10649 = (Object)new_AST_Method_with((Type_Array)array39596, (Type_Array)empty_Type_Array, (Type_Array)array39597);
Object methodclosure7890 = (Object)new_Runtime_MethodClosure(method10649);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol1482, (Runtime_MethodClosure)methodclosure7890);

Object smallint3530 = (Object)new_Type_SmallInt(1);
Object constant9309 = (Object)new_AST_Constant(smallint3530);
Object smallint3531 = (Object)new_Type_SmallInt(2);
Object constant9310 = (Object)new_AST_Constant(smallint3531);
Object send31357 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol1482, 2, constant9309, constant9310);
Object result = (Object)Eval((Object)send31357);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArgument_)
/*
tmMethodArgument: t1 
	<arg1: 1>
	^ t1 + 1
*/
Object localvariable8452 = (Object)new_AST_Variable_named(L"t1");
Object smallint3532 = (Object)new_Type_SmallInt(1);
Object constant9311 = (Object)new_AST_Constant(smallint3532);
Object send31358 = (Object)new_AST_Send((Object)localvariable8452, (Object)SMB__plus, 1, constant9311);
Object symbol1473 = (Object)new_Type_Symbol_cached(L"tmMethodArgument:");

// nil>>tmMethodArgument:
Object array39598 = (Object)new_Type_Array_with(1, localvariable8452);
Object array39599 = (Object)new_Type_Array_with(1, send31358);
Object method10650 = (Object)new_AST_Method_with((Type_Array)array39598, (Type_Array)empty_Type_Array, (Type_Array)array39599);
Object methodclosure7891 = (Object)new_Runtime_MethodClosure(method10650);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol1473, (Runtime_MethodClosure)methodclosure7891);

Object smallint3533 = (Object)new_Type_SmallInt(1);
Object constant9312 = (Object)new_AST_Constant(smallint3533);
Object send31359 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol1473, 1, constant9312);
Object result = (Object)Eval((Object)send31359);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 2);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmMethodArguments_with_with_)
/*
tmMethodArguments: t1 with: t2 with: t3 
	<arg1: 'asdf' arg2: 'asdf' arg3: 'df'>
	^ t1 , t2 , t3
*/
Object localvariable8453 = (Object)new_AST_Variable_named(L"t1");
Object localvariable8454 = (Object)new_AST_Variable_named(L"t2");
Object send31361 = (Object)new_AST_Send((Object)localvariable8453, (Object)SMB__concat, 1, localvariable8454);
Object localvariable8455 = (Object)new_AST_Variable_named(L"t3");
Object send31360 = (Object)new_AST_Send((Object)send31361, (Object)SMB__concat, 1, localvariable8455);
Object symbol1474 = (Object)new_Type_Symbol_cached(L"tmMethodArguments:with:with:");

// nil>>tmMethodArguments:with:with:
Object array39600 = (Object)new_Type_Array_with(3, localvariable8453, localvariable8454, localvariable8455);
Object array39601 = (Object)new_Type_Array_with(1, send31360);
Object method10651 = (Object)new_AST_Method_with((Type_Array)array39600, (Type_Array)empty_Type_Array, (Type_Array)array39601);
Object methodclosure7892 = (Object)new_Runtime_MethodClosure(method10651);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol1474, (Runtime_MethodClosure)methodclosure7892);

Object string4429 = (Object)new_Type_String(L"asdf");
Object constant9313 = (Object)new_AST_Constant(string4429);
Object string4430 = (Object)new_Type_String(L"asdf");
Object constant9314 = (Object)new_AST_Constant(string4430);
Object string4431 = (Object)new_Type_String(L"df");
Object constant9315 = (Object)new_AST_Constant(string4431);
Object send31362 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol1474, 3, constant9313, constant9314, constant9315);
Object result = (Object)Eval((Object)send31362);
ASSERT_EMPTY_STACK
Object string4432 = (Object)new_Type_String(L"asdfasdfdf");
result = Eval_Send1(result, SMB__equal, string4432);
ASSERT_EMPTY_STACK
assert0(result == (Object)True);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleBasicArithmetic)
/*
tmSimpleBasicArithmetic
	^ 1 + 2 + 2 * 5
*/
Object smallint3534 = (Object)new_Type_SmallInt(1);
Object constant9316 = (Object)new_AST_Constant(smallint3534);
Object smallint3535 = (Object)new_Type_SmallInt(2);
Object constant9317 = (Object)new_AST_Constant(smallint3535);
Object smallint3536 = (Object)new_Type_SmallInt(2);
Object constant9318 = (Object)new_AST_Constant(smallint3536);
Object send31365 = (Object)new_AST_Send((Object)constant9317, (Object)SMB__plus, 1, constant9318);
Object send31364 = (Object)new_AST_Send((Object)constant9316, (Object)SMB__plus, 1, send31365);
Object smallint3537 = (Object)new_Type_SmallInt(5);
Object constant9319 = (Object)new_AST_Constant(smallint3537);
Object send31363 = (Object)new_AST_Send((Object)send31364, (Object)SMB__times, 1, constant9319);
Object symbol1479 = (Object)new_Type_Symbol_cached(L"tmSimpleBasicArithmetic");

// nil>>tmSimpleBasicArithmetic
Object array39602 = (Object)new_Type_Array_with(1, send31363);
Object method10652 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, (Type_Array)array39602);
Object methodclosure7893 = (Object)new_Runtime_MethodClosure(method10652);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol1479, (Runtime_MethodClosure)methodclosure7893);

Object send31366 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol1479, 0);
Object result = (Object)Eval((Object)send31366);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 25);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleBasicArithmeticWith_and_and_)
/*
tmSimpleBasicArithmeticWith: a and: b and: c
	<arg: 1 arg: 2 arg: 4>
	^ a + b + b * c
*/
Object localvariable8456 = (Object)new_AST_Variable_named(L"a");
Object localvariable8457 = (Object)new_AST_Variable_named(L"b");
Object send31369 = (Object)new_AST_Send((Object)localvariable8457, (Object)SMB__plus, 1, localvariable8457);
Object send31368 = (Object)new_AST_Send((Object)localvariable8456, (Object)SMB__plus, 1, send31369);
Object localvariable8458 = (Object)new_AST_Variable_named(L"c");
Object send31367 = (Object)new_AST_Send((Object)send31368, (Object)SMB__times, 1, localvariable8458);
Object symbol1480 = (Object)new_Type_Symbol_cached(L"tmSimpleBasicArithmeticWith:and:and:");

// nil>>tmSimpleBasicArithmeticWith:and:and:
Object array39603 = (Object)new_Type_Array_with(3, localvariable8456, localvariable8457, localvariable8458);
Object array39604 = (Object)new_Type_Array_with(1, send31367);
Object method10653 = (Object)new_AST_Method_with((Type_Array)array39603, (Type_Array)empty_Type_Array, (Type_Array)array39604);
Object methodclosure7894 = (Object)new_Runtime_MethodClosure(method10653);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol1480, (Runtime_MethodClosure)methodclosure7894);

Object smallint3538 = (Object)new_Type_SmallInt(1);
Object constant9320 = (Object)new_AST_Constant(smallint3538);
Object smallint3539 = (Object)new_Type_SmallInt(2);
Object constant9321 = (Object)new_AST_Constant(smallint3539);
Object smallint3540 = (Object)new_Type_SmallInt(4);
Object constant9322 = (Object)new_AST_Constant(smallint3540);
Object send31370 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol1480, 3, constant9320, constant9321, constant9322);
Object result = (Object)Eval((Object)send31370);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 20);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

NEW_TEST(AutoGenTest_tmSimpleReturn)
/*
tmSimpleReturn
	^ 1
*/
Object smallint3541 = (Object)new_Type_SmallInt(1);
Object constant9323 = (Object)new_AST_Constant(smallint3541);
Object symbol1476 = (Object)new_Type_Symbol_cached(L"tmSimpleReturn");

// nil>>tmSimpleReturn
Object array39605 = (Object)new_Type_Array_with(1, constant9323);
Object method10654 = (Object)new_AST_Method_with((Type_Array)empty_Type_Array, (Type_Array)empty_Type_Array, (Type_Array)array39605);
Object methodclosure7895 = (Object)new_Runtime_MethodClosure(method10654);
store_method((Type_Class)Test_Class, (Type_Symbol)symbol1476, (Runtime_MethodClosure)methodclosure7895);

Object send31371 = (Object)new_AST_Send((Object)test_Class_Instance, (Object)symbol1476, 0);
Object result = (Object)Eval((Object)send31371);
ASSERT_EMPTY_STACK
assert0(((Type_SmallInt)result)->value == 1);
ASSERT_EMPTY_STACK
}

/* ========================================================================= */

TEST_SUITE(AutoGenTest,
{
    Test_Class = new_Class_named((Object)Type_Object_Class, L"Test_Object", Type_Object_Class->type);
    test_Class_Instance = (Object)new_AST_Constant((Object)instantiate((Type_Class)Test_Class));

    RUN_TEST(AutoGenTest_tmSimpleBasicArithmetic);
    RUN_TEST(AutoGenTest_tmExtendedReturn_);
    RUN_TEST(AutoGenTest_tmMethodArguments_with_with_);
    RUN_TEST(AutoGenTest_tmSimpleReturn);
    RUN_TEST(AutoGenTest_tmMethodArgument_);
    RUN_TEST(AutoGenTest_tmClassReferenceReturn);
    RUN_TEST(AutoGenTest_tmExtendedReturn);
    RUN_TEST(AutoGenTest_tmSimpleBasicArithmeticWith_and_and_);
    RUN_TEST(AutoGenTest_tmExtendedReturn_and_);
})