

#define SYMBOL_TEST_SETUP \
Type_Symbol symbol = new_Type_Symbol(L"symbol"); \
Object result;

/* ======================================================================== */

void test_Type_Symbol_equals_()
{
//  Type_Symbol symbol = new_Type_Symbol(L"symbol"); 
//    Type_Symbol symbol2 = new_Type_Symbol(L"symbol");
    // Symbols should use a symbol table
    // TODO create SymbolTable
    //ASSERT_EQUALS(symbol,  symbol2);
    //ASSERT_EQUALS(symbol2, symbol);
}

void test_Type_Symbol_size()
{
    SYMBOL_TEST_SETUP;
    result = Eval_AST_Send0((Object)symbol,SMB_size);
    ASSERT_TYPE(result, Type_SmallInt_Class);
    assert(((Type_SmallInt)result)->value == 6);
    
}

void test_Type_Symbol_asString()
{
    SYMBOL_TEST_SETUP;
    result = Eval_AST_Send0((Object)symbol,SMB_asString);
    ASSERT_TYPE(result, Type_String_Class);
}

void test_Type_Symbol_indexOf()
{
    //SYMBOL_TEST_SETUP;
}

void test_Type_Symbol_lastIndexOf()
{
    //SYMBOL_TEST_SETUP;
}

void test_Type_Symbol_Type_ObjectAt_()
{
    SYMBOL_TEST_SETUP;
    int i;
    for (i= 0; i<symbol->size->value; ++i) {
        result = Eval_AST_Send1((Object)symbol,SMB_Type_ObjectAt_, (Object)new_Type_SmallInt(i));
        ASSERT_TYPE(result, Type_Character_Class);
        assert(((Type_Character) result)->value == symbol->value[i]);
    }
}

void test_Type_Symbol_asType_Array()
{
    SYMBOL_TEST_SETUP;
    result = Eval_AST_Send0((Object)symbol,SMB_asType_Array);
    ASSERT_TYPE(result, Type_Array_Class);
    int i;
    Object item;
    for (i= 0; i<symbol->size->value; ++i) {
        item = ((Type_Array) result)->values[i];
        ASSERT_TYPE(item, Type_Character_Class);
        assert(((Type_Character) item)->value == symbol->value[i]);
    }
}

/* ======================================================================== */

void test_Type_Symbol()
{
    test_Type_Symbol_equals_();
    test_Type_Symbol_size();
    test_Type_Symbol_asString();
    test_Type_Symbol_Type_ObjectAt_();
    test_Type_Symbol_asType_Array();
}
