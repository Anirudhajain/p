#include <wchar.h>

#define CHARACTER_TEST_SETUP \
Type_Character chr = new_Type_Character(L'a'); \
Object result;

/* ========================================================================= */

NEW_TEST(Type_Character_new_Character_With_int)
    int i;
    for (i=0; i<16000; ++i) {
        Type_Character chr = new_Type_Character_WithInt(i);
        wprintf(L"%lc \n", chr->value);
    }
}

NEW_TEST(Type_Character_asType_SmallInt)
    CHARACTER_TEST_SETUP;
    result = Eval_Send0((Object)chr, SMB_asSmallInt);
    ASSERT_TYPE(result, Type_SmallInt_Class);
    //TODO
    ASSERT_EMPTY_STACK;
}


NEW_TEST(Type_Character_asSymbol)
    CHARACTER_TEST_SETUP;
    result = Eval_Send0((Object)chr, SMB_asSymbol);
    ASSERT_TYPE(result, Type_Symbol_Class);
    assert0(((Type_Symbol)result)->size == 1);
    assert0(((Type_Symbol)result)->value[0] == chr->value);
    ASSERT_EMPTY_STACK;
}

NEW_TEST(Type_Character_asString)
    CHARACTER_TEST_SETUP;
    result = Eval_Send0((Object)chr, SMB_asString);
    ASSERT_TYPE(result, Type_String_Class);
    assert0(((Type_String)result)->value[0] == chr->value);
    ASSERT_EMPTY_STACK;
}

/* ========================================================================= */

TEST_SUITE(Type_Character,
{
    RUN_TEST(Type_Character_new_Character_With_int);
    RUN_TEST(Type_Character_asType_SmallInt);
    RUN_TEST(Type_Character_asSymbol);
    RUN_TEST(Type_Character_asString);
})
