
NEW_TEST(Type_Object_methods)
    assert0(Type_Dictionary_quick_lookup(Type_Object_Class->methods, (Object)SMB_equals_));
    assert0(HEADER((AST_Native_Method)Type_Dictionary_quick_lookup(Type_Object_Class->methods, (Object)SMB_equals_)) == (Object)AST_Native_Method_Class);
}

NEW_TEST(Type_Object_isNil)
    // just check on an Object
    Object o = (Object)Type_Object_Class;
    Object result = Eval_Send0(o, SMB_isNil);
    assert0(result == (Object)False);
    ASSERT_EMPTY_STACK;
}

NEW_TEST(Type_Object_at_)
    Type_Class cls = new_Class_named((Object)Type_Object_Class, 
                                     L"TestClass",
                                     create_type(3, OBJECT, L"a", L"b", L"c"));
    Object o = instantiate(cls);
    ((Type_Object)o)->ivals[0] = (Object)True;
    ((Type_Object)o)->ivals[1] = (Object)False;
    Object result;
    result = Eval_Send1(o, SMB_instVarAt_, (Object)new_Type_SmallInt(0));
    assert0(result == (Object)True);
    result = Eval_Send1(o, SMB_instVarAt_, (Object)new_Type_SmallInt(1));
    assert0(result == (Object)False);
    result = Eval_Send1(o, SMB_instVarAt_, (Object)new_Type_SmallInt(2));
    assert0(result == Nil);
}

NEW_TEST(Type_Object_at_put_)
    Type_Class cls = new_Class_named((Object)Type_Object_Class, 
                                     L"TestClass",
                                     create_type(3, OBJECT, L"a", L"b", L"c"));
    Object o = instantiate(cls);
    Object result = Eval_Send2(o, SMB_instVarAt_put_,
                               (Object)new_Type_SmallInt(0),
                               (Object)True);
    assert0(result == o);
    Eval_Send2(o, SMB_instVarAt_put_, (Object)new_Type_SmallInt(1), (Object)False);
    assert0(((Type_Object)o)->ivals[0] == (Object)True);
    assert0(((Type_Object)o)->ivals[1] == (Object)False);
}

NEW_TEST(Type_Object_basicNew)
    Type_Class cls = new_Class_named((Object)Type_Object_Class, 
                                     L"TestClass",
                                     create_type(3, OBJECT, L"a", L"b", L"c"));
    Object o = Eval_Send0((Object)cls, SMB_basicNew);
    ((Type_Object)o)->ivals[0] = (Object)True;
    ((Type_Object)o)->ivals[1] = (Object)False;
    Object result;
    result = Eval_Send1(o, SMB_instVarAt_, (Object)new_Type_SmallInt(0));
    assert0(result == (Object)True);
    result = Eval_Send1(o, SMB_instVarAt_, (Object)new_Type_SmallInt(1));
    assert0(result == (Object)False);
    result = Eval_Send1(o, SMB_instVarAt_, (Object)new_Type_SmallInt(2));
    assert0(result == Nil);
    result = Eval_Send2(o, SMB_instVarAt_put_,
                               (Object)new_Type_SmallInt(0),
                               (Object)True);
    assert0(result == o);
    Eval_Send2(o, SMB_instVarAt_put_, (Object)new_Type_SmallInt(1), (Object)False);
    assert0(((Type_Object)o)->ivals[0] == (Object)True);
    assert0(((Type_Object)o)->ivals[1] == (Object)False);
}

/* ========================================================================= */

TEST_SUITE(Type_Object,
{
    RUN_TEST(Type_Object_methods);
    RUN_TEST(Type_Object_isNil);
    RUN_TEST(Type_Object_at_);
    RUN_TEST(Type_Object_at_put_);
    RUN_TEST(Type_Object_basicNew);
})
