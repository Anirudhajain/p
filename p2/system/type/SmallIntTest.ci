
NEW_TEST(Type_SmallInt_equals_)
    Object int0     = (Object)new_Type_SmallInt(0);
    Object int2     = (Object)new_Type_SmallInt(2);
    Object result;
    
    result = Eval_Send1(int0, SMB_equals_, int2);
    assert0(result == (Object)False);
    result = Eval_Send1(int2, SMB_equals_, int0);
    assert0(result == (Object)False);
    
    result = Eval_Send1(int0, SMB_equals_, int0);
    assert0(result == (Object)True);
    
    result = Eval_Send1(int2, SMB_equals_, int2);
    assert0(result == (Object)True);
}

#define Type_SmallInt_BINOP_TEST(name, op) \
NEW_TEST(Type_SmallInt_##name##_) \
    Type_SmallInt int4 = new_Type_SmallInt(4); \
    Type_SmallInt int8 = new_Type_SmallInt(8); \
    Object result; \
    result = Eval_Send1((Object)int4, SMB_##name##_, (Object)int8); \
    ASSERT_TYPE(result, Type_SmallInt_Class); \
   \
    assert(((Type_SmallInt)result)->value == (int4->value op int8->value), \
		  printf("expected %i but got %i\n", (int4->value op int8->value), \
											 ((Type_SmallInt)result)->value)); \


Type_SmallInt_BINOP_TEST(plus,       +)
}

Type_SmallInt_BINOP_TEST(minus,      -)
}

Type_SmallInt_BINOP_TEST(times,      *)
}

Type_SmallInt_BINOP_TEST(divide,     /)
}

Type_SmallInt_BINOP_TEST(shiftRight,>>)
}

Type_SmallInt_BINOP_TEST(shiftLeft, <<)
}

Type_SmallInt_BINOP_TEST(and,        &)
}

Type_SmallInt_BINOP_TEST(or,         |)
}

NEW_TEST(Type_SmallInt_hash)
    Type_SmallInt number = new_Type_SmallInt(10);
    Object result        = Eval_Send0((Object)number, SMB_hash);
    ASSERT_TYPE(result, Type_SmallInt_Class);
    assert0(((Type_SmallInt)result)->value == number->value);
}

/* ========================================================================= */

TEST_SUITE(Type_SmallInt,
{
    RUN_TEST(Type_SmallInt_equals_);
    RUN_TEST(Type_SmallInt_plus_);
    RUN_TEST(Type_SmallInt_minus_);
    RUN_TEST(Type_SmallInt_divide_);
    RUN_TEST(Type_SmallInt_times_);
    RUN_TEST(Type_SmallInt_shiftLeft_);
    RUN_TEST(Type_SmallInt_shiftRight_);
    RUN_TEST(Type_SmallInt_hash);
})
