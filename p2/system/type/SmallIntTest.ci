#include <wchar.h>
#include <math.h>


NEW_TEST(Type_SmallInt_values)
    int i;
    for (i=INT_CACHE_LOWER-100; i<INT_CACHE_UPPER+100; i++) {
        assert0(new_Type_SmallInt(i)->value == i);
    }
}

NEW_TEST(Type_SmallInt_equals_manualTest)
    Object int0     = (Object)new_Type_SmallInt(0);
    Object int2     = (Object)new_Type_SmallInt(2);
    Object result;
    
    result = Eval_Send1(int0, SMB_equals_, int2);
    assert0(result == (Object)False);
    ASSERT_EMPTY_STACK;
    result = Eval_Send1(int2, SMB_equals_, int0);
    assert0(result == (Object)False);
    ASSERT_EMPTY_STACK;
    
    result = Eval_Send1(int0, SMB_equals_, int0);
    assert0(result == (Object)True);
    ASSERT_EMPTY_STACK;
    
    result = Eval_Send1(int2, SMB_equals_, int2);
    assert0(result == (Object)True);
    ASSERT_EMPTY_STACK;
}

#define Type_SmallInt_BINOP_TEST(name, op) \
NEW_TEST(Type_SmallInt_##name##_) \
    Type_SmallInt int4 = new_Type_SmallInt(4); \
    Type_SmallInt int8 = new_Type_SmallInt(8); \
    Object result; \
    result = Eval_Send1((Object)int4, SMB_##name##_, (Object)int8); \
    ASSERT_TYPE(result, Type_SmallInt_Class); \
    ASSERT_EMPTY_STACK;\
   \
    assert(((Type_SmallInt)result)->value == (int4->value op int8->value), \
		  printf("expected %i but got %i\n", (int4->value op int8->value), \
											 ((Type_SmallInt)result)->value)); \


Type_SmallInt_BINOP_TEST(plus,       +)
}

Type_SmallInt_BINOP_TEST(minus,      -)
}

Type_SmallInt_BINOP_TEST(times,      *)
}

Type_SmallInt_BINOP_TEST(divide,     /)
}

Type_SmallInt_BINOP_TEST(shiftRight,>>)
}

Type_SmallInt_BINOP_TEST(shiftLeft, <<)
}

Type_SmallInt_BINOP_TEST(and,        &)
}

Type_SmallInt_BINOP_TEST(or,         |)
}

#define Type_SmallInt_BOOLEAN_BINOP_TEST(name, op) \
NEW_TEST(Type_SmallInt_##name##_) \
    Type_SmallInt int4 = new_Type_SmallInt(4); \
    Type_SmallInt int8 = new_Type_SmallInt(8); \
    Object result; \
    result = Eval_Send1((Object)int4, SMB_##name##_, (Object)int8); \
    ASSERT_INSTANCE_OF(result, Type_Boolean_Class); \
    ASSERT_EMPTY_STACK;\
   \
    printf("%ls\n", ((Type_Boolean)result)->value ? L"True" : L"False"); \
    assert(((Type_Boolean)result) == get_bool(int4->value op int8->value), \
		  printf("expected %i but got %i\n", (int4->value op int8->value), \
											 ((Type_Boolean)result)->value)); \
                                             
Type_SmallInt_BOOLEAN_BINOP_TEST(equals, ==)
}
Type_SmallInt_BOOLEAN_BINOP_TEST(notEquals, !=)
}
Type_SmallInt_BOOLEAN_BINOP_TEST(lt,     <)
}
Type_SmallInt_BOOLEAN_BINOP_TEST(gt,     >)
}

NEW_TEST(Type_SmallInt_hash)
    Type_SmallInt number = new_Type_SmallInt(10);
    Object result        = Eval_Send0((Object)number, SMB_hash);
    ASSERT_TYPE(result, Type_SmallInt_Class);
    assert0(((Type_SmallInt)result)->value == number->value);
    ASSERT_EMPTY_STACK;
}

NEW_TEST(Type_SmallInt_asString)
    Type_SmallInt number = new_Type_SmallInt(0);
    Object result = Eval_Send0((Object)number, SMB_asString);
    ASSERT_TYPE(result, Type_String_Class);
    assert(wcscmp(((Type_String)result)->value, L"0") == 0, 
        printf("%ls \n", ((Type_String)result)->value));
    ASSERT_EMPTY_STACK;
    
    number = new_Type_SmallInt(-199);
    result = Eval_Send0((Object)number, SMB_asString);
    ASSERT_TYPE(result, Type_String_Class);
    assert(wcscmp(((Type_String)result)->value, L"-199") == 0, 
        printf("%ls \n", ((Type_String)result)->value));
    ASSERT_EMPTY_STACK;
    
    number = new_Type_SmallInt(1999);
    result = Eval_Send0((Object)number, SMB_asString);
    ASSERT_TYPE(result, Type_String_Class);
    assert(wcscmp(((Type_String)result)->value, L"1999") == 0, 
        printf("%ls \n", ((Type_String)result)->value));
    ASSERT_EMPTY_STACK;
    
}
/* ========================================================================= */

TEST_SUITE(Type_SmallInt,
{
    RUN_TEST(Type_SmallInt_equals_manualTest);
    RUN_TEST(Type_SmallInt_plus_);
    RUN_TEST(Type_SmallInt_minus_);
    RUN_TEST(Type_SmallInt_divide_);
    RUN_TEST(Type_SmallInt_times_);
    RUN_TEST(Type_SmallInt_shiftLeft_);
    RUN_TEST(Type_SmallInt_shiftRight_);
    RUN_TEST(Type_SmallInt_equals_);
    RUN_TEST(Type_SmallInt_lt_);
    RUN_TEST(Type_SmallInt_gt_);
    RUN_TEST(Type_SmallInt_notEquals_);
    RUN_TEST(Type_SmallInt_hash);
    RUN_TEST(Type_SmallInt_asString);
    // make sure this test is always the last one
    // it assures that the SmallInts int the cache haven't been alteredw
    RUN_TEST(Type_SmallInt_values);
})
