
NEW_TEST(Type_Array_size)
    Object integer     = (Object)new_Type_SmallInt(10);
    Type_Array array = new_Type_Array_With(10, integer);
    Object result      = Eval_Send((Object)array, SMB_size, empty_Type_Array);
    assert0(((Type_SmallInt) result)->value == 10);
    
    result = Eval_Send1(integer, SMB_equals_, result);
    assert(result == (Object)True,
		   printf("%ls\n", ((Type_String)((Type_Class)HEADER(result))->name)->value));
    ASSERT_EMPTY_STACK;
}

NEW_TEST(Type_Array_at_)
    Object o = instantiate_sized(Type_Array_Class, 3);
    ((Type_Array)o)->values[0] = (Object)True;
    ((Type_Array)o)->values[1] = (Object)False;
    Object result;
    result = Eval_Send1(o, SMB_at_, (Object)new_Type_SmallInt(0));
    assert0(result == (Object)True);
    result = Eval_Send1(o, SMB_at_, (Object)new_Type_SmallInt(1));
    assert0(result == (Object)False);
    result = Eval_Send1(o, SMB_at_, (Object)new_Type_SmallInt(2));
    assert0(result == Nil);
}

NEW_TEST(Type_Array_at_put_)
    Object o = instantiate_sized(Type_Array_Class, 3);
    Object result = Eval_Send2(o, SMB_at_put_,
                               (Object)new_Type_SmallInt(0),
                               (Object)True);
    assert0(result == o);
    Eval_Send2(o, SMB_at_put_, (Object)new_Type_SmallInt(1), (Object)False);
    assert0(((Type_Array)o)->values[0] == (Object)True);
    assert0(((Type_Array)o)->values[1] == (Object)False);
}


/* ========================================================================= */

TEST_SUITE(Type_Array, 
{
    RUN_TEST(Type_Array_size);
    RUN_TEST(Type_Array_at_);
    RUN_TEST(Type_Array_at_put_);
})
