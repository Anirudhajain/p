
#include <wchar.h>

#define STRING_TEST_SETUP \
Type_String string = new_Type_String(L"string"); \
Object result;

/* ========================================================================= */

NEW_TEST(Type_String_asString)
    STRING_TEST_SETUP;
    result = Eval_Send0((Object)string, SMB_asString);
    assert0(result == (Object)string);
}

NEW_TEST(Type_String_asSymbol)
    STRING_TEST_SETUP;
    result = Eval_Send0((Object)string, SMB_asSymbol);
    ASSERT_TYPE(result, Type_Symbol_Class);
    assert0(wcscmp(string->value, ((Type_Symbol)result)->value) == 0);
    ASSERT_EMPTY_STACK;
}

NEW_TEST(Type_String_concat_)
    STRING_TEST_SETUP;
    Type_String string2 = new_Type_String(L"string2");
    
    Type_String string_result = Type_String_concat_(string, string2);
    ASSERT_TYPE(string_result, Type_String_Class);
    assert0(string_result->size == (string->size + string2->size));

    result = Eval_Send1((Object)string, SMB_concat_, (Object)string2);
    Type_String resultString = (Type_String)resultString;
    ASSERT_TYPE(result, Type_String_Class);
    assert((((Type_String) result)->size == (string->size + string2->size)),
        printf("%ls\n", resultString->value));
    ASSERT_EMPTY_STACK;
}

NEW_TEST(Type_String_asArray)
    STRING_TEST_SETUP;
    result = Eval_Send0((Object)string, SMB_asArray);
    ASSERT_TYPE(result, Type_Array_Class);
    assert0(((Type_Array)result)->size == string->size);
    ASSERT_EMPTY_STACK;
    int i=0;
    for (i=0; i<string->size; i++) {
       assert0(((Type_Character)((Type_Array)result)->values[i])->value == string->value[i]);
    }
}

NEW_TEST(Type_String_char2Type_String)
    Type_String string = new_Type_String_from_charp("abc");
    assert(string->size == 3,          printf("%"F_I"u", string->size));
    assert(wcscmp(string->value, L"abc") == 0, printf("%ls", string->value));
}

NEW_TEST(Type_String_at_put_)
    Type_String string = new_Type_String(L"tpyo");
    Eval_Send2((Object) string, SMB_at_put_, 
            (Object)new_Type_SmallInt(1), (Object)new_Type_Character(L'y'));
    ASSERT_EMPTY_STACK;
    Eval_Send2((Object) string, SMB_at_put_, 
            (Object)new_Type_SmallInt(2), (Object)new_Type_Character(L'p'));
    ASSERT_EMPTY_STACK;
    assert(wcscmp(string->value, L"typo") == 0,
        printf("%ls \n", string->value));
    
}

/* ========================================================================= */

TEST_SUITE(Type_String,
{
    RUN_TEST(Type_String_asString);
    RUN_TEST(Type_String_asSymbol);
    RUN_TEST(Type_String_concat_);
    RUN_TEST(Type_String_asArray);
    RUN_TEST(Type_String_char2Type_String);
})
