Object instantiate_ARRAY(Type_Class class, uns_int base, uns_int extra)
{
    Type_Array result = NEW_ARRAYED(struct Type_Array_t, Object[base+extra]);
    result->size = extra;
    uns_int i;
    for (i = 0; i < base + extra; i++) {
        result->values[i] = Nil;
    }
    HEADER(result) = (Object)class;
    return (Object)result;
}

Object instantiate_BYTES(Type_Class class, uns_int base, uns_int extra)
{
    assert1(NULL, "Bytes are not supported yet.\n");
    //HEADER(result) = (Object)class;
    return NULL;
}

Object instantiate_WORDS(Type_Class class, uns_int base, uns_int extra)
{
    Type_Symbol result = NEW_ARRAYED(struct Type_Symbol_t, wchar_t[base+extra]);
    result->size = extra;
    HEADER(result) = (Object)class;
    return (Object)result;
}

Object instantiate_OBJECT(Type_Class class, uns_int size)
{
    Type_Object result = NEW_ARRAYED(struct Type_Object_t, Object[size]);
    uns_int i;
    for (i = 0; i < size; i++) {
        result->ivals[i] = Nil;
    }
    HEADER(result) = (Object)class;
    return (Object)result;
}

/* ========================================================================= */

#define INSTANTIATE(type)\
    if (tag == type) {\
        return instantiate##_##type(class, getsize(class));\
    }

#define INSTANTIATE_SIZED(type)\
    if (tag == type) {\
        return instantiate##_##type(class, getsize(class), size);\
    }

/* ========================================================================= */


Object instantiate(Type_Class class)
{
    Type_Tag tag = gettag(class);

    INSTANTIATE(OBJECT);

    assert(NULL, printf("Not a fixed-sized object type: %i\n", tag));
    return NULL;
}

Object instantiate_sized(Type_Class class, uns_int size)
{
    Type_Tag tag = gettag(class);

    INSTANTIATE_SIZED(ARRAY);
    INSTANTIATE_SIZED(BYTES);
    INSTANTIATE_SIZED(WORDS);

    assert(NULL, printf("Not a arrayed object type: %i\n", tag));
    return NULL;
}
