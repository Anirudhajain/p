
#define RUNTIME_CLOSURE_TEST_SETUP \
    Runtime_Closure closure = new_Runtime_Closure(); \
    Object result;

/* ========================================================================= */

NEW_TEST(Runtime_Closure_evaluation)
    SKIP_TEST;
    Type_Array body         = empty_Type_Array;
    Runtime_Closure closure = new_Runtime_Closure(new_AST_Block(0, body), (Runtime_BlockContext)Nil);
    Object closure_const    = (Object)new_AST_Constant((Object)closure);
    Type_SmallInt integer   = new_Type_SmallInt(120);
    Object integer_const    = (Object)new_AST_Constant((Object)integer);
    Type_SmallInt integer7  = new_Type_SmallInt(7);
    Object integer7_const   = (Object)new_AST_Constant((Object)integer7);
    
    Object result = Eval_Send0(closure_const, SMB_eval);
    assert0(result == (Object)closure);
    
    // with one body element ---------------------------------------------------
    closure->code->body = new_Type_Array_With(1, integer_const);
    result       = Eval_Send0(closure_const, SMB_eval);
    assert(result == (Object)integer, printf("%ls\n", Object_classname(result)));
    
    // with one argument -------------------------------------------------------
    AST_Variable var      = new_AST_Variable(L"myVar");
    closure->code->body   = new_Type_Array_With_All(3, integer7_const);
    closure->code->body->values[2] = (Object)var;
    
    var->key = (Object)closure;
    var->index = 0;
    
    result       = Eval_Send1(closure_const, SMB_eval_, integer_const);
    assert(result == (Object)integer, printf("%ls\n", Object_classname(result)));
    ASSERT_EMPTY_STACK;
}


NEW_TEST(Runtime_Closure_invocation_with_arguments)
    AST_Variable var        = new_AST_Variable(L"myVar");
    Type_Array body         = new_Type_Array_With(1, (Object)var);
    Runtime_Closure closure = new_Runtime_Closure(new_AST_Block(0, body), (Runtime_BlockContext)Nil);
    var->key = (Object)closure->code;
    var->index = 0;
    
    Type_Symbol test           = new_Type_Symbol(L"test");
    Type_SmallInt integer      = new_Type_SmallInt(120);
    store_closure(Type_SmallInt_Class, test, closure);
    Object result     = Eval_Send1((Object)integer, test, (Object)integer);
    assert0(result == (Object)integer);
    ASSERT_EMPTY_STACK;
}


NEW_TEST(Runtime_Closure_invocation)
    Type_Array body         = empty_Type_Array;
    Runtime_Closure closure = new_Runtime_Closure(new_AST_Block(0, body), (Runtime_BlockContext)Nil);
    Type_Symbol test        = new_Type_Symbol(L"test");
    Type_SmallInt integer   = new_Type_SmallInt(120);
    store_closure(Type_SmallInt_Class, test, closure);
    Object result           = Eval_Send0((Object)integer, test);
    assert0(result == (Object)integer);
    ASSERT_EMPTY_STACK;
    
    // with 1 body element
    Type_SmallInt integer5      = new_Type_SmallInt(5);
    AST_Constant integer5_const = new_AST_Constant((Object)integer5);
    body                        = new_Type_Array_With(1, (Object)integer5_const);
    closure                     = new_Runtime_Closure(new_AST_Block(0, body), (Runtime_BlockContext)Nil);
    store_closure(Type_SmallInt_Class, test, closure);
    result                      = Eval_Send0((Object)integer, test);
    assert0(result == (Object)integer5);
    ASSERT_EMPTY_STACK;
    
    // with 2 body element
    Type_SmallInt integer6      = new_Type_SmallInt(6);
    AST_Constant integer6_const = new_AST_Constant((Object)integer6);
    body                        = new_Type_Array_With_All(2, (Object)integer5_const);
    body->values[1]             = (Object)integer6_const;
    closure                     = new_Runtime_Closure(new_AST_Block(0, body), (Runtime_BlockContext)Nil);
    store_closure(Type_SmallInt_Class, test, closure);
    result                      = Eval_Send0((Object)integer, test);
    assert0(result == (Object)integer6);
    ASSERT_EMPTY_STACK;
    
    // with 3 body element
    Type_SmallInt integer7      = new_Type_SmallInt(7);
    AST_Constant integer7_const = new_AST_Constant((Object)integer7);
    body                        = new_Type_Array_With_All(3, (Object)integer5_const);
    body->values[1]             = (Object)integer6_const;
    body->values[2]             = (Object)integer7_const;
    closure                     = new_Runtime_Closure(new_AST_Block(0, body), (Runtime_BlockContext)Nil);
    store_closure(Type_SmallInt_Class, test, closure);
    result                      = Eval_Send0((Object)integer, test);
    assert0(result == (Object)integer7);
    ASSERT_EMPTY_STACK;
}


NEW_TEST(Runtime_Closure_apply)
    // without any body element
    Type_Array body         = empty_Type_Array;
    Runtime_Closure closure = new_Runtime_Closure(new_AST_Block(0, body), (Runtime_BlockContext)Nil);
    Object result           = Eval_Send0((Object)closure, SMB_apply);
    assert0(result == Nil);
    ASSERT_EMPTY_STACK;
    
    // with 1 body element
    Type_SmallInt integer5      = new_Type_SmallInt(5);
    AST_Constant integer5_const = new_AST_Constant((Object)integer5);
    body                        = new_Type_Array_With(1, (Object)integer5_const);
    closure                     = new_Runtime_Closure(new_AST_Block(0, body), (Runtime_BlockContext)Nil);
    result                      = Eval_Send0((Object)closure, SMB_apply);
    assert0(result == (Object)integer5);
    ASSERT_EMPTY_STACK;
    
    // with 2 body element
    Type_SmallInt integer6      = new_Type_SmallInt(6);
    AST_Constant integer6_const = new_AST_Constant((Object)integer6);
    body                        = new_Type_Array_With_All(2, (Object)integer5_const);
    body->values[1]             = (Object)integer6_const;
    closure                     = new_Runtime_Closure(new_AST_Block(0, body), (Runtime_BlockContext)Nil);
    result                      = Eval_Send0((Object)closure, SMB_apply);
    assert0(result == (Object)integer6);
    ASSERT_EMPTY_STACK;
    
    // with 3 body element
    Type_SmallInt integer7      = new_Type_SmallInt(7);
    AST_Constant integer7_const = new_AST_Constant((Object)integer7);
    body                        = new_Type_Array_With_All(3, (Object)integer5_const);
    body->values[1]             = (Object)integer6_const;
    body->values[2]             = (Object)integer7_const;
    closure                     = new_Runtime_Closure(new_AST_Block(0, body), (Runtime_BlockContext)Nil);
    result                      = Eval_Send0((Object)closure, SMB_apply);
    assert0(result == (Object)integer7);
    ASSERT_EMPTY_STACK;
}


METHOD(Runtime_Closure_MACRO_method,0,1)
    ADD_STATEMENT(Self);
    return method;
}

NEW_TEST(Runtime_Closure_MACRO)
    Runtime_Closure closure = Runtime_Closure_MACRO_method();
    assert0(closure->code->body->size == 1);
    assert0(closure->code->body->values[0] == Self);
    printf("%ls", closure->info->name->value);
    assert(wcscmp(closure->info->name->value, L"Runtime_Closure_MACRO_method")==0, 
        printf("%ls", closure->info->name->value));
}

NEW_TEST(Runtime_Closure_new_Runtime_Closure)
    AST_Block code               = new_AST_Block(0, empty_Type_Array);
    Runtime_BlockContext context = new_Runtime_BlockContext(NULL, NULL);
    Runtime_Closure closure      = new_Runtime_Closure(code, context);
    assert0(closure->code == code);
    assert0(closure->context == context);
    assert0(closure->info == empty_AST_Info);
}

/* ========================================================================= */

TEST_SUITE(Runtime_Closure,
{
    RUN_TEST(Runtime_Closure_invocation_with_arguments);
    RUN_TEST(Runtime_Closure_invocation);
    RUN_TEST(Runtime_Closure_evaluation);
    RUN_TEST(Runtime_Closure_apply);
    RUN_TEST(Runtime_Closure_MACRO);
    RUN_TEST(Runtime_Closure_new_Runtime_Closure);
})

