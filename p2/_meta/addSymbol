#!/usr/bin/env ruby

SMB_init = "system/type/SymbolInitialization.ci"

def addSymbol(symbol)
    symbol_name = symbol.gsub(':', "_") 
    File.open("system/type/SymbolDefinition.hi", "a+") do |f|
        f.puts "extern Type_Symbol SMB_#{symbol_name};"
    end
    File.open("system/type/SymbolDefinition.ci", "a+") do |f|
        f.puts "Type_Symbol SMB_#{symbol_name};"
    end
    File.open(SMB_init, "a+") do |f|
        f.puts "SMB_#{symbol_name} = new_Type_Symbol(L\"#{symbol}\");"
    end
end

def ensureSymbol(name)
    File.readlines(SMB_init).grep(Regexp.new("\"#{name}\"")).length > 0
end

def cleanUpSymbolInitialization()
    lines =  File.readlines(SMB_init)
    max_symbol_length = lines.map{|l| l.match(/(\w+)\ +\=/)[1].size}.max + 1
    lines.map!{|l|
        symbol_length = l.match(/(\w+)\ +\=/)[1].size
        l.gsub(/ +=/, " "*(max_symbol_length-symbol_length)+"=")
    }.sort!
    File.open(SMB_init, "w") do |f|
        f.print(lines.to_s)
    end
end

if $0 == __FILE__
    addedSymbol = false
    $*.each {|symbol|
        if not ensureSymbol(symbol)
            addSymbol(symbol)
            puts "Symbol \"#{symbol}\" added"
            addedSymbol = true
        else
            puts "Symbol \"#{symbol}\" exists already!"
        end
    }
    if addedSymbol or true
        cleanUpSymbolInitialization()
    end
end
