#!/usr/bin/env ruby


def createCHSourcesAt(path)
    separator = "/* ======================================================================== */"
    dir = File.dirname path
    name = File.basename path
    dirname = File.basename dir
    fullName = "#{dirname.capitalize}_#{name}"
    guard = "#{name.upcase}_H"

    # create the file only if it doesn't exist yet
    sourceH = File.open("#{path}.h", File::WRONLY|File::EXCL|File::CREAT)
    pinocchioTypeHI = File.open("pinocchioType.hi", File::WRONLY|File::EXCL|File::APPEND)
    sourceC = File.open("#{path}.c", File::WRONLY|File::EXCL|File::CREAT)
    pinocchioTypeIncludeHI = File.open("pinocchioTypeInclude.hi", File::WRONLY|File::EXCL|File::APPEND)
    
    sourceT = File.open(path+"Test.ci", File::WRONLY|File::EXCL|File::CREAT)
    
    sourceH.puts "#ifndef #{guard}"
    sourceH.puts "#define #{guard}"
    sourceH.puts
    sourceH.puts "#include <pinocchio.h>" 
    sourceH.puts
    sourceH.puts separator
    sourceH.puts
    sourceH.puts "struct #{fullName}_t {"
    sourceH.puts "    #error \"TODO fill out struct\""
    sourceH.puts "};"
    sourceH.puts
    sourceH.puts "CREATE_INITIALIZERS(#{fullName})"
    sourceH.puts "extern #{fullName} new_#{fullName}();"
    sourceH.puts
    sourceH.puts separator
    sourceH.puts
    sourceH.puts separator
    sourceH.puts
    sourceH.puts "#endif // #{guard}"
    sourceH.close

    pinocchioTypeHI.puts "TYPE(#{fullName});"
    pinocchioTypeHI.close

    pinocchioTypeIncludeHI.puts "#include <#{path}.h>"
    pinocchioTypeIncludeHI.close

    sourceC.puts
    sourceC.puts "#include <stdlib.h>"
    sourceC.puts "#include <stdio.h>"
    sourceC.puts "#include <#{path}.h>"
    sourceC.puts 
    sourceC.puts separator
    sourceC.puts 
    sourceC.puts "Type_Class #{fullName}_Type_Class;"
    sourceC.puts 
    sourceC.puts separator
    sourceC.puts 
    sourceC.puts "void pre_init_#{fullName}()"
    sourceC.puts "{"
    sourceC.puts "    #{fullName}_Type_Class = new_Named_Type_Class((Object)Type_Object_Type_Class, L\"#{fullName}\");"
    sourceC.puts "}"
    sourceC.puts 
    sourceC.puts separator
    sourceC.puts 
    sourceC.puts 
    sourceC.puts 
    sourceC.puts separator
    sourceC.puts 
    sourceC.puts "void post_init_#{fullName}()"
    sourceC.puts "{"
    sourceC.puts
    sourceC.puts "}"
    sourceC.close

    sourceT.puts 
    sourceT.puts "#define #{name.upcase}_TEST_SETUP \\" 
    sourceT.puts "    #{fullName} #{name} = new_#{fullName}(); \\"
    sourceT.puts "    Object result;"
    sourceT.puts 
    sourceT.puts separator 
    sourceT.puts 
    sourceT.puts 
    sourceT.puts separator
    sourceT.puts 
    sourceT.puts "void test_#{fullName}()" 
    sourceT.puts "{" 
    sourceT.puts 
    sourceT.puts "}"
    sourceT.puts 

    File.open("pinocchioPreInit.ci", File::WRONLY|File::EXCL|File::APPEND) do |file|
        file.puts "pre_init_#{fullName}();"
    end

    File.open("pinocchioPostInit.ci", File::WRONLY|File::EXCL|File::APPEND) do |file|
        file.puts "post_init_#{fullName}();"
    end
    
    puts "Successfully created #{fullName}"
end


if $0 == __FILE__:
    $*.each { |path|
        createCHSourcesAt path  
    }
end
