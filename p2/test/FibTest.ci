
Type_Symbol SMB_fib;

METHOD(fib_method, 0, 1)
    AST_Variable var = new_AST_Variable(L"a");
    var->key   = (Object)method;
    var->index = 0;
    
    AST_Send test = new_AST_Send((Object)var, (Object)SMB_lt_, 
                                new_Type_Array_With(1,
                                    (Object)new_AST_Constant(
                                                (Object)new_Type_SmallInt(2))));
                                    
    
    AST_Block break_code = new_AST_Block(0, 
                                        new_Type_Array_With(1,
                                            (Object)new_AST_Constant(
                                                (Object)new_Type_SmallInt(1))));
    
    AST_Send return_send = new_AST_Send(
            (Object)new_AST_Send(
                (Object)new_AST_Send(Self, (Object)SMB_minus_, 
                    new_Type_Array_With(1, 
                        (Object)new_AST_Constant((Object)new_Type_SmallInt(1)))),
                (Object)SMB_fib,
                empty_Type_Array),
            (Object)SMB_plus_, 
            new_Type_Array_With(1,
                (Object)new_AST_Send(
                    (Object)new_AST_Send(Self, (Object)SMB_minus_, 
                        new_Type_Array_With(1, 
                            (Object)new_AST_Constant((Object)new_Type_SmallInt(2)))),
                (Object)SMB_fib,
                empty_Type_Array)));
                
    AST_Block return_code = new_AST_Block(0, new_Type_Array_With(1, (Object)return_send));
    
    Type_Array ifElse_args = new_Type_Array_With(2, (Object)break_code);
    ifElse_args->values[1] = (Object) return_code;
    
    AST_Send ifElse = new_AST_Send((Object)test, (Object)SMB_ifTrue_ifFalse_, ifElse_args);
    ADD_STATEMENT(ifElse);
    
    return (Object)method;
}

int cfib (int a) {
    if (a < 2) {
        return 1;
    }
    return cfib(a-1) + cfib(a-2);
}

TEST_SUITE(Fib, 
{
    SMB_fib = new_Type_Symbol(L"fib:");
    store_method(Type_SmallInt_Class, SMB_fib, fib_method());
    Object result;
    result = Eval_Send0((Object)new_Type_SmallInt(1), SMB_fib);
    assert0(((Type_SmallInt)result)->value == cfib(1));
    
});
